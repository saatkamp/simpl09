#LyX 1.6.5 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\begin_preamble





\usepackage{babel}

%Packages für eigen definierte Header und Footer
\usepackage{lastpage}
\usepackage{fancyhdr}

% doctitel = Titel des Dokuments
% docvers = Versionsnr.
% docautor = Author(en)
% docdate = Datum der letzten Änderung
\def\doctitel{Feinentwurf}
\def\docvers{2.5}
\def\docautor{}
\def\docdate{15. Mai 2010}

% docstate = Status des Dokuments aus {neu, bearbeitet}
% qsstate = QS-Prüfungsstatus aus {positiv QS-geprüft, negativ QS-geprüft, verworfen}
% proofstate = Prüfungsstatus (durch Projektleiter) aus {positiv geprüft, negativ geprüft, verworfen}
% reviewstate = Annahmestatus des Reviews {kein Review durchgeführt, akzeptiert ohne Änderungen, akzeptiert mit Änderungen, nicht akzeptiert}
% endstate = Endstatus des Dokuments aus {freigegeben, verworfen}
\def\docstate{neu}
\def\qsstate{nicht QS-geprüft}
\def\proofstate{nicht geprüft}
\def\reviewstate{kein Review durchgeführt}
\def\endstate{-}

%Nicht einrücken
%\setlength{\parindent}{0pt}
\end_preamble
\use_default_options false
\language ngerman
\inputencoding latin9
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_amsmath 0
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 3cm
\topmargin 3cm
\rightmargin 3cm
\bottommargin 3cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "Deckblatt.lyx"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%Header und Footer Definitionen für alle anderen Seiten
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
pagestyle
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

fancy
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset FormulaMacro
\renewcommand{\headrulewidth}{0mm}
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
lhead
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
chead
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
rhead
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
lfoot
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\size small
SIMPL © 2009 $IMPL
\size default

\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
cfoot
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
rfoot
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\size small

\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
thepage
\end_layout

\end_inset


\begin_inset space \space{}
\end_inset

/ 
\begin_inset CommandInset ref
LatexCommand pageref
reference "LastPage"

\end_inset


\size default

\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%Ab hier beginnt das Dokument
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
Änderungsgeschichte
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="22" columns="4">
<features>
<column alignment="left" valignment="top" width="2cm">
<column alignment="left" valignment="top" width="3cm">
<column alignment="left" valignment="top" width="3cm">
<column alignment="left" valignment="top" width="6cm">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Version
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Datum
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Autor
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Änderungen
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
13.11.2009
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
zoabifs
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Erstellung des Dokuments.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
04.01.2010
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
schneimi
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Überarbeitung der Struktur, Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Einleitung"

\end_inset

 hinzugefügt.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
09.01.2010
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
schneimi
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:SIMPLCore"

\end_inset

 hinzugefügt.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
12.02.2010
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
schneimi
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Beschreibung von Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Kommunikation"

\end_inset

.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
12.01.2010
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
rehnre
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:BPEL-DM-Extension"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:SIMPL-Event-System"

\end_inset

 und 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Ausführung-einer-BPEL-DM"

\end_inset

 hunzugefügt.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
12.01.2010
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
huettiwg
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:SIMPL-DAO"

\end_inset

 hinzugefügt.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
12.01.2010
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
bruededl
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Beschreibung von Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Eclipse"

\end_inset

.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
12.01.2010
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
hahnml
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Diagramme in Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Eclipse"

\end_inset

 und 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Kommunikation"

\end_inset

 eingefügt.
\end_layout

\begin_layout Plain Layout
Beschreibung der Abschnitte 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Administration-Service"

\end_inset

 und 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Storage-Service"

\end_inset

.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
15.01.2010
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
bruededl
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Eclipse"

\end_inset

 überarbeitet
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
15.01.2010
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
schneimi, hahnml, huettiwg
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Abschließende Korrekturen durchgeführt.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
24.03.2010
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
hahnml
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Eclipse"

\end_inset

 überarbeitet.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
24.03.2010
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
huettiwg
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:SIMPL-DAO"

\end_inset

 überarbeitet.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
26.03.2010
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
schneimi, hahnml, huettiwg, rehnre
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Abschluss der Korrektur der 1.Iteration.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
27.03.2010
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
hahnml
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Abschnitte 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:RRS-Eclipse-Plug-In"

\end_inset

 und 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:UDDI-Eclipse-Plug-In"

\end_inset

 eingefügt.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
29.03.2010
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
schneimi
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Paketstruktur"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:SIMPLCore"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Datasource-Service"

\end_inset

,
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Plug-In-System"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Web-Services"

\end_inset

 überarbeitet, Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:SIMPLConfig"

\end_inset

,
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Dataformat-Service"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Metadaten"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Hilfsklassen"

\end_inset

 hinzugefügt.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
01.04.2010
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
schneimi
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:SIMPL-Core-Client"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Kommunikation"

\end_inset

 überarbeitet, Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Strategy-Service"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Connection-Service"

\end_inset

 hinzugefügt.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
01.04.2010
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
rehnre
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Apache-ODE"

\end_inset

 überarbeitet und 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Reference-Resolution-System"

\end_inset

 eingefügt.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
01.04.2010
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
huettiwg
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Uddi-Registry"

\end_inset

 erstellt.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
15.05.2010
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
hahnml
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:BPEL-DM-Plug-In"

\end_inset

 bis 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:RRS-Eclipse-Plug-In"

\end_inset

 überarbeitet.
 Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:RRS-Transformation-Service"

\end_inset

 und 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:RRS-Transformation-Eclipse-Plug-In"

\end_inset

 eingefügt bzw.
 erweitert.
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
17.05.2010
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
rehnre
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Reference-Resolution-System"

\end_inset

 überarbeitet und erweitert.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
18.05.2010
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
bruededl
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Kapitel 
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Eclipse"

\end_inset

 überarbeitet.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Einleitung"

\end_inset

Einleitung
\end_layout

\begin_layout Standard
Dieses Kapitel erklärt den Zweck des Dokuments, den Zusammenhang zu anderen
 Dokumenten und gibt dem Leser einen Überblick über den Aufbau des Dokuments.
\end_layout

\begin_layout Subsection
Zweck dieses Dokuments
\end_layout

\begin_layout Standard
Der Feinentwurf beschreibt Details der Implementierung der Komponenten,
 die im Grobentwurf 
\begin_inset Newline newline
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "key-1"

\end_inset

 in Kapitel 3 vorgestellt wurden.
 Die Komponenten werden ausführlich beschrieben und ihre Funktionalität
 durch statische und dynamische UML-Diagramme visualisiert.
 Der Feinentwurf bezieht sich im Gegensatz zum Grobentwurf aktuell nur auf
 die erste Iteration und wird mit der zweiten Iteration vervollständigt.
 Grobentwurf und Feinentwurf bilden zusammen den Gesamtentwurf des SIMPL
 Rahmenwerks.
\end_layout

\begin_layout Subsection
Gliederung
\end_layout

\begin_layout Standard
Der Feinentwurf gliedert sich in die folgenden Kapitel:
\end_layout

\begin_layout Itemize
Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:SIMPLCore"

\end_inset

 
\begin_inset Quotes eld
\end_inset

SIMPL Core
\begin_inset Quotes erd
\end_inset

 beschreibt die Implementierung des SIMPL Cores und seinen Web Services
 (siehe 
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"

\end_inset

 Kapitel 3.1).
\end_layout

\begin_layout Itemize
Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Apache-ODE"

\end_inset

 
\begin_inset Quotes eld
\end_inset

Apache ODE
\begin_inset Quotes erd
\end_inset

 beschreibt die Implementierung der Datamanagement-Aktivitäten (DM-Aktivitäten)
 und das externe Auditing (siehe
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"

\end_inset

 Kapitel 3.2).
\end_layout

\begin_layout Itemize
Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Reference-Resolution-System"

\end_inset

 
\begin_inset Quotes eld
\end_inset

Reference Resolution System
\begin_inset Quotes erd
\end_inset

 beschreibt die Implementierung des Referenc Resolution Systems und seiner
 Services sowie des RRS DQ-Adapter Plug-In Systems.
\end_layout

\begin_layout Itemize
Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Eclipse"

\end_inset

 
\begin_inset Quotes eld
\end_inset

Eclipse Plug-Ins
\begin_inset Quotes erd
\end_inset

 beschreibt die Implementierung der Eclipse Plug-Ins, die für das SIMPL
 Rahmenwerk realisiert werden (siehe
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"

\end_inset

 Kapitel 3.3).
\end_layout

\begin_layout Itemize
Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Kommunikation"

\end_inset

 
\begin_inset Quotes eld
\end_inset

Kommunikation
\begin_inset Quotes erd
\end_inset

 beschreibt die Kommunikation der Komponenten im SIMPL Rahmenwerk auf Funktionse
bene.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:SIMPLCore"

\end_inset

SIMPL Core
\end_layout

\begin_layout Standard
Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:SIMPL-Core-Klassendiagramm"

\end_inset

 zeigt den Aufbau des SIMPL Cores mit Paketstruktur, Klassen und Interfaces,
 sowie deren Zusammenhänge über Verbindungspfeile, die in den folgenden
 Abschnitten beschrieben werden.
 In der Abbildung wird aus Gründen der Übersichtlichkeit auf die Darstellung
 der Interface- und Web Service-Methoden, sowie Getter- und Setter-Methoden
 verzichtet, die aber in den folgenden Abschnitten genannt und beschrieben
 werden.
 Einige der SIMPL Core Dienste werden, falls sie außerhalb des SIMPL Cores
 aufrufbar sein müssen, nach Außen über Web Services verfügbar gemacht.
 Falls im Nachfolgenden nicht die Dienste selbst, sondern die Web Services
 dieser gemeint sind, werden diese auch als solche bezeichnet, wie z.B.
 Administration Web Service.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diagramme/iteration2/SIMPLCore_Class_Diagram.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:SIMPL-Core-Klassendiagramm"

\end_inset

SIMPL Core Klassendiagramm
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Paketstruktur"

\end_inset

Paketstruktur
\end_layout

\begin_layout Standard
Der SIMPL Core besitzt folgende Paketstruktur, die sich ausgehend vom Kernbereic
h (
\emph on
org.simpl.core
\emph default
), in Bereiche für die Dienste (
\emph on
services
\emph default
), Web Services (
\emph on
webservices
\emph default
), Plug-Ins (
\emph on
plugins
\emph default
) sowie Hilfsklassen (
\emph on
helpers
\emph default
) aufteilt.
\end_layout

\begin_layout Subsubsection*
org.simpl.core
\end_layout

\begin_layout Standard
Hier befinden sich zentrale Klassen des SIMPL Cores, dazu gehört die 
\emph on
SIMPLCore
\emph default
-Klasse, die den Zugriff auf die verschiedenen Dienste ermöglicht, sowie
 die 
\emph on
SIMPLConfig
\emph default
-Klasse, die für das Einlesen der Konfigurationsdatei des SIMPL Cores zuständig
 ist.
 Die Klassen werden in den folgenden Abschnitten 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:SIMPLCore"

\end_inset

 und 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:SIMPLCore"

\end_inset

 näher beschrieben.
\end_layout

\begin_layout Subsubsection*
org.simpl.core.services
\end_layout

\begin_layout Standard
In diesem Paket befinden sich keine Klassen oder Interfaces, es dient lediglich
 zur Gliederung der verschiedenen Dienste des SIMPL Cores.
\end_layout

\begin_layout Subsubsection*
org.simpl.core.services.administration
\end_layout

\begin_layout Standard
Hier befinden sich alle Klassen zur Realisierung des Administration Service
 (siehe 
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"

\end_inset

, Kapitel 3.3.1).
 Dieser Dienst wird benötigt, um alle Einstellungen des SIMPL Cores zu verwalten.
\end_layout

\begin_layout Subsubsection*
org.simpl.core.services.strategy
\end_layout

\begin_layout Standard
Hier befinden sich alle Klassen zur Realisierung des Strategy Service (siehe
 
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"

\end_inset

, Kapitel 3.3.4).
 Dieser Dienst wird für das Late Binding benötigt.
\end_layout

\begin_layout Subsubsection*
org.simpl.core.services.datasource
\end_layout

\begin_layout Standard
Hier befinden sich alle Klassen zur Realisierung des Datasource Service
 (siehe 
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"

\end_inset

, Kapitel 3.3.2).
 Dieser Dienst wird benötigt, um Datenquellen anzubinden und Abfragen an
 diese zu senden.
\end_layout

\begin_layout Subsubsection*
org.simpl.core.plugins
\end_layout

\begin_layout Standard
In diesem Paket befinden sich keine Klassen oder Interfaces, es dient lediglich
 zur Gliederung der verschiedenen Plugins des SIMPL Cores.
\end_layout

\begin_layout Subsubsection*
org.simpl.core.plugins.datasource
\end_layout

\begin_layout Standard
Hier befinden sich die Plug-Ins für den Datasource Service, die für die
 verschiedenen Datenquellentypen entwickelt werden.
 Falls sich die einzelnen Plug-Ins auf mehrere Klassen verteilen, können
 diese zusätzlich auf eigene Unterpakete verteilt werden.
 Das Plug-In-System wird in Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Plug-In-System"

\end_inset

 näher beschrieben.
\end_layout

\begin_layout Subsubsection*
org.simpl.core.plugins.dataformat
\end_layout

\begin_layout Standard
Hier befinden sich die DataFormat Plug-Ins, die für die Unterstützung verschiede
ner Datenformate entwickelt werden.
 Falls sich die einzelnen Plug-Ins auf mehrere Klassen verteilen, können
 diese zusätzlich auf eigene Unterpakete verteilt werden.
 Das Plug-In-System wird in Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Plug-In-System"

\end_inset

 näher beschrieben.
\end_layout

\begin_layout Subsubsection*
org.simpl.core.plugins.dataformat.converter
\end_layout

\begin_layout Standard
Hier befinden sich die DataFormatConverter Plug-Ins, die für die Konvertierung
 zwischen DataFormat Plug-Ins entwickelt werden um einen Austausch von Daten
 zwischen verschiedenen Datasource Services zu ermöglichen.
\end_layout

\begin_layout Subsubsection*
org.simpl.core.webservices
\end_layout

\begin_layout Standard
Hier befinden sich die Web Services des SIMPL Cores, die den Zugriff von
 Außen auf Dienste des SIMPL Cores ermöglichen.
 Alle Klassen werden mit JAX-WS-Annotationen versehen und als Webservices
 über den Axis2 Integration Layer von ODE zur Verfügung gestellt.
\end_layout

\begin_layout Subsubsection*
org.simpl.core.helpers
\end_layout

\begin_layout Standard
In diesem Paket befinden sich Hilfsklassen, die den Entwickler unterstützen.
\end_layout

\begin_layout Subsection
Interfaces 
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO: Interfaces beschreiben
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
DataSourceService<S, T>
\end_layout

\begin_layout Subsubsection
DataFormat<S, T>
\end_layout

\begin_layout Subsubsection
DataFormatConverter
\end_layout

\begin_layout Subsubsection
StrategyService
\end_layout

\begin_layout Subsubsection
AdministrationService
\end_layout

\begin_layout Subsection
Datentypen und Enumerationen
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO: Beschreibung
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
DataSource
\end_layout

\begin_layout Subsubsection
Authentication
\end_layout

\begin_layout Subsubsection
LateBinding
\end_layout

\begin_layout Subsubsection
Strategy
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Hilfsklassen"

\end_inset

Hilfsklassen
\end_layout

\begin_layout Standard
Für den Entwickler werden folgende Hilfsklassen zur Verfügung gestellt.
\end_layout

\begin_layout Subsubsection
Printer
\end_layout

\begin_layout Standard
Mit der Klasse
\emph on
 Printer
\emph default
 kann über die statische Methode 
\emph on
+printDataObject(DataObject) 
\emph default
ein SDO auf der Konsole ausgeben werden.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Parameter"

\end_inset

Parameter
\end_layout

\begin_layout Standard
Mit der Klasse 
\emph on
Parameter 
\emph default
können über die statischen Methoden 
\emph on
+serialize(Object object)
\emph default
 und 
\emph on
+deserialize(String data) 
\emph default
beliebige Java Objekte zu XML serialisiert und von XML deserialisiert werden.
 Dies geschieht mit Hilfe der Java Klassen 
\emph on
XMLEncoder
\emph default
 und 
\emph on
XMLDecoder
\emph default
.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:SIMPLCore"

\end_inset

SIMPLCore Klasse
\end_layout

\begin_layout Standard
Die Klasse
\emph on
 SIMPLCore
\emph default
 bildet den zentralen Zugriffspunkt auf alle Dienste des SIMPL Cores auf
 Klassenebene.
 Damit die Instanzen der Dienste nur einmal existieren und nicht bei jedem
 Zugriff erneut erstellt werden, ist die Klasse als Singleton (
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"

\end_inset

 Kapitel 3.3) ausgelegt.
 Diese Klasse wird von den Apache ODE Extension Activities (siehe 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:BPEL-DM-Extension"

\end_inset

) benutzt, um DM-Aktivitäten auszuführen, sowie innerhalb des SIMPL Cores,
 wenn Dienste sich gegenseitig verwenden.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Singleton"

\end_inset

Singleton
\end_layout

\begin_layout Standard
Das Singleton wird über einen privaten Konstruktor, sowie der Methode 
\emph on
+getInstance() 
\emph default
realisiert, die, falls noch keine Instanz existiert, einmalig eine Instanz
 erstellt und bei folgenden Anfragen auf diese zurückgreift.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Funktionen-SIMPLCore"

\end_inset

Funktionen
\end_layout

\begin_layout Standard
Folgende Funktionen stehen zur Verfügung:
\end_layout

\begin_layout Paragraph*
administrationService() 
\end_layout

\begin_layout Standard
Liefert die Instanz des Administration Service.
\end_layout

\begin_layout Paragraph*
dataSourceService() 
\end_layout

\begin_layout Standard
Liefert die Instanz des Datasource Service.
\end_layout

\begin_layout Paragraph*
strategyService() 
\end_layout

\begin_layout Standard
Liefert die Instanz des Strategy Service.
\end_layout

\begin_layout Paragraph*
getConfig() 
\end_layout

\begin_layout Standard
Liefert die Konfiguration des SIMPL Core als Instanz von 
\emph on
SIMPLConfig
\emph default
.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:SIMPLConfig"

\end_inset

SIMPLConfig Klasse
\end_layout

\begin_layout Standard
Die installierten Plugins und ggf.
 später weitere Einstellungen des SIMPL Cores, werden über eine Konfigurationsda
tei registriert, die in folgendem Abschnitt näher beschrieben wird.
 Das Einlesen und Abrufen der Informationen aus dieser Datei ist über die
 SIMPLConfig Klasse möglich.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Die-simpl-core-config.xml-Datei"

\end_inset

Konfigurationsdatei
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO: Beschreibung überarbeiten hinsichtlich der Referenzierten Plug-In
 Namen in tDataFormat und tDataFormatConverter
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Die Konfigurationsdatei ist unter
\emph on
 ode/conf/simpl-core-config.xml 
\emph default
abgelegt und hat die folgende Struktur, die in Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Die-SIMPLCore-Konfigurationsdatei-simpl-core-config.xml"

\end_inset

 zu sehen ist.
 Die Plug-In-Klassen müssen hier jeweils mit dem voll qualifizierten Namen
 registriert werden und als jar-Dateien beliebigen Namens unter 
\emph on
ode/lib
\emph default
 abgelegt werden, damit sie erkannt werden.
 Die Konfigurationsdatei wird beim Start des SIMPL Cores einmalig geladen,
 Änderungen an der Konfigurationsdatei sind deshalb erst nach einem Neustart
 von Apache Tomcat verfügbar.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diagramme/iteration2/SIMPLConfigSchema.png
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Die-SIMPLCore-Konfigurationsdatei-simpl-core-config.xml"

\end_inset

Die SIMPLCore-Konfigurationsdatei simpl-core-config.xml
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Funktionen
\end_layout

\begin_layout Standard
Folgende Funktionen stehen über die Klasse zur Verfügung:
\end_layout

\begin_layout Paragraph*
getDataSourcePlugins()
\end_layout

\begin_layout Standard
Liefert eine Liste mit voll qualifizierten Namen der registrierten DataSourcePlu
gins.
\end_layout

\begin_layout Paragraph*
getDataFormatPlugins()
\end_layout

\begin_layout Standard
Liefert eine Liste mit voll qualifizierten Namen der registrierten DataFormatPlu
gins.
\end_layout

\begin_layout Paragraph*
getDataFormatConverterPlugins()
\end_layout

\begin_layout Standard
Liefert eine Liste mit voll qualifizierten Namen der registrierten DataFormatCon
verterPlugins.
\end_layout

\begin_layout Paragraph*
getDataFormatMapping()
\end_layout

\begin_layout Standard
Liefert eine Hashmap mit voll qualifizierten Namen der registrierten DataFormatP
lugins und ihren zugewiesenen DataSourceServices.
\end_layout

\begin_layout Paragraph*
getDataFormatConverterMapping()
\end_layout

\begin_layout Standard
Liefert eine Hashmap mit voll qualifizierten Namen der registrierten DataFormatC
onverterPlugins und ihren zugewiesenen DataSourceServices.
\end_layout

\begin_layout Subsection
SIMPL Core Services
\end_layout

\begin_layout Standard
In diesem Abschnitt werden die Dienste des SIMPL Cores und ihre Funktionsweise
 beschrieben.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Administration-Service"

\end_inset

Administration Service
\end_layout

\begin_layout Standard
Der Administration Service ist für die Verwaltung der Einstellungen der
 Admin-Konsole des SIMPL Core Eclipse Plug-Ins zuständig.
 Die Einstellungen der Admin-Konsole werden dabei über das SIMPL Core Communicat
ion Plug-In (siehe 
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"

\end_inset

, Kapitel 2.1) an den Administration Service übermittelt oder von ihm angefordert.
 Die auf diese Weise zentral im SIMPL Core hinterlegten Einstellungen können
 dann bei Bedarf direkt von anderen SIMPL Core Diensten, die diese Informationen
 benötigen, ausgelesen werden.
 Zur persistenten Speicherung der Einstellungen und weiterer Daten wird
 eine eigene eingebettete Apache Derby (Embedded Derby) Datenbank verwendet,
 die vom gesamten SIMPL Core genutzt wird.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diagramme/iteration1/AdminServiceSequence.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Sequenzdiagramm-des-AdministrationServices"

\end_inset

Sequenzdiagramm eines Lade- und Speichervorgangs der SIMPL Core Einstellungen
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Sequenzdiagramm-des-AdministrationServices"

\end_inset

 zeigt die Verwendung und die Funktionalität des Administration Service.
 Mit der loadSettings()-Methode können Einstellungen aus der Datenbank geladen
 werden.
 Dafür wird intern eine einfache Datenbankabfrage genutzt.
 Die Einstellungen werden dabei als HashMap zurückgeliefert und auch so
 beim Speichern übergeben, damit sowohl die Bezeichnung der Einstellung
 wie auch ihr Wert zu jeder Zeit verfügbar sind.
 Zur Identifizierung verschiedener Einstellungsprofile, wie z.B.
 Standard-Einstellungen und zuletzt gespeicherten Einstellungen, besitzt
 jede Einstellung eine eindeutige Id.
 So kann später die Admin-Konsole um das Laden und Speichern von benutzerspezifi
schen Preset-Einstellungen ergänzt werden.
\end_layout

\begin_layout Standard
Die Struktur der Datenbank orientiert sich direkt am Aufbau der Admin-Konsole.
 Da in der Admin-Konsole immer Ober- und Unterpunkte zusammengehören, wurden
 auf der Datenbank diese Beziehungen durch die Strukturierung mit Schemata
 und Tabellen umgesetzt.
 So gibt es für jeden Oberpunkt, wie z.B.
 
\emph on
Auditing
\emph default
 ein gleichnamiges Schema und für jeden Unterpunkt eines Oberpunkts, wie
 z.B.
 
\emph on
General
\emph default
 eine gleichnamige Tabelle im Schema des Oberpunkts.
 Daraus ergibt sich der genaue Pfad einer in der Datenbank gespeicherten
 Einstellung aus der Auswahl in der Admin-Konsole.
 Mit der saveSettings()-Methode können Einstellungen in einer entsprechenden
 Tabelle eines Schemas gespeichert werden.
 Dazu wird zuerst überprüft, ob das zu den Einstellungen gehörige Schema
 bereits existiert (createSchemaIfItDoesntExistYet()) oder noch erzeugt
 werden muss, und anschließend, ob die Tabelle bereits existiert (createTableIfI
tDoesntExistYet()) oder noch erzeugt werden muss.
 Die Tabelle wird dabei direkt aus den übergebenen Einstellungen automatisch
 erzeugt, indem die Einstellungsnamen als Spaltennamen verwendet werden.
 Wenn nun Schema und Tabelle vorhanden sind, wird überprüft, ob die zu speichern
de Einstellung bereits vorhanden ist und nur noch aktualisiert werden muss,
 oder ob die Einstellung neu angelegt, also eine neue Zeile eingefügt werden
 muss.
 Dazu wird die executeUpdate()-Methode verwendet, die eventuell vorhandene
 Einstellungsprofile abfragt und anhand des Abfrageergebnisses (Einstellungsprof
il existiert vs.
 Einstellungsprofil existiert nicht) das Einstellungsprofil über entsprechende
 Datenbankbefehle aktualisiert oder erstellt.
 Der AdministrationService gibt anschließend eine Statusmeldung (success?)
 an den SIMPL Core zurück, ob der ausgeführte Speichervorgang erfolgreich
 war.
 Dieses generische Vorgehen ist erforderlich, um die Erweiterung der Admin-Konso
le durch weitere Eigenschaften möglichst einfach zu halten.
 Ein Entwickler muss nur die vorhandenen Schnittstellen der Admin-Konsole
 implementieren, seine Implementierung an den entsprechenden Extension-Point
 anbinden und braucht sich nicht um das Laden und Speichern seiner Einstellungen
 zu kümmern.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Datasource-Service"

\end_inset

Datasource Service
\end_layout

\begin_layout Standard
Der Datasource Service realisiert die Schnittstelle für den Zugriff auf
 die verschiedenen Datenquellen der über Plug-Ins realisiert wird (siehe
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:DataSourcePlugin"

\end_inset

).
 Die Einteilung der Datenquellen geschieht dabei über Typ, Subtyp und Language,
 wie z.B.
 die relationale Datenbank (Typ: RDB) DB2 (Subtyp: DB2) mit der Anfragesprache
 SQL (Language: SQL).
 Eine genaue Beschreibung des Plug-In Systems folgt in Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Plug-In-System"

\end_inset

.
 Folgende Funktionen müssen von einem Datenquellen Plug-In realisiert werden,
 die vom Interface 
\emph on
DataSourceService
\emph default
 vorgegeben werden:
\end_layout

\begin_layout Paragraph
public DataObject retrieveData(String dsAddress, String statement)
\end_layout

\begin_layout Standard
Ermöglicht die Anforderung von Daten einer bestimmten Datenquelle durch
 Adresse und ein Statement der entsprechenden Anfragesprache wie z.B.
 ein SELECT-Statement in der Anfragesprache SQL.
 Die Rückgabe der Daten erfolgt als SDO.
\end_layout

\begin_layout Paragraph
public boolean depositData(String dsAddress, String statement, String target)
\end_layout

\begin_layout Standard
Mit dieser Funktion werden über ein Statement Daten einer Datenquelle selektiert
 und auf der Datenquelle selbst hinterlegt.
 Die hinterlegten Daten werden über das 
\emph on
target
\emph default
 referenziert und können darüber anschließend abgerufen werden, dies kann
 z.B.
 der Tabellenname bei einer relationalen Datenbank sein.
 Die Ausführung wird mit einem booleschen Rückgabewert bestätigt.
\end_layout

\begin_layout Paragraph
public boolean executeStatement(String dsAddress, String statement)
\end_layout

\begin_layout Standard
Ermöglicht die Ausführung eines Statements auf einer Datenquelle und bestätigt
 die Ausführung mit einem booleschen Rückgabewert.
 Die Funktion wirde hauptsächlich dazu verwendet um Datenstrukturen auf
 einer Datenquelle zu definieren, wie z.B.
 das Erstellen von Tabellen bei einer relationalen Datenbank.
\end_layout

\begin_layout Paragraph
public boolean writeBack(String dsAddress, DataObject data)
\end_layout

\begin_layout Standard
Wird verwendet, um bestehende Daten einer Datenquelle zu manipulieren bzw.
 zu aktualisieren.
 Die Funktion erhält die geänderten Daten als SDO und gleicht diese mit
 den vorhanden Daten auf der Datenquelle ab.
 Der Erfolg der Operation wird mit einem booleschen Rückgabewert bestätigt.
\end_layout

\begin_layout Paragraph
public DataObject getMetaData(String dsAddress)
\end_layout

\begin_layout Standard
Liefert Metadaten einer Datenquelle als SDO.
 Die Umsetzung wird in Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Metadaten"

\end_inset

 näher beschrieben.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Strategy-Service"

\end_inset

Strategy Service
\end_layout

\begin_layout Standard
Der Strategy Service stellt dem Datasource Service Provider die Möglichkeit
 des Late Bindung zur Verfügung, dabei kann eine zur Modellierung noch unbekannt
e Datenquelle über WS-Policy Anforderungen zur Laufzeit aus der im SIMPL
 Core eingestellten Datenquellen-Registry ausgewählt werden.
 Zu diesem Zweck implementiert der Datasource Service folgende Funktion:
\end_layout

\begin_layout Paragraph*
public DataSourceService getDataSourceService(String wsPolicy, Strategy
 strategy)
\end_layout

\begin_layout Standard
Als Parameter bekommt die Funktion die Anforderungen als WS-Policy mitgeteilt
 und kann anschließend mit der angegebenen Strategie vom Enum-Typ 
\emph on
Strategy,
\emph default
 wie z.B.
 
\emph on
FIRST_FIND
\emph default
, eine Datenquelle in der Datenquellenregistry (UDDI) ausfindig machen.
 Mit den Informationen aus der Datenquellenregistry kann der entsprechenden
 Datasource Service bereitgestellt werden.
 Der Zugriff auf die Registry wird mit einem Client realisiert, der der
 Apache jUDDI Registry 
\begin_inset CommandInset citation
LatexCommand cite
key "key-4"

\end_inset

 als 
\emph on
juddi-client-3.0.1.jar 
\emph default
beiliegt und mit dem auch andere UDDI v3 konformen Registries erreicht werden
 können.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Connection-Service"

\end_inset

Connection Service
\begin_inset Note Note
status open

\begin_layout Plain Layout
Ersetzt Strategy Service, in Grobentwurf nachtragen
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Der Connection Service bietet dem Datasource Service die Möglichkeit, JDBC
 Verbindungen in einem Pool zwischenzuspeichern und bei Folgezugriffen wiederauf
zunehmen.
 Dadurch wird die Ausführung von Workflows mit DM-Aktivitäten beschleunigt
 sowie ein Single Sign On erreicht, da bei Folgezugriffen keine erneute
 Verbindung mit Authentifizierung durchgeführt werden muss.
 Als Implementierung wird ein Connection Pool nach 
\begin_inset CommandInset citation
LatexCommand cite
key "key-3"

\end_inset

 realisiert und ein JDBC Wrapper geschrieben, der Transparenz und Flexibilität
 sowie Threadsicherheit des Connection Pooling gewährleistet.
 Der Connection Service übernimmt dabei die Rolle des JDCConnectionPool
 wie in 
\begin_inset CommandInset citation
LatexCommand cite
key "key-3"

\end_inset

 beschrieben und besitzt folgende Funktionen:
\end_layout

\begin_layout Paragraph*
public synchronized Connection getConnection() 
\end_layout

\begin_layout Standard
Liefert die Verbindung zu der Datenquelle.
\end_layout

\begin_layout Paragraph*
public synchronized void returnConnection(JDCConnection conn) 
\end_layout

\begin_layout Standard
Übergibt eine Verbindung zurück in den Pool bzw.
 markiert die Verbindung als nicht mehr in Benutzung.
\end_layout

\begin_layout Paragraph*
public synchronized void closeConnections() 
\end_layout

\begin_layout Standard
Schließt alle Verbindungen zu der Datenquelle.
\end_layout

\begin_layout Paragraph*
public synchronized void reapConnections() 
\end_layout

\begin_layout Standard
Sorgt dafür, dass blockierte oder tote Verbindungen aus dem Pool gelöscht
 werden, da dies nicht von allen Datenquellen unterstützt wird.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Plug-In-System"

\end_inset

Plug-In System
\end_layout

\begin_layout Standard
Um eine Erweiterungsmöglichkeit des SIMPL Cores für die Unterstützung verschiede
ner Typen von Datenquellen und Datenformaten zu garantieren, wird ein Plug-In
 System realisiert.
 Dies wird durch die Bereitstellung von abstrakten Klassen erreicht, von
 der sich die Plug-Ins durch Vererbung ableiten lassen.
 Mit der Reflection API von Java ist es möglich, die Plug-Ins zur Laufzeit
 zu laden und zu verwenden, ohne dass bestehender Code angepasst werden
 muss.
 Die Plug-Ins werden als JAR-Dateien im Classpath von Apache ODE 
\emph on
ode/lib
\emph default
 abgelegt und müssen in der 
\emph on
simpl-core-config.xml 
\emph default
(siehe 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Die-simpl-core-config.xml-Datei"

\end_inset

) registriert werden.
 Für das Laden und Bereitstellen der Plug-Ins stehen Service-Provider zur
 Verfügung, die die Plug-Ins als Dienste bereitstellen.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:DataSourcePlugin"

\end_inset

DataSourcePlugin
\end_layout

\begin_layout Standard
Mit DataSourcePlugins können beliebige Datenquellen an den SIMPL Core angeschlos
sen werden.
\end_layout

\begin_layout Paragraph*
DataSourceService (Interface)
\end_layout

\begin_layout Standard
Das DatasourceService-Interface schreibt alle Funktionen vor, die von den
 Datasource Services (Plug-Ins) implementiert werden müssen und entsprechen
 den Funktionen in Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Datasource-Service"

\end_inset

.
\end_layout

\begin_layout Paragraph*
DataSourcePlugin (abstrakte Klasse)
\end_layout

\begin_layout Standard
Bei der DataSourcePlugin-Klasse handelt es sich um eine abstrakte Klasse,
 die an das DataSourceService-Interface gebunden ist und damit das Grundgerüst
 für einen Datasource Service bildet.
 Ein Plug-In muss diese Klasse erweitern und wird dadurch gezwungen, das
 DataSourceService-Interface zu implementieren.
\end_layout

\begin_layout Paragraph*
DataSourceServiceProvider
\end_layout

\begin_layout Standard
Über den DataSourceServiceProvider kann mit der Methode 
\emph on
+getInstance(String dsType, String dsSubtype)
\emph default
 die Instanz eines Datasource Service angefordert werden.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:DataFormatPlugin"

\end_inset

DataFormatPlugin
\end_layout

\begin_layout Standard
Mit DataFormatPlugins können beliebige Datenformate von DataSourcePlugins
 unterstützt werden.
\end_layout

\begin_layout Paragraph*
DataFormatService (Interface)
\end_layout

\begin_layout Standard
Das DatasourceService-Interface schreibt alle Funktionen vor, die von den
 Datasource Services (Plug-Ins) implementiert werden müssen und entsprechen
 den Funktionen in Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Dataformat-Service"

\end_inset

.
\end_layout

\begin_layout Paragraph*
DataFormatPlugin (abstrakte Klasse)
\end_layout

\begin_layout Standard
Bei der DataFormatPlugin-Klasse handelt es sich um eine abstrakte Klasse,
 die an das DataFormatService-Interface gebunden ist und damit das Grundgerüst
 für einen Dataformat Service bildet.
 Ein Plug-In muss diese Klasse erweitern und wird dadurch gezwungen, das
 DataFormatService-Interface zu implementieren.
\end_layout

\begin_layout Paragraph*
DataFormatServiceProvider
\end_layout

\begin_layout Standard
Über den DataFormatServiceProvider kann mit der Methode 
\emph on
+getInstance(String dfType, String dfSubtype) 
\emph default
 die Instanz eines Dataformat Service angefordert werden.
\end_layout

\begin_layout Subsubsection
DataFormatConverterPlugin
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO: Beschreibung
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Metadaten"

\end_inset

Metadaten
\end_layout

\begin_layout Standard
Für die Modellierung im Eclipse BPEL Designer werden Metadaten von Datenquellen
 benötigt um dem Modellierer verfügbare Ressourcen, wie z.B.
 Tabellen einer relationalen Datenbank, zur Auswahl zu stellen.
 Da die Metadaten je nach Datenquelle unterschiedliche Struktur haben können,
 werden diese mit dem SDO Konzept realisiert.
 Dabei kann jedem 
\emph on
DataSourcePlugin 
\emph default
ein XML-Schema beigelegt werden (DataSourceMetaData.xsd), das die Struktur
 der Metadaten beschreibt.
 Über die DataSourcePlugin-Methode
\emph on
 +setMetaDataType(String) 
\emph default
wird der entsprechende Element-Typ des Schemas angegeben, über das mit der
 Methode 
\emph on
+createMetaDataObject()
\emph default
 ein leeres Metadaten-SDO mit entsprechender Struktur erstellt werden kann.
 
\end_layout

\begin_layout Standard
Die eigentlichen Metadaten können damit vom Entwickler eines DataSourcePlugins
 in der zu implementierenden Funktion 
\emph on
getMetaData(String dsAddress)
\emph default
 (siehe Abschnitt 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Datasource-Service"

\end_inset

), von der Datenquelle ausgelesen und in ein entsprechendes leeres Metadaten-SDO
 mit vorgegebener Struktur geschrieben werden.
 Der SIMPL Core stellt bereits ein XML-Schema für Metadaten von Datenbanken
 (tDatabaseMetaData) und Filesystemen (tFilesystemMetaData) zur Verfügung,
 die von Datenquellen-Plug-Ins genutzt werden können.
 
\end_layout

\begin_layout Standard
Metadaten die durch den Datasource Web Service angefordert werden, werden
 serialisiert in XML geliefert und können nur mit Hilfe des entsprechenden
 XML-Schemas wieder als Objekt deserialisiert werden.
 Dazu stellt das 
\emph on
DataSourcePlugin 
\emph default
die Funktion 
\emph on
+getMetaDataSchema() 
\emph default
zur Verfügung, die das zu Grunde liegende XML-Schema liefert.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Web-Services"

\end_inset

Web Services
\end_layout

\begin_layout Standard
Die Web Services werden mit den JAX-WS annotierten Klassen wie folgt bereitgeste
llt.
 Zunächst wird mit Hilfe des Befehls wsgen.exe (..
\backslash
Java
\backslash
jdk1.6.0_14
\backslash
bin
\backslash
wsgen.exe) eine WSDL-Datei zu einer Klasse erzeugt.
 Die WSDL-Datei wird anschließend zusammen mit der kompilierten Klasse als
 JAR-Datei in Apache ODE hinterlegt (..
\backslash
Tomcat 6.0
\backslash
webapps
\backslash
ode
\backslash
WEB-INF
\backslash
servicejars) und wird damit beim Start von Apache Tomcat von Apache ODE
 als Web Service bereitgestellt.
\end_layout

\begin_layout Standard
Komplexe Objekte wie z.B.
 HashMaps, die intern von den SIMPL Core Diensten zur Ausführung benötigt
 werden, werden als String serialisiert an die Web Services übergeben und
 in dieser Form auch als Rückgabeparameter empfangen.
 Bei der Deserialisierung werden die Objekte wieder hergestellt und können
 als solche verwendet werden.
 Eine Ausnahme bilden die SDO Objekte, die bereits über eine XML Darstellung
 verfügen und in dieser direkt übermittelt werden können.
 Für diesen Vorgang stellt die Helper-Klasse Parameter (siehe Abschnitt
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Parameter"

\end_inset

) entsprechende Funktionen zur Verfügung.
\end_layout

\begin_layout Subsubsection
Datasource Web Service
\end_layout

\begin_layout Standard
Der Datasource Web Service 
\emph on
simpl.core.webservices.Datasource
\emph default
 bietet eine Schnittstelle nach Außen zu allen Ausprägungen des Datasource
 Service im SIMPL Core.
 Die Funktionen des Datasource Web Service entsprechen den Funktionen der
 Datasource Services (siehe Abschnitt 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Datasource-Service"

\end_inset

), die über die 
\emph on
SIMPLCore
\emph default
-Funktion 
\emph on
+dataSourceService(String dsType, String dsSubtype)
\emph default
 angefordert werden.
 Zusätzlich stehen die Funktionen des SIMPLCores zur Verfügung, die Informatione
n zu den, durch die Plug-Ins unterstützten, Datenquellen liefern (siehe
 Abschnitt 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Funktionen-SIMPLCore"

\end_inset

).
 Durch die Serialisierung und Deserialisierung besitzen alle Funktionen
 String Parameter und Rückgabewerte.
\end_layout

\begin_layout Subsubsection
Administration Web Service
\end_layout

\begin_layout Standard
Der Administration Web Service 
\emph on
simpl.core.webservices.Administration
\emph default
 ist die direkte Schnittstelle des Administration Service nach außen und
 besitzt daher die gleichen Funktionen wie dieser, mit dem Unterschied,
 dass komplexe Parameter und Rückgabewerte durch die Serialisierung und
 Deserialisierung als String-Parameter gehandhabt werden (siehe Abschnitt
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Web-Services"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Apache-ODE"

\end_inset

Apache ODE
\begin_inset Note Note
status open

\begin_layout Plain Layout
Verweise auf den Grobentwurf fehlen noch.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In diesem Kapitel wird auf die Erweiterungen, die an Apache ODE vorgenommen
 werden, eingegangen.
 Dies beinhaltet die BPEL-DM Extension Activities, das SIMPL Event System
 sowie das SIMPL DAO.
 Es wird auf die verschiedenen Funktionalitäten als auch auf deren Umsetzung
 eingegangen.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:BPEL-DM-Extension"

\end_inset

BPEL-DM Extension Activities
\end_layout

\begin_layout Standard
Die BPEL-DM Extension Activities (siehe Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:BPEL-DM-Extension"

\end_inset

) haben als Vaterklasse die Klasse SimplActivity, welche verschiedene Funktional
itäten für alle weiteren Extension Activities anbietet.
 Die Extension Activities nutzen zur Ausführung der verschiedenen Data-Managemen
t-Operationen den Datasource Service des SIMPL Cores.
 Die Implementierung der Extension Activities wird wie folgt umgesetzt.
\end_layout

\begin_layout Standard
Zunächst muss eine neue Aktivität von der Klasse „AbstractSyncExtensionOperation
“ abgeleitet werden und die dadurch vererbten Methoden müssen implementiert
 werden.
 Die Methode „runsync“ ist hierbei für die eigentliche Ausführung der neuen
 Aktivität verantwortlich.
 Dafür ist die Nutzung der beiden Parameter „context“ und „element“ notwendig.
 Mit 
\begin_inset Quotes eld
\end_inset

context
\begin_inset Quotes erd
\end_inset

 hat man die Möglichkeit, auf BPEL-Variablen und weitere Konstrukte, die
 im Prozess vorhanden sind, zuzugreifen.
 Der Inhalt des BPEL-Prozess-Dokuments wird als DOM-Baum geparst, um ein
 objektbasiertes Modell des BPEL Prozesses zu erzeugen.
 Mit „element“ ist es möglich, auf die verschiedenen Eigenschaften der einzelnen
 Knoten des Baumes zuzugreifen und mit ihnen zu arbeiten.
 
\end_layout

\begin_layout Standard
Weiterhin ist es notwendig, ein eigenes ExtensionBundle zu implementieren.
 Das ExtensionBundle ist notwendig, damit ODE weiß, aus welchen Extension
 Activities die Erweiterung besteht, und um sie zur Laufzeit ausführen zu
 können.
 Die Implementierung wird erreicht durch das Ableiten einer neuen Klassen
 von „AbstractExtensionBundle“.
 In dieser Klasse müssen nun in der Methode „registerExtensionActivity“
 alle Klassen, die für die Extension Activity von Bedeutung sind, mit Hilfe
 von „registerExtensionOperation“ bei ODE registriert werden.
\end_layout

\begin_layout Standard
Es gibt folgende acht Aktivitäten, welche in der Spezifikation genauer beschrieb
en werden:
\end_layout

\begin_layout Itemize
CallActivity
\end_layout

\begin_layout Itemize
DropActivity
\end_layout

\begin_layout Itemize
DeleteActivity
\end_layout

\begin_layout Itemize
CreateActivity
\end_layout

\begin_layout Itemize
UpdateActivity
\end_layout

\begin_layout Itemize
InsertActivty
\end_layout

\begin_layout Itemize
QueryActivity
\end_layout

\begin_layout Itemize
RetrievDataActivity
\end_layout

\begin_layout Standard
Wie bereits erwähnt ist SimplActivity die Vaterklasse für alle weiteren
 DM Extension Activities.
 In ihr werden außerdem verschiedene Variablen deklariert und verschiedene
 Methoden implementiert, die die anderen Aktivitäten verwenden.
 Dies wird getan um die Hauptfunktionalitäten in einer Klasse zusammenzufassen.
 Die Methode getStatement() dient dazu das während der Modellierung erzeugte
 Statement aus dem BPEL-Prozess auszulesen und in der entsprechenden Variable
 Statement abzulegen.
 Die Methode getdsAdress() ist dient analog dazu, die Adresse der Datenquelle
 aus dem BPEL-Prozess zu lesen und in der Variable dsAdress abzulegen.
 Die Variable service ist eine Instanz des DatasourceServices.
 Ihr werden die Variablen Statement und dsAdress übergeben um die enstprechenden
 Datenmanagement Aktionen auf der Datenquelle durchzuführen.
\end_layout

\begin_layout Standard
Wie in Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:BPEL-DM-Extension"

\end_inset

 zu sehen ist, verfügen die Aktivitäten RetrieveDataActivity und QueryActivity
 zusätzlich zu den Variablen aus SimplActivity noch über weitere, zusätzliche
 Variablen.
 Dies ist einmal die Variable DataObject in RetrieveDataActivity, die für
 die Verarbeitung der Daten die in den Prozess geladen werden sollen, benötigt
 wird.
 Weiterhin die Variable queryTarget in QueryActivity, in dieser wird die
 Zieltabelle, in der die Query-Daten abgelegt werden sollen angegeben.
 Da die Angabe einer Zieltabelle nur in der QueryActivity notwendig ist,
 war es nicht notwendig eine zusätzliche Methode in der Klasse SimplAcitvity
 zu implementieren, statt dessen wird dieses direkt in QueryActivity getan.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diagramme/iteration1/SIMPL-EA.jpg
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:BPEL-DM-Extension"

\end_inset

BPEL-DM Extension Activities
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:SIMPL-Event-System"

\end_inset

SIMPL Event System
\end_layout

\begin_layout Standard
Für die SIMPL Extension Activities wird eine Reihe von neuen Events eingeführt.
 Die Klassenhierarchie der Events ist in Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:SIMPL-Event-System"

\end_inset

 zu sehen.
 Die neuen Events unterteilen sich in DMEvents und ConnectionEvents, welche
 beide als Vaterklasse die Klasse SIMPLEvent haben.
 SIMPLEvent ist wiederum von Scope Event abgeleitet.
 Die SIMPL-Events werden von Scope-Event abgeleitet, da die Methode sendEvent,
 die in den ExtensionActivitys verwendet wird, nur für ScopeEvent deklariert
 ist.
 Um die SIMPL-Events als eine neue Event-Klasse zu erstellen, wäre es notwendig
 diese Methode neu zu implementieren.
 Die ist allerdings im Rahmen des Projektes nicht vorgesehen.
 Die neuen Events werden als Scope Events in die bestehende Event Hierarchie
 von ODE eingegliedert.
 Dies erlaubt es uns, diese direkt innerhalb der ExtensionAcitvities zu
 nutzen und aufzurufen.
\end_layout

\begin_layout Standard
Die SIMPL-Events sind unterteilt in DM-Events und Connection Events.
 Die DM-Events sind in DMFailure, DMStarted und DMEnd unterteilt.
 DMStarted und DMEnd sind dabei nur dazu da um eine Rückmeldung darüber
 zu geben, das die Ausführung eines DM-Events begonnen, bzw.
 beendet wurde.
 DMFailure wird erzeugt wenn die Ausführung eines DMEvents aus einem bestimmten
 Grund fehlschlägt.
 Um anzugeben was für ein Fehler aufgetreten ist, gibt es die Variable Failure_r
eason in der eine Meldung, was für ein Fehler aufgetreten ist gespeichert
 wird.
 Weiterhin gibt es noch eine getter und eine setter Methode für die Variable.
\end_layout

\begin_layout Standard
Die Connection Events sind unterteilt in ConnectionStarted ConnectionEnd
 und ConnectionLost.
 Für die Events ConnectionStarted und ConnectionEnd trifft dabei das selbe
 zu wie für DMEnd und DMStarted.
 Sie geben Rückmeldung darüber das eine Verbindung zu einer Datenquelle
 aufgebaut wurde oder beendet wurde.
 Das Event ConnectionLost gibt analog zu dem Event DMFailure Rückmeldung
 über einen Verbindungsabbruch und den Grund, der in der Variable ConLost_reason
 angegeben wird.
\end_layout

\begin_layout Standard
Die Methode getType die in allen Events vorhanden ist, ist eine Methode
 die in allen Events von ODE enthalten ist, die dazu da ist, den Type eines
 Events zurückzugeben.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diagramme/iteration1/SIMPL-Events.jpg
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:SIMPL-Event-System"

\end_inset

SIMPL Event System
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Ausführung-einer-BPEL-DM"

\end_inset

Ausführung der BPEL-DM Extension Activity
\end_layout

\begin_layout Standard
In Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Ausführung-einer-SIMPL"

\end_inset

 wird die Ausführung einer Query-Activity, mit den während der Ausführung
 auftretenden Events, aufgezeigt.
 Hierbei ist zu erwähnen, dass die Query-Activity folgendermaßen durchgeführt
 wird:
\end_layout

\begin_layout Enumerate
Es werden das Statement, die Addresse der Datenquelle sowie das queryTarget
 an die depositData-Methode übergeben, diese ist anschließend für die eigentlich
e Ausführung des Statements auf der Datenquelle verantwortlich.
\end_layout

\begin_layout Enumerate
Es wird die boolean Variable 
\begin_inset Quotes eld
\end_inset

success
\begin_inset Quotes erd
\end_inset

 zurückgegeben die angibt ob die Ausführung erfolgreich war oder nicht.
\end_layout

\begin_layout Enumerate
Sollte 
\begin_inset Quotes eld
\end_inset

success
\begin_inset Quotes erd
\end_inset

 true sein, wird die Ausführung der Extension Acitivty fortgesetzt und entsprech
end ein DMEnd Event erzeugt.
 Wenn success false ist, wird ein DMFailure Event erzeugt.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diagramme/iteration1/Ausführung Query Activity.jpg
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Ausführung-einer-SIMPL"

\end_inset

Ausführung einer Query Activity
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Ausführung der weiteren Aktivitäten
\end_layout

\begin_layout Standard
Die Aktivitäten Call, Create, Drop, Delete, Insert und Update unterscheiden
 sich in der Ausführung nur durch das jeweilige Statement, was für die BPEL-DM
 Extension-Activities keine Bedeutung hat.
 Daher kann die Ausführung dieser vier Aktivitäten zusammengefasst werden:
\end_layout

\begin_layout Enumerate
Es werden das Statement und die Addresse der Datenquelle an die executeStatement
-Methode übergeben, diese ist anschließend für die eigentliche Ausführung
 des Statements auf der Datenquelle verantwortlich.
\end_layout

\begin_layout Enumerate
Es wird die boolean Variable 
\begin_inset Quotes eld
\end_inset

success
\begin_inset Quotes erd
\end_inset

 zurückgegeben, die angibt, ob die Ausführung erfolgreich war oder nicht.
\end_layout

\begin_layout Enumerate
Sollte 
\begin_inset Quotes eld
\end_inset

success
\begin_inset Quotes erd
\end_inset

 true sein, wird die Ausführung der Extension Acitivty fortgesetzt und entsprech
end ein DMEnd Event erzeugt.
 Wenn success false ist, wird ein DMFailure Event erzeugt.
\end_layout

\begin_layout Standard
Die Events 
\begin_inset Quotes eld
\end_inset

DMStarted
\begin_inset Quotes erd
\end_inset

 und 
\begin_inset Quotes eld
\end_inset

DMEnd
\begin_inset Quotes erd
\end_inset

 werden zu Beginn bzw.
 am Ende der Ausführung erzeugt.
 Das Event 
\begin_inset Quotes eld
\end_inset

DMFailure
\begin_inset Quotes erd
\end_inset

 wird erzeugt, falls die Rückmeldungsvariable 
\begin_inset Quotes eld
\end_inset

success
\begin_inset Quotes erd
\end_inset

 auf false gesetzt wurde.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:SIMPL-DAO"

\end_inset

SIMPL DAO 
\end_layout

\begin_layout Standard
Das SIMPL Data Access Object (DAO) besteht aus der Implementierung der Interface
s aus dem Paket 
\emph on
org.apache.ode.bpel.dao
\emph default
, die in den folgenden Unterpunkten beschrieben werden.
 Das DAO wird dafür verwendet, wichtige Daten der Prozessausführung aufzuzeichne
n und persistent zu speichern (Siehe hierfür 
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"

\end_inset

 3.2.2).
 
\end_layout

\begin_layout Standard
Das SIMPL DAO übernimmt alle Eigenschaften der ODE internen Java Persistence
 API (JPA)-Implementierung und erweitert diese um die Eigenschaft, Daten
 per Service Data Object (SDO) an den SIMPL Core senden zu können, so dass
 die Auditing Daten über den SIMPL Core einfach in beliebigen Datenquellen
 gespeichert werden können.
 Das SIMPL DAO bietet den Vorteil, dass Daten gefiltert in der Datenquelle
 gespeichert werden können und somit nur relevante Daten über die Prozessausführ
ung in die Datenbank geschrieben werden.
 Darüber hinaus kann die Stuktur der zu speichernden Daten beliebig verändert
 werden, zum Beispiel um die Lesbarkeit der Daten zu erhöhen.
 Die Übertragung der Daten findet dabei direkt in den set-Methoden der DAOs
 statt.
 Die DAO Daten werden trotzdem auch weiterhin in der internen Apache Derby
 Datenbank gespeichert und von dort gelesen.
 Datentransfers an den SIMPL Core und damit verbundene beliebige Datenquellen,
 können nur schreibend, jedoch nicht lesend erfolgen.
 
\end_layout

\begin_layout Subsubsection
DAOs
\end_layout

\begin_layout Standard
In diesem Abschnitt werden die verschiedenen DAOs beschrieben, welche vom
 SIMPL Auditing unterstützt werden und die Daten, welche gespeichert werden.
\end_layout

\begin_layout Subsubsection*
ActivityRecoveryDAO
\end_layout

\begin_layout Standard
Das ActivityRecoveryDAO wird ausgeführt, wenn eine Aktivität den 
\begin_inset Quotes eld
\end_inset

recovery
\begin_inset Quotes erd
\end_inset

 Status einnimmt.
\end_layout

\begin_layout Subsubsection*
CorrelationSetDAO
\end_layout

\begin_layout Standard
Das CorrelationSetDAO wird ausgeführt, wenn in BPEL ein Correlation Set
 erstellt wird.
 Correlation Sets ermöglichen die Kommunikation einer Prozessinstanz mit
 seinen Partnern.
\end_layout

\begin_layout Subsubsection*
FaultDAO
\end_layout

\begin_layout Standard
Das FaultDAO wird erstellt, wenn ein Fehler in der Proessausführung passiert.
 Über dieses DAO kann auf die Informationen bezüglich des Fehlers, zum Beispiel
 der Name und der Grund für den Fehler, zugegriffen werden.
\end_layout

\begin_layout Subsubsection*
PartnerLinkDAO
\end_layout

\begin_layout Standard
Das PartnerLinkDAO repräsentiert einen PartnerLink.
 Es enthält Informationen über die eigene Rolle, die Rolle des Partners
 und die im PartnerLink hinterlegte Endpunkt-Referenz.
\end_layout

\begin_layout Subsubsection*
ProcessDAO
\end_layout

\begin_layout Standard
Das ProcessDAO repräsentiert ein Prozessmodell.
 Es enthält die Prozess-Id, den Prozess-Typ und die Prozessinstanzen dieses
 Modells.
\end_layout

\begin_layout Subsubsection*
ProcessInstanceDAO
\end_layout

\begin_layout Standard
Das ProcessInstanceDAO repräsentiert eine Prozess-Instanz und enthält alle
 Daten, die einer Instanz zugehörig sind.
 Dazu zählen Events, Scopes sowie wartende Pick- und Receive-Aktivitäten.
\end_layout

\begin_layout Subsubsection*
ScopeDAO
\end_layout

\begin_layout Standard
Das ScopeDAO repräsentiert eine Scope-Instanz.
 Es enthält eine Ansammlung von Correlation-Sets und XML-Variablen.
\end_layout

\begin_layout Subsubsection*
XmlDataDAO
\end_layout

\begin_layout Standard
Das XmlDataDAO repräsentiert XML-Daten und wird dazu benutzt Inhalte von
 BPEL-Variablen zu speichern.
\end_layout

\begin_layout Subsubsection
DAO Java Persistence API (JPA)
\end_layout

\begin_layout Standard
Das DAO-JPA ist eine DAO Implementierung, die auf Apache Open JPA basiert.
 Dieses stellt Funktionalitäten zur persistenten Speicherung auf relationalen
 Datenspeichern zur Verfügung.
 Über annotierte Variablen können somit die DAO Daten komfortabel in der
 ODE internen Derby Datenbank gespeichert werden.
\end_layout

\begin_layout Subsubsection
DAO Lebenszyklus
\end_layout

\begin_layout Standard
Beim Starten von Apache Tomcat wird auch ODE und somit der darin enthaltene
 BPEL-Server gestartet.
 Sofort wird die in der 
\emph on
OdeServer
\emph default
-Klasse enthaltene 
\emph on
init
\emph default
-Methode aufgerufen.
 Diese ruft wiederum die 
\emph on
initDao
\emph default
-Methode auf.
 Dort wird die 
\emph on
DaoConnectionFactory
\emph default
 geladen, welche zuvor in der 
\emph on
OdeConfigProperties
\emph default
 definiert oder aus der 
\emph on
Axis2.properties
\emph default
 geladen wurde.
 Über die 
\emph on
ConnectionFactory
\emph default
-Klasse werden 
\emph on
DaoConnections
\emph default
 erstellt und bereitgestellt, mit deren Hilfe direkt auf die DAOs zugegriffen
 werden kann.
 Der Zugriff erfolgt an den Stellen in ODE, wo die den DAOs entsprechenden
 BPEL Konstrukte ausgewertet werden.
 So wird auf die 
\emph on
ProcessDAO
\emph default
 zum Beispiel aus der 
\emph on
ODEProcess
\emph default
-Klasse zugegriffen, um die Prozessdaten persistent zu speichern.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Reference-Resolution-System"

\end_inset

Reference Resolution System
\end_layout

\begin_layout Standard
Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:RRS-Klassendiagramm"

\end_inset

 zeigt den Aufbau des Reference Resolution System (RRS) mit Paketstruktur,
 Klassen und Interfaces.
 Die Zusammenhänge zwischen diesen werden durch verschiedene Verbindungspfeile
 dargestellt und werden in den nachfolgenden Abschnitten genauer beschrieben.
 Da einige Dienste des RRS auch von anderen Bestandteilen des Frameworks
 genutzt werden, zum Beispiel von Apache ODE oder von Eclipse, bzw.
 dem RRS Eclipse Plug-In, werden diese als Webservices zur Verfügung gestellt.
 Sollten nachfolgend die Webservices direkt gemeint sein, dann werden diese
 auch als solche bezeichent, z.B.
 Reference Management Web Service.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../../../../../../Desktop/diagramme/iteration2/RRS_Class_Diagramm.jpg
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:RRS-Klassendiagramm"

\end_inset

RRS Klassendiagramm
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Paketstruktur
\end_layout

\begin_layout Standard
Das RRS besitzt folgende Paketstruktur, die sich in einen Kernbereich, die
 Dienste und das RRS DS-Adapter Plugin System unterteilen lässt.
\end_layout

\begin_layout Subsubsection*
org.simpl.rrs
\end_layout

\begin_layout Standard
Hier befinden sich die zentralen Klassen des RRS die auf die unterschiedlichen
 Dienste und die Datenquellen-Adapter zugreifen
\end_layout

\begin_layout Subsubsection*
org.simpl.rrs.retrieval
\end_layout

\begin_layout Standard
Hier befinden sich alle Klassen zur Realisierung des Reference Retrieval
 Service.
 Dieser Dienst wird zum Auflösen einer Referenz und zum Laden der referenzierten
 Daten benötigt.
\end_layout

\begin_layout Subsubsection*
org.simpl.rrs.management
\end_layout

\begin_layout Standard
Hier befinden sich alle Klassen zur Realisierung des Reference Management
 Service.
 Dieser Service wird zur Verwaltung der Referenzen benötigt und bietet das
 Hinzufügen neuer Referenzen (Insert), das Aktualisieren bestehender Referenzen
 (Update) und das Löschen von Referenzen (Delete) an.
\end_layout

\begin_layout Subsubsection*
org.simpl.rrs.metadata
\end_layout

\begin_layout Standard
Hier befinden sich alle Klassen zur Realisierung des Reference Metadata
 Service.
 Dieser Service wird für den RRS Eclipse View benötigt um alle im RRS enthaltene
n Referencen aufzulisten oder aber um die Werte einer einzelnen Reference
 abzurufen.
\end_layout

\begin_layout Subsubsection*
org.simpl.rrs.dqadapter
\end_layout

\begin_layout Standard
Hier befinden sich alle Klassen zur Realisierung des Datenquellen-Adapter
 Plug-In Systems.
\end_layout

\begin_layout Subsubsection*
org.simpl.rrs.dqadapter.plugins
\end_layout

\begin_layout Standard
Hier befinden sich die einzelnen Plug-Ins für die verschiedenen Datenquellen-Ada
pter.
 Diese Adapter können für unterschiedliche Datenquellentypen entwickelt
 werden.
 Im Rahmen des Projektes werden allerdings nur Plug-Ins für den Zugriff
 auf Relationale Datenbanken umgesetzt.
\end_layout

\begin_layout Subsubsection*
org.simpl.rrs.webservices
\end_layout

\begin_layout Standard
Hier befinden sich die Web Services des RRS, welchen den Zugriff von Außen
 auf das RRS ermöglichen.
 Dies ist zum Beispiel für die Kommunikation mit Apache ODE notwendig.
\end_layout

\begin_layout Subsection
Die RRS-Klasse
\end_layout

\begin_layout Standard
Die RRS-Klasse bildet den zentralen Zugriffspunkt auf alle Klassen und Dienste
 des RRS.
 Diese Klasse stellt die einzelnen Dienste zur Verfügung und ist zuständig
 für das RRS DS-Adapter Plug-In System.
 Beim Start des RRS werden die Dienste initialisiert, sowie eine Liste der
 Verfügbaren Datenquellen-Adapter geladen.
 Diese Klasse wird von Apache ODE beim Auflösen einer Referenz, vom RRS-Eclipse-
Plugin und sowie innerhalb des RRS, wenn sich Dienste gegenseitig verwenden.
\end_layout

\begin_layout Subsubsection*
Funktionen
\end_layout

\begin_layout Paragraph*
retrievalService() 
\end_layout

\begin_layout Standard
Liefert eine Instanz des Reference Retrieval Service.
 
\end_layout

\begin_layout Paragraph*
managementService()
\end_layout

\begin_layout Standard
Liefert eine Instanz des Reference Management Service.
 
\end_layout

\begin_layout Paragraph*
metadataService()
\end_layout

\begin_layout Standard
Liefert eine Instanz des Reference Metadata Service.
 
\end_layout

\begin_layout Paragraph*
conﬁg() 
\end_layout

\begin_layout Standard
Liefert die Konﬁguration des RRS als Instanz von RRSConﬁg.
 
\end_layout

\begin_layout Paragraph*
dsAdapter(String dsType, String dsSubtype) 
\end_layout

\begin_layout Standard
Liefert eine Instanz des DsAdapterProviders.
\end_layout

\begin_layout Paragraph*
getDSAdapterType()
\end_layout

\begin_layout Standard
Liefert eine Liste mit allen Datenquellentypen, die durch DS-Adapter-Plug-Ins
 unterstützt werden.
 
\end_layout

\begin_layout Paragraph
getDSAdapterSubtypes(String dsType) 
\end_layout

\begin_layout Standard
Liefert eine Liste mit allen Untertypen eines Typs, die durch DS-Adapter-Plug-In
s unterstützt werden.
 
\end_layout

\begin_layout Paragraph*
getDSAdapterLanguages(String dsSubtype) 
\end_layout

\begin_layout Standard
Liefert eine Liste mit allen Anfragesprachen eines Subtyps, der durch DS-Adapter
-Plug-Ins unterstützt wird.
 
\end_layout

\begin_layout Subsection
Die EPR
\end_layout

\begin_layout Standard
Die EPR selbst wird im RRS, sowie bei der Kommunikation durch die Webservices
 durch ein EPR-Objekt repräsentiert.
 Dieses EPR-Objekt enthält alle relevanten Informationen die für die jeweiligen
 Services des RRS, oder aber in Apache ODE und dem RRS-Eclipse-Plug-In,
 benötigt werden.
\end_layout

\begin_layout Subsection
RRSConfig Klasse
\end_layout

\begin_layout Standard
Die verschiedenen installierten Plug-Ins des DS-Adapter Plug-In Systems,
 werden über ein Konfigurationsdatei registriert.
 Das Einlesen und Abrufen der Informationen aus dieser Datei ist über diese
 Klasse möglich.
\end_layout

\begin_layout Subsubsection
Die RRS Konfigurationsdatei
\end_layout

\begin_layout Standard
Die RRS Konfigurationsdatei wird analog zu der des SimplCores unter 
\emph on
ode/conf/rrs-conﬁg.xml 
\emph default
abgelegt.
 Die Plug-In-Klassen müssen hier jeweils mit dem voll qualiﬁzierten Namen
 registriert werden und als jar-Dateien beliebigen Namens unter ode/lib
 abgelegt werden, damit sie erkannt werden.
 Die Konﬁgurationsdatei wird beim Start des RRS einmalig geladen, Änderungen
 an der Konﬁgurationsdatei sind deshalb erst nach einem Neustart verfügbar.
 Momentan dient die RRS Konfigurationsdatei nur der Registrierung der einzelnen
 DS-Adapter-Plug-Ins, allerdings könnten später auch weitere Einstellungen
 des RRS hier enthalten sein, bspw.
 der Name der RRS DB oder der Name der Tabelle in der die Referenzen abgelegt
 werden.
 Da die Struktur der RRS Konfigurationsdatei mit der des SimplCores identisch
 ist, wird darauf verzichtet diese hier nocheinmal aufzuzeigen.
\end_layout

\begin_layout Subsubsection
Funktionen
\end_layout

\begin_layout Paragraph*
getDSAdapterPlugins()
\end_layout

\begin_layout Standard
Liefert eine Liste mit voll qualiﬁzierten Namen der registrierten DS-Adapter-Plu
g-Ins.
\end_layout

\begin_layout Subsection
RRS Dienste
\end_layout

\begin_layout Standard
Wie in 
\begin_inset CommandInset citation
LatexCommand cite
key "key-2"

\end_inset

 bereits erläutert, besitzt das RRS drei Dienste bzw.
 Webservice Interfaces.
 Dies sind der Reference Retrieval Service, der Reference Management Service,
 sowie der Reference Metadata Service.
 Alle Services verfügen wie in 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:RRS-Klassendiagramm"

\end_inset

 angegeben über einen entsprechenden Webservice.
 Die Umsetzung der Webservices geschieht dabei analog zur Umsetzung der
 Webservices des SIMPL-Cores, weswegen dieses hier nicht noch einmal expliziet
 erläuertert wird.
\end_layout

\begin_layout Subsubsection
Reference Retrieval Service
\end_layout

\begin_layout Standard
Der Reference Retrieval Service ist für Auflösen von Referenzen und auf
 der anderen Seite für das Laden der referenzierten Daten nach Auflösen
 einer Referenz.
\end_layout

\begin_layout Standard
Der Reference Retrieval Service setzt dabei die 
\shape italic
get
\shape default
 Methode des RRS um.
 Diese Methode bekommt ein EPR-Objekt als Eingabe übergeben.
 Mit Hilfe der get-Methode werden nun alle zum Auflösen der Referenz und
 zum Laden der referenzierten Daten notwendigen Informationen aus dem EPR-Objekt
 ausgelesen.
 Die Daten selbst werden anschließend mit Hilfe eines entsprechenden DS-Adapters
 aus der Datenquelle ausgelesen.
 Der DS-Adapter wird dabei über das Attribut 
\begin_inset Quotes eld
\end_inset

Adapter-Typ
\begin_inset Quotes erd
\end_inset

 ausgewählt.
 Adapter-Typ ist folgendermaßen aufgebaut: 
\end_layout

\begin_layout Paragraph*

\shape smallcaps
\emph on
Datenquellen-Type:Datenquellen-Subtype:Datenquellen-Anfragesprache
\shape default
\emph default
 (z.B.
 RDB:MySQL:SQL).
 
\end_layout

\begin_layout Standard
Durch dieses Attribut kann der richtige Adapter für die jeweilige Datenquelle
 ausgewählt werden.
 Anschließend werden die Daten mit Hilfe des Retrieval Webservices an ODE
 übergeben.
\end_layout

\begin_layout Subsubsection
Reference Management Service
\end_layout

\begin_layout Standard
Der Reference Management Service ist für das Einfügen neuer Referenzen in
 das RRS, das Aktualisieren bestehender und das Löschen von Referenzen zuständig.
\end_layout

\begin_layout Standard
Beim Einfügen einer neuen Referenz in das RRS wird die Methode 
\shape italic
insert
\shape default
 ausgeführt.
 Die Eingabe ist auch hier ein entsprechendes EPR-Objekt, was alle Werte
 der neuen Referenz enthält und auch alle Informationen die notwendig sind
 um die Referenz wieder aufzulösen (beispielsweise alle Informationen über
 eine RDB und ein entsprechendes SQL Statement, mit dem die Daten ausgelesen
 werden können).
 Bei der Insert-Methode wird zunächst mit Hilfe der Methode 
\shape italic
DoesTableExist()
\shape default
 überprüft ob die Tabelle 
\begin_inset Quotes eld
\end_inset

ReferenceTable
\begin_inset Quotes erd
\end_inset

 vorhanden ist, wenn dies nicht der Fall ist wird diese zuerst erzeugt.
 Im nächsten Schritt wird mit Hilfe der Methode 
\emph on
EPRAllreadyExists
\emph default
 überprüft ob die Reference bereits in der Tabelle vorhanden ist.
 Da der Name einer Referenz sets eindeutig sein muss, beschränkt sich diese
 Überprüfung darauf, ob bereits eine Referenz mit diesem Namen vorhanden
 ist.
 Falls dies nicht der Fall ist wird die Referenz in die Tabelle eingefügt.
 Die Ausgabe der insert-Methode eine Rückmeldung, darüber ob das Einfügen
 erfolgreich war, oder aber im Fehlerfall eine entsprechende Fehlermeldung.
\end_layout

\begin_layout Standard
Das Aktualisieren einer Referenz wird durch die 
\shape italic
update
\shape default
 Methode umgesetzt.
 Dabei erhält die update Methode ein EPR-Objekt, welches die neuen Werte
 der Referenz, die aktualisiert werden sollen, enthält.
 Auch hier findet zunächst eine Überprüfung statt ob die Referenz im RRS
 enthalten ist.
 Sollte dies nicht der Fall sein, findet keine Aktualisierung statt.
 Die Ausgabe ist analog zur insert-Methode eine entsprechende Rückmeldung
 ob die Operation erfolgreich durchgeführt wurde oder nicht.
 Im Falle das die zu aktualisierende Referenz nicht gefunden wurde, wird
 ebenfalls eine negative Rückmeldung gegeben.
\end_layout

\begin_layout Standard
Zum Löschen einer Referenz aus dem RRS wird die Methode 
\shape italic
delete
\shape default
 benutzt.
 Diese Methode erhält als Eingabe ein EPR-Objekt und entfernt anschließend
 die entsprechende Referenz aus dem System.
 Hier wird analog wie bei den beiden anderen Operationen zunächst überprüft
 ob die zu löschende Referenz in der Tabelle vorhanden ist.
 Ist dies der Fall, wird sie gelöscht.
 Die Ausgabe der Methode ist eine entsprechende Rückmeldung ob das Löschen
 erfolgreich war, oder ob ein Fehler aufgetreten ist.
\end_layout

\begin_layout Subsubsection*
Die RRS DB
\end_layout

\begin_layout Standard
Die RRS DB wird als eine Embedded Derby realisiert.
 In ihr werden alle Referenzen die dem RRS bekannt sind gespeichert.
 Es ist dabei zu beachten, dass der Name der Datenbank, sowie der Name der
 Tabelle eindeutig durch die Implementierung festgelegt sind.
 Weiterhin ist zu beachten, dass eine Referenz durch ihren Namen erkannt
 wird.
 Daher muss der Name der Referenz eindeutig sein und es können nicht mehrere
 Referenzen mit dem selben Namen eingefügt werden.
\end_layout

\begin_layout Subsubsection
Reference Metadata Service
\end_layout

\begin_layout Standard
Der Reference Metadata Service ist für das Abrufen aller Referenzen die
 im RRS enthalten sind und für das Abrufen der Werte einer einzelnen Referenz
 zuständig, da diese Funktionen für die Umsetzung des RRS-Eclipse Plug-Ins
 notwendig ist.
\end_layout

\begin_layout Standard
Zum Abrufen aller Referenzen wird die Methode 
\shape italic
GetAllEPR
\shape default
 verwendet.
 Diese erzeugt zunächst zu jeder in der Datenbank des RRS enthaltenen Referenz
 ein EPR Objekt und fügt diese Objekte anschließend in ein EPR Array ein,
 welches anschließend übertragen wird.
 Es ist hierbei anzumerken, dass diese Methode die Tabelle 
\begin_inset Quotes eld
\end_inset

ReferenceTable
\begin_inset Quotes erd
\end_inset

 die alle Referenzen enthält erzeugt, falls sie nicht vorhanden ist.
 Dies ist notwendig damit es nicht zu Fehlern beim Initialisieren des RRS
 Eclipse Plug-Ins kommt, da dabei direkt diese Methode aufgerufen wird.
\end_layout

\begin_layout Standard
Zum Abrufen der Werte einer bestimmten Referenz wird die Methode 
\shape italic
getEPR
\shape default
 aufgerufen.
 Diese Methode bekommt den Namen der gesuchten Referenz übergeben und gibt
 anschließend ein EPR Objekt zurück welches alle Werte der Referenz erhält.
\end_layout

\begin_layout Standard
Weiterhin bietet der Reference Metadata Service noch die Möglichkeit eine
 Liste der derzeitig verfügbaren Adapter anzuzeigen.
\end_layout

\begin_layout Subsection
Das RRS DS-Adapter Plug-In System
\end_layout

\begin_layout Standard
Das RRS DS-Adapter Plug-In System bietet eine Reihe von Adaptern an, die
 für den Zugriff auf die jeweilligen Datenquellentypen zuständig sind.
 Wie bereits zuvor erwähnt werden im Rahmen des Projektes allerdings nur
 Adapter für den Zugriff auf relationale Datenbanken umgesetzt.
\end_layout

\begin_layout Standard
Der Aufbau des RRS DS-Adapter Plug-In Systems gleicht dem Aufbau des DatasourceS
ervice des SIMPL Cores.
 Es soll möglich sein wie auch beim Datasource Service verschiedene Plug-Ins
 zu nutzen um das Lesen und Schreiben auf verschiedenen Datenquellen zu
 realisieren.
 Wie in 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:RRS-Klassendiagramm"

\end_inset

 zu sehen, gibt es einen sogenannten DSAdapterProvider, dieser wird beim
 Start des RRS Initialisiert und erhält durch die RRSConfig alle verfügbaren
 DS-Adapter-Plug-Ins.
 Anhand der Informationen die in einem EPR-Objekt angegeben sind, wird eine
 Instanz des richtigen Adapters für den Zugriff auf die Datenquelle auswählt.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:RRS-Transformation-Service"

\end_inset

RRS Transformation Service
\end_layout

\begin_layout Standard
Obwohl der Transformation Service kein direkter Bestandteil des RRS ist,
 wird er dennoch in diesem Teil des Feinentwurfs besprochen, da seine Aufgabe
 direkt mit dem RRS zusammenhängt.
 Da eine Beschreibung des Transformationsvorgangs bereits in 
\begin_inset CommandInset citation
LatexCommand cite
key "key-2"

\end_inset

 enthalten ist, konzentrieren wir uns hier nur auf die Beschreibung der
 Implementierung und deren Zuordnung zur benötigten Funktionalität.
 Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:RRS-Transformation-Service"

\end_inset

 zeigt die Struktur des Transformation Service.
 Die einzelnen Klassen werden nachfolgend näher beschrieben.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diagramme/iteration2/RRSTransformationService.png
	width 50text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:RRS-Transformation-Service"

\end_inset

Klassendiagramm des RRS Transformation Service
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Die Klasse 
\emph on
Transformer
\emph default
 enthält die gesammte Funktionalität, die zur Transformation eines BPEL-Prozessm
odells benötigt wird.
 Als Eingabe erhält die Klasse ein, in ein String-Objekt serialisiertes,
 BPEL-Prozessmodell über den Transformation Web Service.
 Dieses wird gelesen und anschließend werden die in 
\begin_inset CommandInset citation
LatexCommand cite
key "key-2"

\end_inset

 (Kapitel 7.1.3) beschrieben Schritte durchgeführt.
 Am Ende der Transformation wird das transformierte BPEL-Prozessmodell,
 das nun nur noch standardkonforme BPEL-Konstrukte enthält, wieder serialisiert
 und über den Web Service an den Sender des ursprünglichen BPEL-Prozessmodells
 zurückgeschickt.
\end_layout

\begin_layout Standard
Das Paket 
\begin_inset ERT
status open

\begin_layout Plain Layout

org.""simpl.""rrs.""transformation.""webservices
\end_layout

\end_inset

 enthält die Klasse 
\emph on
TransformationService
\emph default
 (Web Service) und alle weiteren für die Realisierung des Web Services benötigte
n Klassen.
 Diese werden hier allerdings nicht angegeben, da sie keinerlei relevante
 Funktionalität beinhalten und über die erstellte WSDL des TransformationService
 automatisch generiert wurden.
 Die Klasse 
\emph on
TransformationService
\emph default
 wird nur stellvertretend für alle weiteren Klassen genannt, da sie den
 Übergang zwischen Web Service und Implementierung darstellt.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Uddi-Registry"

\end_inset

Uddi Registry
\end_layout

\begin_layout Standard
In diesen Abschnitt wird die verwendete UDDI Regestry jUDDI, beschrieben
 und wie Datenquellen in ihr abgespeichert und Abgerufen werden.
\end_layout

\begin_layout Subsection
Aufbau der Registry
\end_layout

\begin_layout Standard
Die Registry besteht hauptsächlich aus den nachfolgend beschriebenen Basiselemen
ten:
\end_layout

\begin_layout Subsubsection
Business Entity
\end_layout

\begin_layout Standard
Beschreibt ein Unternehmen und biete Kontaktinformationen, von einem Unternehmen
, dass den Webservice anbitet.
\end_layout

\begin_layout Subsubsection
Business Service
\end_layout

\begin_layout Standard
Hier werden die Angebotenen Webservices näher charakterisiert.
 Dies kann mehrer Web Servives oder auch nur mehrere Ausprägungen eines
 Webservices beinhalten.
\end_layout

\begin_layout Subsubsection
Binding Template
\end_layout

\begin_layout Standard
Das Binding Template gibt detailierte technische Informationen zur nutzung
 des Webservice an, wie zum Beispiel die Adresse (URL) über die auf einen
 Webservice zugegriffen werden kann.
\end_layout

\begin_layout Subsubsection
TModel
\end_layout

\begin_layout Standard
Beim TModel handelt es sich um eine generische Komponente, mit der man detailier
te Informationen über einen Service zusammenfassen kann.
 Mithilfe der TModels, lassen sich Webservices auch in Kategorien einordnen.
\end_layout

\begin_layout Subsection
Nutzung der Registry für Datenquellen
\end_layout

\begin_layout Standard
In den folgenden Abschnitten wird erklärt, wie die verschiedenen Basiskomponente
n von Uddi genutzt werden um eine Abspeicherung von Datenquellen zu ermöglichen.
\end_layout

\begin_layout Subsubsection
Business Entity
\end_layout

\begin_layout Standard
Beschreibt ein Unternehmen und biete Kontaktinformationen, des Anbieters
 der Datenquellen.
\end_layout

\begin_layout Subsubsection
Business Service
\end_layout

\begin_layout Standard
Hier kann die Datenquelle kurz textuell beschrieben werden.
\end_layout

\begin_layout Subsubsection
Binding Template
\end_layout

\begin_layout Standard
Die Binding Tempaltes entsprechen nun den Datenquellendefinitionen.
 Die Adresse des Webservices wird zur Adresse, über die auf die Datenquelle
 zugegriffen werden kann.
\end_layout

\begin_layout Subsubsection
TModel
\end_layout

\begin_layout Standard
Mit Hilfe des TModels werden die Datenquellentypen und Subtypen modeliert
 und können über 
\begin_inset Quotes eld
\end_inset

Keyed References
\begin_inset Quotes erd
\end_inset

 den Datenquellen zugewiesen werden
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Uddi-Registry-Web"

\end_inset

Uddi Registry Web Interface
\end_layout

\begin_layout Standard
Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Uddi-Webinterface"

\end_inset

 zeigt den Prototypen des Uddi Web Interface.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Note Note
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Uddi-Webinterface.png
	scale 60

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Uddi-Webinterface"

\end_inset

Uddi Webinterface
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Auf der linken Seite, werden die bereits vorhandenen Datenquellen angezeigt.
 Durch einen Druck auf new, können neue Datenquellen hinzugefügt werden.
 Wird eine bereits vorhandene Datenquellen ausgewählt, so werden im rechten
 Teil, alle wichtigen Informationen darüber angezeigt und können verändert
 werden.
 Durch einen druck auf delete, wird die Datenquelle komplett gelöscht.
 
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Eclipse"

\end_inset

Eclipse
\end_layout

\begin_layout Standard
Das SIMPL Rahmenwerk besteht aus der bereits vorhandenen Eclipse IDE und
 dem Eclipse BPEL Designer Plug-In sowie den drei zu erstellenden Plug-Ins
 BPEL-DM Plug-In, SIMPL Core Plug-In und SIMPL Core Client Plug-In.
 Dazu kommen noch Eclipse Plug-Ins für das Reference Resolution System (RRS)
 und eine UDDI-Registry.
 Im Rahmen des Feinentwurfes werden die Anbindung an die vorhandenen Komponenten
 sowie die zu erstellenden Komponenten näher erläutert.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:BPEL-DM-Plug-In"

\end_inset

BPEL DM Plug-In
\end_layout

\begin_layout Standard
Mit dem BPEL-DM Plug-In werden die bestehenden Aktivitäten des Eclipse BPEL
 Designer Plug-Ins um die DM-Aktivitäten ergänzt.
 Das Plug-In gliedert sich in die in Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:BPEL-DM-Plug-In"

\end_inset

 dargestellten Pakete.
 Das User-Interface Paket (
\begin_inset ERT
status open

\begin_layout Plain Layout

org.""eclipse.""bpel.""simpl.""ui
\end_layout

\end_inset

) sorgt für die grafische Darstellung der DM-Aktivitäten und deren Einbindung
 in den Eclipse BPEL Designer.
 Das zugrundeliegende Modell der DM-Aktivitäten befindet sich im Paket 
\begin_inset ERT
status open

\begin_layout Plain Layout

org.""eclipse.""bpel.""simpl.""model
\end_layout

\end_inset

.
 Für die grafische Modellierung von Abfragebefehlen für verschiedene Datenquelle
n können weitere Plug-Ins über einen Extension-Point an das BPEL-DM Plug-In
 angebunden werden.
 Im Rahmen des Projekts wird ein Beispiel Plug-In (
\begin_inset ERT
status open

\begin_layout Plain Layout

org.""eclipse.""bpel.""simpl.""ui.""sql
\end_layout

\end_inset

) für die grafische Modellierung von SQL-Abfragen umgesetzt.
 Die verschiedenen Pakete und deren Klassen werden in den folgenden Unterkapitel
n näher erläutert.
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diagramme/iteration1/BPEL-DM Plug-In Overview.png
	lyxscale 60
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:BPEL-DM-Plug-In"

\end_inset

BPEL DM Plug-In Paketstruktur
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
BPEL DM Plug-In User Interface
\end_layout

\begin_layout Standard
Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:BPEL-DM-Plug-In UI"

\end_inset

 zeigt den Aufbau der grafischen Benutzerschnittstelle (User Interface)
 des BPEL-DM Plug-Ins.
 Der Aufbau orientiert sich dabei an der Architektur des Eclipse BPEL Designer
 Plug-Ins und dessen Extension Points.
 Nachfolgend werden nun alle Pakete und die wichtigsten Klassen des BPEL-DM
 Plug-Ins beschrieben und deren Zweck näher erläutert.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diagramme/iteration2/BPEL-DM Plug-In UI.png
	lyxscale 80
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:BPEL-DM-Plug-In UI"

\end_inset

BPEL DM Plug-In User Interface
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
org.eclipse.bpel.simpl.ui
\end_layout

\begin_layout Standard
Dieses Paket enthält die Klassen 
\emph on
Application
\emph default
 und 
\emph on
DataManagementUIConstants
\emph default
.
 Die Klasse 
\emph on
Application
\emph default
 enthält verschiedene Methoden, die die Verwaltung der angebunden Plug-Ins
 des 
\emph on
queryLanguage
\emph default
 Extension-Points erleichtern.
 Die Klasse 
\emph on
DataManagementUIConstants
\emph default
 enthält alle Bildpfade der Icons der DM-Aktivitäten und stellt diese zur
 Verfügung.
\end_layout

\begin_layout Subsubsection*
org.eclipse.bpel.simpl.adapters
\end_layout

\begin_layout Standard
Dieses Paket enthält eine Adapter-Klasse für jede DM-Aktivität.
 Die Adapter-Klassen verknüpfen das Modell und die grafische Repräsentation
 (UI) einer DM-Aktivität und erben von der abstrakten Klasse
\emph on
 
\emph default

\begin_inset ERT
status open

\begin_layout Plain Layout

org.""eclipse.""bpel.""ui.""adapters.""ActivityAdapter
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsubsection*
org.eclipse.bpel.simpl.extensions
\end_layout

\begin_layout Standard
Das Interface 
\emph on
IStatementeEditor
\emph default
 vererbt an die abstrakte Klasse 
\emph on
AStatementEditor
\emph default
, und diese gibt die Rahmenbedingungen für die Einbindung von Statement-Editoren
 für neue Anfragesprachen vor.
 Eine StatementEditor-Implementierung enthält immer ein Composite, in dem
 die grafischen Elemente positioniert sind und die Logik zur grafischen
 Modellierung eines Befehls, über die zur Verfügung gestellten Elemente.
 Weiterhin müssen die Methoden 
\emph on
getComposite()
\emph default
, 
\emph on
setComposite()
\emph default
 und 
\emph on
createComposite()
\emph default
 zur Verwaltung und Erzeugung des Composites, aus der Vaterklasse heraus,
 bereitgestellt werden.
 Um den modellierten Abfragebefehl aus der StatementEditor-Implementierung
 auszulesen bzw.
 einen gespeicherten Befehl zu übergeben, werden noch die 
\emph on
getStatement()
\emph default
 und 
\emph on
setStatement()
\emph default
-Methoden benötigt.
 Die Anbindung von StatementEditor-Implementierungen erfolgt dabei über
 den Extension Point 
\noun on

\begin_inset ERT
status open

\begin_layout Plain Layout

org.""eclipse.""bpel.""simpl.""ui.""queryLanguage
\end_layout

\end_inset


\noun default
.
\end_layout

\begin_layout Subsubsection*
org.eclipse.bpel.simpl.factories
\end_layout

\begin_layout Standard
Die beiden Klassen in diesem Paket erzeugen Objekte für die grafische Platzierun
g von DM-Aktivitäten in der Modellierungsumgebung.
 Die Klasse 
\emph on
DataManagementUIObjectFactory
\emph default
 erzeugt Objekte für die grafische Repräsentation der jeweiligen Aktivität
 und die Klasse 
\emph on
DataManagementUIAdapterFactory
\emph default
 die zugehörigen Adapter, die für die Verknüpfung der oben genannten Objekte
 entsprechenden Modellinstanzen der Aktivitäten benötigt werden.
 Die Klasse 
\emph on
DataManagementUIObjectFactory
\emph default
 erweitert dafür die abstrakte Klasse 
\begin_inset ERT
status open

\begin_layout Plain Layout

org.""eclipse.""bpel.""ui.""factories.""AbstractUIObjectFactory
\end_layout

\end_inset

 und wird über den vorhandenen Extension-Point 
\noun on

\begin_inset ERT
status open

\begin_layout Plain Layout

org.""eclipse.""bpel.""ui.""uiObjectFactories
\end_layout

\end_inset


\noun default
 an den BPEL Designer angebunden.
 Die Klasse 
\emph on
DataManagementUIAdapterFactory
\emph default
 erweitert die Klasse 
\begin_inset ERT
status open

\begin_layout Plain Layout

org.""eclipse.""bpel.""simpl.""model.""util.""ModelAdapterFactory
\end_layout

\end_inset

 des BPEL-DM Modells.
\end_layout

\begin_layout Subsubsection*
org.eclipse.bpel.simpl.palette
\end_layout

\begin_layout Standard
Dieses Paket erweitert die grafische Palette der Aktivitäten des BPEL Designers.
 In der Palette werden alle verfügbaren Aktivitäten des BPEL Designers und
 durch die Erweiterung auch die BPEL-DM-Aktivitäten dargestellt.
 Mithilfe der Palette können die Aktivitäten ausgewählt und in den Editor
 zur Prozessmodellierung eingefügt werden.
 Die Klasse 
\emph on
DataManagementPaletteProvider
\emph default
 implementiert dafür die Schnittstelle 
\begin_inset ERT
status open

\begin_layout Plain Layout

org.""eclipse.""bpel.""common.""ui.""palette.""IPaletteProvider
\end_layout

\end_inset

 und wird über den vorhandenen BPEL Designer Extension-Point 
\begin_inset ERT
status open

\begin_layout Plain Layout

org.""eclipse.""bpel.""common.""ui.""paletteAdditions
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsubsection*
org.eclipse.bpel.simpl.properties
\end_layout

\begin_layout Standard
Das Paket beinhaltet die Anzeige der Eigenschaften der jeweiligen DM-Aktivitäten.
 Die Anbindung erfolgt über den vorhandenen BPEL Designer Extension-Point
 
\begin_inset ERT
status open

\begin_layout Plain Layout

org.""eclipse.""ui.""views.""properties.""tabbed.""propertySections
\end_layout

\end_inset

.
 Die Klasse 
\emph on
DMActivityPropertySection
\emph default
 erweitert die Klasse 
\begin_inset ERT
status open

\begin_layout Plain Layout

org.""eclipse.""bpel.""ui.""properties.""BPELPropertySection
\end_layout

\end_inset

.
 Erstgenannte wurde erstellt um die Gemeinsamkeiten der DM-Aktivitäten zu
 bündeln und um damit den Implementierungsaufwand in den nachgelagerten
 Klassen zu verringern.
 Die Eigenschaften können in der Modellierungsumgebung unter dem Punkt Propertie
s ausgewählt werden.
 Zu den Optionen gehört primär die Angabe des Datenquellentyps, wie Datenbank
 oder ein Filesystem.
 Je nach gewählter Art kann dann unter 
\begin_inset Quotes eld
\end_inset

Subtype
\begin_inset Quotes erd
\end_inset

 die Auswahl verfeinert werden.
 So kann z.B.
 beim Filesystem NTFS oder EXT3 gewählt werden.
 Bei einer Datenbank kann z.B.
 zwischen DB2 und MySQL gewählt werden.
 Weiterhin kann hier die Datenquellenadresse angegeben werden, also die
 Adresse, wohin der in der Aktivität definierte DM-Befehl zur Verarbeitung
 geschickt wird.
 Der in der Aktivität hinterlegte DM-Befehl wird im 
\begin_inset Quotes eld
\end_inset

Resulting Statement
\begin_inset Quotes erd
\end_inset

-Textfeld angezeigt und kann im Statement-Editor bearbeitet oder auch neu
 modelliert werden.
 Bei den einzelnen DM-Aktivitäten werden Optionen, die nicht möglich sind,
 nicht zur Auswahl freigegeben.
 Es ist beispielsweise nicht möglich, bei einer Insert-Aktivität z.B.
 ein Sensornetz auszuwählen.
\end_layout

\begin_layout Subsubsection
BPEL-DM Plug-In Modell
\end_layout

\begin_layout Standard
Das BPEL-DM Plug-In Modell stellt die Pakete und Klassen des (EMF-) Modells
 der BPEL-DM-Aktivitäten dar.
\end_layout

\begin_layout Standard
\align block
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diagramme/iteration1/BPEL-DM Plug-In Model.png
	lyxscale 80
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:BPEL-DM-Plug-In Modell"

\end_inset

BPEL-DM Plug-In Modell
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:BPEL-DM-Plug-In Modell"

\end_inset

 zeigt alle Pakete und Klassen, die das BPEL-DM Modell ergeben.
 An oberster Stelle steht die 
\emph on
DataManagementActivity
\emph default
-Klasse (Interface), die die Klasse 
\begin_inset ERT
status open

\begin_layout Plain Layout

org.""eclipse.""bpel.""model.""ExtensionActivity
\end_layout

\end_inset

 erweitert.
 Sie enthält die Variablen 
\emph on
dsType
\emph default
, 
\emph on
dsKind
\emph default
, 
\emph on
dsAddress
\emph default
 und 
\emph on
dsStatement,
\emph default
 die die gemeinsame Schnittmenge der Aktivitätenvariablen bilden.
 Diese werden an die Kindklassen wie z.B.
 
\emph on
QueryActivity
\emph default
 (Interface) vererbt und können somit bei Bedarf um schnittstellenspezifische
 Eigenschaften erweitert werden.
 Die konkrete Realisierung dieser Interfaces erfolgt dann im Paket 
\begin_inset ERT
status open

\begin_layout Plain Layout

org.""eclipse.""bpel.""simpl.""model.""impl
\end_layout

\end_inset

 z.B.
 in der Klasse 
\emph on
QueryActivityImpl
\emph default
.
 Die Klassen 
\emph on
ModelFactory
\emph default
 (Interface) und 
\emph on
ModelPackage
\emph default
 (Interface) erben von den Klassen 
\emph on
org.eclipse.emf.ecore.EFactory
\emph default
 und 
\emph on
org.eclipse.emf.ecore.EPackage
\emph default
 und werden benötigt, um Objekte des Modells zu erzeugen (Factory), wie
 z.B.
 ein QueryActivity-Objekt und um Objekte des Modells zu verwalten (Package),
 wie z.B.
 das Auslesen der Variablenwerte eines QueryActivity-Objekts.
\end_layout

\begin_layout Standard
\align block
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diagramme/iteration1/BPEL-DMPlugInModellUtil.png
	lyxscale 80
	width 60text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:BPEL-DM-Plug-In Modell-Util"

\end_inset

Utility-Paket des BPEL-DM Plug-In Modells
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Im Paket 
\emph on
org.eclipse.bpel.simpl.model.util
\emph default
 (siehe Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:BPEL-DM-Plug-In Modell-Util"

\end_inset

) befinden sich Zubehörklassen wie Serializer und Deserializer.
 Letztgenannte übernehmen das Lesen bzw.
 Schreiben der DM-Aktivitäten aus bzw.
 in BPEL-Files.
 Serializer werden dafür von der Klasse 
\begin_inset ERT
status open

\begin_layout Plain Layout

org.""eclipse.""bpel.""model.""extensions.""BPELActivitySerializer
\end_layout

\end_inset

 und Deserializer von der Klasse
\emph on
 
\emph default

\begin_inset ERT
status open

\begin_layout Plain Layout

org.""eclipse.""bpel.""model.""extensions.""BPELActivityDerserializer
\end_layout

\end_inset

 abgeleitet.
\end_layout

\begin_layout Subsubsection
BPEL-DM Plug-In Abfragesprachen-Erweiterung
\end_layout

\begin_layout Standard
Die Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:BPEL-DM-Plug-In Extension Modell"

\end_inset

 des Pakets 
\emph on
org.eclipse.bpel.simpl.ui.sql.editor
\emph default
 steht beispielhaft für eine Erweiterung des Statementeditors um die Abfragespra
che SQL.
 Die einzelnen Klassen dieses Pakets erben von der abstrakten Klasse 
\begin_inset ERT
status open

\begin_layout Plain Layout

org.""eclipse.""bpel.""simpl.""ui.""extensions.""AStatementEditor
\end_layout

\end_inset

 und realisieren die grafische Modellierung von elementaren SQL-Abfragen
 wie Select und Insert.
 Jede Erweiterung kann am Extension Point 
\emph on
org.eclipse.bpel.simpl.ui.queryLanguage
\emph default
 angeschlossen werden.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diagramme/iteration1/BPEL-DM Plug-In Extensions.png
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:BPEL-DM-Plug-In Extension Modell"

\end_inset

Klassendiagramm der BPEL-DM Plug-In SQL-Erweiterung
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
SIMPL Core Plug-In
\end_layout

\begin_layout Standard
Das SIMPL Core Plug-In kümmert sich um die Integration des SIMPL Menüs in
 die Eclipse Menüleiste und liefert die Admin-Konsole zur Verwaltung der
 Einstellungen des SIMPL Cores.
 In der Admin-Konsole können momentan Authentifizierungsinformationen (Benutzern
ame und Passwort) für Datenquellen hinterlegt, das Auditing aktiviert und
 deaktiviert und die Auditing Datenbank festgelegt werden.
 Nähere Informationen und einige Bilder des SIMPL Menüs und der Admin-Konsole
 liefert 
\begin_inset CommandInset citation
LatexCommand cite
key "key-2"

\end_inset

 (Kapitel 4.1).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diagramme/iteration2/SIMPL_Core_PlugIn.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:SIMPL-Core-Plug-In "

\end_inset

SIMPL Core Plug-In Klassendiagramm
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:SIMPL-Core-Plug-In "

\end_inset

 zeigt das Klassendiagramm des SIMPL Core Plug-Ins.
 Die zentrale Klasse dieses Plug-Ins ist die Klasse 
\emph on
AdminConsoleUI
\emph default
, die die Admin-Konsole erzeugt und deren Funktionalität liefert.
 Die Methode 
\emph on
createComposite()
\emph default
 erzeugt dafür die Composites der Admin-Konsolen Plug-Ins und mit 
\emph on
showComposite()
\emph default
 werden diese, entsprechend der Auswahl im Baum der Admin-Konsole, angezeigt.
 Die Methode 
\emph on
createSShell() 
\emph default
erzeugt die Admin-Konsole selbst und 
\emph on
fillTree()
\emph default
 füllt den Baum mit den entsprechenden Einträgen der Plug-Ins beim Öffnen
 der Admin-Konsole.
 Ebenso wichtig ist die Klasse 
\emph on
IAdminConsoleComposite
\emph default
, die die Schnittstelle der Admin-Konsolen Plug-In Composites definiert.
 Diese Klasse muss von jedem Plug-In implementiert werden.
 Die 
\emph on
getComposite()
\emph default
 und 
\emph on
setComposite()
\emph default
-Methoden werden dazu benötigt, die Plug-In Composites aus dem SIMPL Core
 Plug-In heraus zu verwalten.
 Die Methode 
\emph on
createComposite()
\emph default
 wird benötigt, um das entsprechende Composite des Plug-Ins aus der Klasse
 
\emph on
AdminConsoleUI
\emph default
 heraus zu erstellen.
 Die übrigen Methoden der Klasse werden dazu benötigt, die Einstellungen
 der Admin-Konsolen Plug-Ins über den SIMPL Core zu laden (
\emph on
loadSettings()
\emph default
), über den SIMPL Core zu speichern (
\emph on
saveSettings()
\emph default
), zu überprüfen ob sich die Einstellungen seit dem letzten Speichern geändert
 haben (
\emph on
haveSettingsChanged()
\emph default
) und um Einstellungen aus einem lokalen Buffer zu laden (
\emph on
loadSettingsFromBuffer()
\emph default
).
 Der lokale Buffer wird benötigt, um geänderte Einstellungen, die noch nicht
 gespeichert wurden, aber durch einen Wechsel des Einstellungspunktes der
 Admin-Konsole verloren gehen würden, zu sichern.
 Der Buffer wird dadurch realisiert, dass die Einstellungen in den entsprechende
n Composite-Klassen in Variablen hinterlegt werden und alle Composite-Klassen
 zentral in der Klasse 
\emph on
Application
\emph default
 verwaltet werden.
 
\end_layout

\begin_layout Standard
Die Klasse 
\emph on
Application
\emph default
 enthält nützliche Methoden zur Verwaltung der Admin-Konsolen Plug-Ins und
 dient gleichzeitig als lokaler Buffer für die Composite-Klassen der Plug-Ins.
 Sie ist als Singleton realisiert und kann über die 
\emph on
getInstance()
\emph default
-Methode verwendet werden.
 Die Methode 
\emph on
initApplication()
\emph default
 sorgt dafür, dass beim Laden des SIMPL Core Plug-Ins alle angebundenen
 Plug-In Composites erstellt werden und mit den im SIMPL Core hinterlegten
 Einstellungen gefüllt werden.
 Durch diesen Umstand muss nur einmal ein Ladevorgang auf dem SIMPL Core
 ausgeführt werden, da die Einstellungen dann im lokalen Buffer liegen und
 von dort gelesen werden können.
 Das Speichern der Einstellungen hingegen erfolgt direkt und erfordert,
 sofern sich Werte geändert haben, jedesmal eine Verbindung mit dem SIMPL
 Core.
 Die beiden Methoden 
\emph on
getTreeItems()
\emph default
 und 
\emph on
getTreeSubItems()
\emph default
 werden benötigt, um den Baum der Admin-Konsole aus den angebundenen Plug-Ins
 zu erstellen.
 Dazu wird auch die Klasse 
\emph on
Tuple
\emph default
 benötigt, die es ermöglicht jeden Eintrag in den Admin-Konsolen Baum mit
 einem Index zu versehen, so dass ein Plug-In Entwickler direkt darauf Einfluss
 nehmen kann, an welcher Stelle sein neuer Eintrag im Baum positioniert
 ist.
 Die Methode 
\emph on
sortTuple()
\emph default
 der Klasse 
\emph on
Application
\emph default
 sorgt dann dafür, dass die verschiedenen Plug-Ins bzw.
 deren Einträge für die Admin-Konsole nach den angegebenen Indizes sortiert
 wird.
 Sollte hier ein Index doppelt vergeben sein, so entscheidet sich die Reihenfolg
e durch die Initialisierungsfolge der einzelnen Plug-Ins durch Eclipse.
 Die Klasse 
\emph on
SimplHandler
\emph default
 sorgt dafür, dass falls der SIMPL Menüpunkt 
\begin_inset Quotes eld
\end_inset

Admin Console
\begin_inset Quotes erd
\end_inset

 ausgewählt wird, die Admin-Konsole geöffnet wird.
\end_layout

\begin_layout Standard
Die Admin-Konsole besteht nur aus Extension-Point-Erweiterungen, um eine
 größtmögliche Flexibilität hinsichtlich der späteren Nutzung zu erreichen.
 Das bedeutet, die Einträge, die bereits bei der Auslieferung von SIMPL
 in der Admin-Konsole vorhanden sind, wurden auch durch entsprechende Plug-Ins,
 die an diese Extension-Points angebunden sind, realisiert und können gegebenenf
alls leicht ausgetauscht werden.
 Weitere Einträge können über den Extension-Point 
\noun on

\begin_inset ERT
status open

\begin_layout Plain Layout

org.""eclipse.""simpl.""core.""adminConsoleItem
\end_layout

\end_inset


\noun default
 hinzugefügt werden.
 Bei der Auslieferung sind die Funktionen Auditing (
\emph on
org.eclipse.simpl.core.auditing
\emph default
) und Global Settings (
\emph on
org.eclipse.simpl.core.globalSettings
\emph default
) bereits durch Plug-Ins eingebunden.
\end_layout

\begin_layout Standard
Die Klasse 
\emph on
SIMPLHomePreferencePage
\emph default
 wird über den entsprechenden Extension-Point (
\emph on
\noun on
org.eclipse.ui.preferencePages
\emph default
\noun default
) für Preference Pages (Einstellungsseiten) in Eclipse angebunden.
 Die so erstellte Preference Page kann nun um weitere Sub-Preference Pages
 ergänzt werden.
 So kann aus jedem beliebigen anderen Plug-In eine Preference Page zur SIMPL
 Home Preference Page hinzugefügt werden.
 Die so erstellte Preference Page Hierarchie ist über die Eclipse Preferences
 zugänglich und macht es möglich, dass alle relevanten Einstellungen der
 SIMPL Eclipse Plug-Ins über die Eclipse Preferences angegeben werden können.
\end_layout

\begin_layout Subsection
SIMPL Core Client Plug-In
\begin_inset CommandInset label
LatexCommand label
name "sub:SIMPL-Core-Client"

\end_inset


\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Im Grobentwurf nachtragen, auch beschreiben warum Eclipse über die Web Services
 zugreiffen muss
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Das SIMPL Core Client Plug-In stellt die Verbindung zu den SIMPL Core Web
 Services her und bietet den anderen Eclipse Plug-Ins damit die Möglichkeit,
 diese zu verwenden.
 Da sowohl das BPEL-DM Plug-In als auch das SIMPL Core Plug-In mit dem SIMPL
 Core kommunizieren, wird der SIMPL Core Client als eigenständiges Plug-In
 realisiert um von mehreren Plug-Ins genutzt werden zu können.
 Die Funktionalität für den Zugriff auf die Web Services wird mit Hilfe
 des Befehls wsimport (..
\backslash
Java
\backslash
jdk1.6.0_14
\backslash
bin
\backslash
wimport.exe) über die WSDL-Schnittstellen generiert und wird um die Serialisierun
g und Deserialisierung der komplexen Parameter wie z.B.
 Hashmaps und Listen erweitert.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:RRS-Eclipse-Plug-In"

\end_inset

RRS Eclipse Plug-In
\end_layout

\begin_layout Standard
Das RRS Eclipse Plug-In besteht zum Einen aus einem Client der für die Kommunika
tion mit einem RRS benötigt wird und zum Anderen aus einem Eclipse View,
 in dem EPRs mehrerer RRS verwaltet werden können.
 In den folgenden zwei Abschnitten wird zuerst der Client und das EPR-Modell
 näher erläutert und anschließend die Umsetzung der Verwaltung der EPRs
 über eine Eclipse View beschrieben.
\end_layout

\begin_layout Subsubsection
RRS Client
\end_layout

\begin_layout Standard
Da das RRS nur über Web Services erreichbar ist, benötigt das RRS Eclipse
 Plug-In einen entsprechenden Client, der die Kommunikation realisiert.
 Der RRS Client besteht dabei aus den zur Kommunikation notwendigen Klassen
 und aus den Klassen des EPR-Modells.
 Diese Klassen werden analog der Beschreibung in Abschnitt 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:SIMPL-Core-Client"

\end_inset

 über wsimport generiert.
 Die Struktur des Clients zeigt Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:RRS-Plug-In-Client"

\end_inset

, dabei wurden alle automatisch generierten Klassen, außer den EPR Modellklassen
, weggelassen.
 Im Folgenden wird auf die einzelnen Klassen näher eingegangen.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diagramme/iteration2/RRSPlugInClient.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:RRS-Plug-In-Client"

\end_inset

Klassendiagramm des RRS Clients
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Die Klasse 
\emph on
ModelProvider
\emph default
 hält alle EPRs, die in der RRS View angezeigt werden.
 Sie ist der globale Zugriffpunkt für die vorhandenen EPRs und den in diesen
 enthaltenen Daten.
 Die Klassen 
\emph on
EPR
\emph default
, 
\emph on
ReferenceParameters
\emph default
, 
\emph on
ReferenceProperties 
\emph default
und 
\emph on
ServiceName 
\emph default
realisieren, das den EPRs zugrundeliegende Modell.
 Die innere Struktur der EPR-Klasse entspricht dabei genau dem EPR-Schema
 aus Kapitel 7.1.2 in 
\begin_inset CommandInset citation
LatexCommand cite
key "key-2"

\end_inset

.
 Die Klasse 
\emph on
RRSClient 
\emph default
dient als zentraler Zugriffspunkt auf die automatisch generierten Web Service
 Client Klassen und liefert eine gebündelte Schnittstelle zu allen benötigten
 Methoden des RRS.
\end_layout

\begin_layout Subsubsection
RRS Eclipse Plug-In User Interface
\end_layout

\begin_layout Standard
Diese Komponente des RRS Eclipse Plug-Ins sorgt dafür, dass in Eclipse ein
 neuer View bereitgestellt wird, mit dessen Hilfe EPRs aus verschiedenen
 RRS angezeigt und verwaltet werden können.
 Zur Verwaltung gehört das Anlegen von neuen EPRs sowie das Bearbeiten und
 Löschen vorhandener EPRs.
 Die grundlegende Struktur der Implementierung des User Interfaces zeigt
 Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:RRS-Plug-In-UI"

\end_inset

.
 Im Folgenden wird auf die einzelnen Pakete bzw.
 deren Klassen näher eingegangen.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diagramme/iteration2/RRSPlugInUI.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:RRS-Plug-In-UI"

\end_inset

Klassendiagramm des User Interfaces des RRS Eclipse Plug-Ins
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
org.eclipse.simpl.rrs.ui.dialogs
\end_layout

\begin_layout Standard
Dieses Paket enthält die beiden Klassen 
\emph on
AddReferenceDialog
\emph default
 und 
\emph on
EditReferenceDialog
\emph default
, die die Klasse 
\emph on
org.eclipse.jface.dialogs.TitleAreaDialog
\emph default
 erweitern.
 Die Klasse 
\emph on
AddReferenceDialog
\emph default
 wird dazu verwendet, einen Dialog für das Anlegen neuer EPRs bereitszustellen.
 Die Klasse 
\emph on
EditReferenceDialog
\emph default
 stellt dazu analog einen Dialog für das Editieren von EPRs bereit.
\end_layout

\begin_layout Subsubsection*
org.eclipse.simpl.rrs.ui.commands
\end_layout

\begin_layout Standard
Dieses Paket enthält drei Klassen, die die Schnittstelle 
\emph on
org.eclipse.core.commands.IHandler
\emph default
 implementieren.
 Diese werden dazu benötigt, um auf entsprechende Commands zu reagieren,
 die mit Toolbar- bzw.
 Menüeinträgen des RRS View verknüpft sind und bei der Auswahl eines solchen
 Eintrags angestoßen werden.
 Die Klasse 
\emph on
AddEPRHandler
\emph default
 sorgt dafür, dass bei der Auswahl des Add-Menüeintrags der AddEPR-Dialog
 geöffnet wird.
 Die Klasse 
\emph on
EditEPRHandler
\emph default
 sorgt entsprechend dafür, dass bei der Auswahl des Edit-Menüeintrags der
 EditEPR-Dialog geöffnet wird.
 Die Klasse 
\emph on
RemoveEPRHandler
\emph default
 sorgt dafür, dass alle in der View ausgewählten EPRs gelöscht werden.
 
\end_layout

\begin_layout Subsubsection*
org.eclipse.simpl.rrs.ui.view
\end_layout

\begin_layout Standard
Dieses Paket enthält alle Klassen, die für Einbindung der RRS View in Eclipse
 benötigt werden.
 Die Klasse 
\emph on
ReferenceManagementView
\emph default
 erweitert dafür die Klasse 
\emph on
org.eclipse.ui.part.ViewPart
\emph default
 und sorgt somit für die Darstellung des RRS Views und die Visualisierung
 aller EPRs eines RRS in einer Tabelle innerhalb des Views.
 Die Klasse 
\emph on
ReferenceContentProvider
\emph default
 implementiert die Schnittstelle 
\begin_inset ERT
status open

\begin_layout Plain Layout

org.""eclipse.""jface.""viewers.""IStructuredContentProvider
\end_layout

\end_inset

 und sorgt dafür, dass die EPRs, aus dem Modell, der View zugänglich gemacht
 werden.
 Die Klasse 
\emph on
ReferenceLabelProvider
\emph default
 erweitert die Klasse 
\emph on
org.eclipse.jface.viewers.LabelProvider
\emph default
 und sorgt dafür, dass die einzelnen Daten der EPRs in der View entsprechend
 angezeigt werden, d.h.
 in dieser Klasse wird definiert, wie die über den 
\emph on
ReferenceContentProvider
\emph default
 bereitgestellten EPR-Objekte ausgelesen werden sollen und welche Daten
 überhaupt in der View angezeigt werden sollen.
\end_layout

\begin_layout Subsubsection*
org.eclipse.simpl.rrs.ui.view.filter
\end_layout

\begin_layout Standard
Die Klasse 
\emph on
ReferenceFilter
\emph default
 erweitert die Klasse 
\emph on
org.eclipse.jface.viewers.ViewerFilter
\emph default
 und liefert die Möglichkeit die in der View angezeigten EPRs zu filtern,
 d.h.
 die EPRs nach entsprechenden Zeichenfolgen zu durchsuchen und nur solche
 anzuzeigen, die die Zeichenfolge enthalten.
\end_layout

\begin_layout Subsubsection*
org.eclipse.simpl.rrs.ui.view.sorter
\end_layout

\begin_layout Standard
Die Klasse 
\emph on
TableSorter
\emph default
 erweitert die Klasse 
\emph on
org.eclipse.jface.viewers.ViewerSorter
\emph default
 und liefert die Möglichkeit, die im View angezeigten EPRs zu sortieren,
 d.h.
 die EPRs können nach jeder beliebigen Spalte des RRS Views auf- oder absteigend
 sortiert werden.
\end_layout

\begin_layout Subsubsection*
org.eclipse.simpl.rrs.ui.preferences
\end_layout

\begin_layout Standard
Die Klasse 
\emph on
RRSPreferencePage
\emph default
 erweitert die Klasse 
\emph on
org.eclipse.jface.preference.FieldEditorPreferencePage
\emph default
 und liefert die Möglichkeit, die Addressen der drei Reference Resolution
 System Web Services (Retrieval, Management und MetaData) über eine Preference
 Page in den SIMPL Einstellungen anzugeben.
 Dadurch hat man die Möglichkeit einfach ein anderes RRS anzubinden und
 dessen Daten im Reference Management View anzuzeigen.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:RRS-Transformation-Eclipse-Plug-In"

\end_inset

RRS Transformation Eclipse Plug-In
\end_layout

\begin_layout Standard
Das RRS Transformation Eclipse Plug-In realisiert die Anbindung des RRS
 Transformation Service (siehe Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:RRS-Transformation-Service"

\end_inset

) in Eclipse.
 Nachfolgend werden nun alle Pakete und die wichtigsten Klassen des RRS
 Transformation Eclipse Plug-Ins beschrieben und deren Zweck näher erläutert.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diagramme/iteration2/RRSTransormationEclipsePlugIn.png
	width 70text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:RRS-Transformation-Plug-In"

\end_inset

Klassendiagramm des RRS Transformation Eclipse Plug-Ins
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
org.eclipse.simpl.rrs.transformation
\end_layout

\begin_layout Standard
Die Klasse 
\emph on
TransformerUtil
\emph default
 enthält Methoden, die während der Transformation benötigt werden.
 Dazu zählt z.B.
 eine Methode, die die Prozess-WSDL einließt, erweitert und in das transformiert
e Projekt kopiert (näheres dazu in 
\begin_inset CommandInset citation
LatexCommand cite
key "key-2"

\end_inset

 Kapitel 7.1.3).
 Weiterhin werden Methoden für das Herunterladen der RRS-WSDL-Dateien bereitgest
ellt, sowie einige Methoden, mit deren Hilfe festgestellt werden kann, ob
 eine Transformation überhaupt notwendig ist bzw.
 fehlerfrei durchgeführt werden kann (existieren Referenzvariablen?, sind
 alle Referenzvariablen voll spezifiziert?, etc.).
 
\end_layout

\begin_layout Subsubsection*
org.eclipse.simpl.rrs.transformation.preferences
\end_layout

\begin_layout Standard
Die Klasse 
\emph on
TransformationPreferencePage
\emph default
 erweitert die Klasse 
\emph on
org.eclipse.jface.preference.FieldEditorPreferencePage
\emph default
 und liefert die Möglichkeit, die Addresse des Transformation Web Service
 über eine Preference Page in den SIMPL Einstellungen anzugeben.
 Dadurch hat man die Möglichkeit einfach einen anderen Transformator an
 Eclipse anzubinden bzw.
 zwischen verschiedenen Transformatoren zu wechseln.
\end_layout

\begin_layout Subsubsection*
org.eclipse.simpl.rrs.transformation.commands
\end_layout

\begin_layout Standard
Dieses Paket enthält zwei Handler-Klassen, die die abstrakte Klasse 
\emph on
org.eclipse.core.commands.AbstractHandler
\emph default
 erweitern.
 Diese werden dazu benötigt, um auf entsprechende Commands zu reagieren,
 die mit einem Toolbar- bzw.
 Kontext-Menüeintrag in Eclipse verknüpft sind und bei der Auswahl eines
 solchen Eintrags angestoßen werden.
 Die Klasse 
\emph on
TransformationContextHandler
\emph default
 sorgt dafür, dass ein im Projekt-Explorer selektierter BPEL-Prozesses mithilfe
 eines Rechtsklicks über das so geöffnete Kontextmenü transformiert werden
 kann.
 Die Klasse 
\emph on
TransformationHandler
\emph default
 sorgt entsprechend dafür, dass ein im BPEL-Editor geöffneter BPEL-Prozess
 über einen Toolbar-Eintrag transformiert werden kann.
 Da beide Handler-Klassen nahezu identische Aufgaben ausführen müssen, bevor
 der entsprechende BPEL-Prozess tatsächlich an den Transformation Service
 geschickt werden kann, gibt es die Klasse 
\emph on
TransformationCmdHelper
\emph default
.
 Sie wird von den Handlern verwendet und sorgt dafür, dass alle in 
\begin_inset CommandInset citation
LatexCommand cite
key "key-2"

\end_inset

 (Kapitel 7.1.3) beschrieben Schritte (wsdl-Dateien herunterladen, Projekt
 anlegen/aktualisieren, usw.) vor und nach der Transformation ausgeführt
 werden.
\end_layout

\begin_layout Subsubsection*
org.eclipse.simpl.rrs.transformation.jet
\end_layout

\begin_layout Standard
Die Klasse 
\emph on
TemplateRrsXSD
\emph default
 ist ein Java Emitter Template (JET) und beinhaltet das EPR-Schema, das
 zur Ausführung des transformierten Prozesses in Apache ODE benötigt wird.
 Über den Aufruf der 
\emph on
generate()
\emph default
-Methode erzeugt diese Klasse das EPR-Schema und serialisiert dieses in
 eine Datei (rrs.xsd).
 Der Aufruf wird bei der Transformation aus der Klasse 
\emph on
TransformationCmdHelper
\emph default
 durchgeführt.
\end_layout

\begin_layout Subsubsection*
org.eclipse.simpl.rrs.transformation.client
\end_layout

\begin_layout Standard
Dieses Paket enthält alle RRS Transformation Service Client-Klassen.
 Diese werden analog zum SIMPL Core Client und RRS Client automatisch generiert.
 Auf die generierten Client-Klassen wird hier nicht weiter eingegangen.
 Die Klasse 
\emph on
TransformationClient
\emph default
 liefert einen zentralen Zugriffspunkt auf den RRS Transformation Service
 Client und stellt alle Methoden des Transformation Service bereit.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:UDDI-Eclipse-Plug-In"

\end_inset

UDDI Eclipse Plug-In
\end_layout

\begin_layout Standard
Das UDDI Eclipse Plug-In ist analog zum RRS Eclipse Plug-In aufgebaut, mit
 der Einschränkung, dass es nur für die Betrachtung von UDDI-Einträgen verwendet
 werden kann und eine Verwaltung dieser nicht über das Plug-In in Eclipse
 realisiert wird.
 Für die Verwaltung wird ein spezielles Web Interface bereitgestellt, dass
 in Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Uddi-Registry-Web"

\end_inset

 näher beschrieben wird.
\end_layout

\begin_layout Standard
Die in der UDDI-Registry hinterlegten Datenquellen werden für die Darstellung
 im UDDI Browser View, der durch dieses Plug-In bereitgestellt wird, über
 eine entsprechende EMF-Modell Implementierung repräsentiert.
 Die grundlegende Struktur der Implementierung des gesamten Plug-Ins zeigt
 Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:UDDI-Plug-In"

\end_inset

.
 Im Folgenden wird auf die einzelnen Pakete bzw.
 deren Klassen näher eingegangen.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diagramme/iteration2/UDDIEclipsePlugIn.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:UDDI-Plug-In"

\end_inset

UDDI Eclipse Plug-In Klassendiagramm
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
org.eclipse.simpl.uddi.model
\end_layout

\begin_layout Standard
Die Klasse 
\emph on
ModelProvider
\emph default
 hält alle Datenquellen (DataSource-Objekte), die in der UDDI View angezeigt
 werden.
 Sie ist der globale Zugriffpunkt für die vorhandenen Datenquellen.
\end_layout

\begin_layout Subsubsection*
org.eclipse.simpl.uddi.model.datasource
\end_layout

\begin_layout Standard
Dieses Paket enthält alle Klassen des Datenquellen-(EMF-)Modells.
 Das Modell beruht dabei auf der Modellierung einer Datenquelle anhand vordefini
erter Eigenschaften, wie z.B.
 dem Datenquellentyp (Dateisystem, RDB, usw.) oder Abfragesprache (SQL, XQuery,
 usw.).
 Die Klassen 
\emph on
DatasourceFactory
\emph default
 (Interface) und 
\emph on
DatasourcePackage
\emph default
 (Interface) erben von den Klassen 
\emph on
org.eclipse.emf.ecore.EFactory
\emph default
 und 
\emph on
org.eclipse.emf.ecore.EPackage
\emph default
 und werden benötigt, um Objekte des Modells zu erzeugen (Factory), wie
 z.B.
 ein 
\emph on
DataSource
\emph default
-Objekt und um Objekte des Modells zu verwalten (Package), wie z.B.
 das Auslesen des Typs eines 
\emph on
DataSource
\emph default
-Objekts.
\end_layout

\begin_layout Subsubsection*
org.eclipse.simpl.uddi.model.datasource.impl
\end_layout

\begin_layout Standard
Dieses Paket enhält die Implementierungen der verschiedenen Modell-Klassen
 des Pakets 
\begin_inset ERT
status open

\begin_layout Plain Layout

org.""eclipse.""simpl.""uddi.""model.""datasource
\end_layout

\end_inset


\emph on
.
\end_layout

\begin_layout Subsubsection*
org.eclipse.simpl.uddi.model.datasource.util
\end_layout

\begin_layout Standard
Dieses Paket enthält durch EMF automatisch generierte Standardklassen, die
 für die Verwendung des Modells benötigt werden.
\end_layout

\begin_layout Subsubsection*
org.eclipse.simpl.uddi.view
\end_layout

\begin_layout Standard
Dieses Paket enthält alle Klassen, die für Einbindung der UDDI View in Eclipse
 benötigt werden.
 Die Klasse 
\emph on
UDDIBrowserView
\emph default
 erweitert dafür die Klasse 
\emph on
org.eclipse.ui.part.ViewPart
\emph default
 und sorgt somit für die Darstellung des UDDI Views und die Visualisierung
 aller hinterlegter Datenquellen einer UDDI-Registry in einer Tabelle innerhalb
 des Views.
 Die Klasse 
\emph on
UDDIContentProvider
\emph default
 implementiert die Schnittstelle 
\begin_inset ERT
status open

\begin_layout Plain Layout

org.""eclipse.""jface.""viewers.""IStructuredContentProvider
\end_layout

\end_inset

 und sorgt dafür, dass die Datenquellen, aus dem Modell, der View zugänglich
 gemacht werden.
 Die Klasse 
\emph on
UDDILabelProvider
\emph default
 erweitert die Klasse 
\emph on
org.eclipse.jface.viewers.LabelProvider
\emph default
 und sorgt dafür, dass die einzelnen Informationen der Datenquellen in der
 View entsprechend angezeigt werden, d.h.
 in dieser Klasse wird definiert, wie die über den 
\emph on
UDDIContentProvider
\emph default
 bereitgestellten DataSource-Objekte ausgelesen werden sollen und welche
 Daten überhaupt in der View angezeigt werden sollen.
\end_layout

\begin_layout Subsubsection*
org.eclipse.simpl.uddi.view.filter
\end_layout

\begin_layout Standard
Die Klasse 
\emph on
DataSourceFilter
\emph default
 erweitert die Klasse 
\emph on
org.eclipse.jface.viewers.ViewerFilter
\emph default
 und liefert die Möglichkeit die in der View angezeigten Datenquellen zu
 filtern, d.h.
 die Informationen der Datenquellen nach entsprechenden Zeichenfolgen zu
 durchsuchen und nur solche Datenquellen anzuzeigen, deren Informationen
 die Zeichenfolge enthalten.
\end_layout

\begin_layout Subsubsection*
org.eclipse.simpl.uddi.view.sorter
\end_layout

\begin_layout Standard
Die Klasse 
\emph on
TableSorter
\emph default
 erweitert die Klasse 
\emph on
org.eclipse.jface.viewers.ViewerSorter
\emph default
 und liefert die Möglichkeit die im View angezeigten Datenquellen zu sortieren,
 d.h.
 die Datenquellen können nach jeder beliebigen Spalte des UDDI Views auf-
 oder absteigend sortiert werden.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Kommunikation"

\end_inset

Kommunikation
\end_layout

\begin_layout Standard
In diesem Kapitel werden die Kommunikation zwischen den Komponenten des
 SIMPL Rahmenwerks beschrieben und wichtige Abläufe deutlich gemacht.
\end_layout

\begin_layout Standard
In Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Kommunikation-im-SIMPL"

\end_inset

 wird die Kommunikation zwischen den Komponenten mit entsprechenden Funktionsauf
rufen (Bezeichner mit Klammern) und der Fluß der Daten (Bezeichner ohne
 Klammern) gezeigt, die Richtung des Aufruf bzw.
 des Datenflußes wird jeweils durch einen Pfeil beschrieben.
 Für die Referenzierung in den folgenden Abschnitten und sind zusammengehörige
 Abläufe durchnummeriert.
\end_layout

\begin_layout Standard
Über das SIMPL Core Client Plug-In wird die Kommunikation der anderen SIMPL
 Eclipse Plug-Ins zum SIMPL Core hergestellt (1, 2, 3).
 Über die Web Services des SIMPL Cores werden Metadaten zu Datenquellen
 angefordert (4) und Einstellungen gespeichert und geladen (5).
 Dazu werden von den Web Services die Dienste des SIMPL Cores verwendet
 und die Anfragen entsprechend weitergeleitet (6, 7).
 Über den Storage Service werden die Daten persistent gespeichert (8).
 Apache ODE kann die Dienste des SIMPL Cores direkt ansprechen, da sich
 der SIMPL Core im Classpath von Apache ODE befindet.
 Dort werden die DM-Aktivitäten (DM-Activities) über den DatasourceService
 ausgeführt (9), dessen Funktionen in Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Datasource-Service"

\end_inset

 beschrieben wurden.
 Für das SIMPL Auditing benötigen die SIMPL DAOs ebenfalls Zugriff auf den
 DatasourceService, um die Auditing Daten zu speichern (10).
 Die Auditing Daten entstehen unter anderem bei der Ausführung der DM-Aktivitäte
n (11) und lösen die Speicherung über die SIMPL DAOs aus.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diagramme/iteration2/SIMPLRahmenwerkKommunikation.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Kommunikation-im-SIMPL"

\end_inset

Kommunikation im SIMPL Rahmenwerk
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{section}{Literaturverzeichnis}
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "SIMPLGrobE"
key "key-1"

\end_inset


\shape italic
Grobentwurf v1.5
\shape default
.

\shape italic
 
\shape default
Stupro-A SIMPL (2009)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "SIMPLSpez"
key "key-2"

\end_inset


\emph on
Spezifikation v2.3
\emph default
.
 Stupro-A SIMPL (2009)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "ConnectionPooling"
key "key-3"

\end_inset


\emph on
Connection Pooling
\emph default
, 
\begin_inset ERT
status open

\begin_layout Plain Layout

http://""java.sun.com/""developer/""onlineTraining/""Programming/""JDCBook/""conpo
ol.html
\end_layout

\end_inset

.
 Zuletzt aufgerufen am 01.04.2010
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "ApachejUDDI"
key "key-4"

\end_inset

 
\emph on
Apache jUDDI
\emph default
, 
\begin_inset ERT
status open

\begin_layout Plain Layout

http://""ws.apache.org/""juddi/
\end_layout

\end_inset

.
 Zuletzt aufgerufen am 01.04.2010
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{section}{Abkürzungsverzeichnis}
\end_layout

\end_inset


\end_layout

\begin_layout Section*

\series bold
\size larger
Abkürzungsverzeichnis
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="15" columns="2">
<features>
<column alignment="left" valignment="top" width="2cm">
<column alignment="left" valignment="top" width="10cm">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
API
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Application Programming Interface
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
BPEL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Business Process Execution Language
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CSV
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Comma Separated Values
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DAO
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data Access Object
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DM
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data-Management
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GUI
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Graphical User Interface
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
JAX-WS
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Java API for XML - Web Services
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
JET
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Java Emitter Template
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ODE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Orchestration Director Engine
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SDO
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Service Data Object
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SIMPL 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SimTech: Information Management, Processes and Languages
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SQL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Structured Query Language
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
UDDI
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Universal Description, Discovery and Integration
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
UML
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unified Modeling Language
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
WS
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Web Service
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{section}{Abbildungsverzeichnis}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList figure

\end_inset


\end_layout

\end_body
\end_document
