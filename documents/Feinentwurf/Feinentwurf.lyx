#LyX 1.6.3 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\begin_preamble





\usepackage{babel}

%Packages für eigen definierte Header und Footer
\usepackage{lastpage}
\usepackage{fancyhdr}

% doctitel = Titel des Dokuments
% docvers = Versionsnr.
% docautor = Author(en)
% docdate = Datum der letzten Änderung
\def\doctitel{Feinentwurf}
\def\docvers{0.1}
\def\docautor{}
\def\docdate{11. Januar 2010}

% docstate = Status des Dokuments aus {neu, bearbeitet}
% qsstate = QS-Prüfungsstatus aus {positiv QS-geprüft, negativ QS-geprüft, verworfen}
% proofstate = Prüfungsstatus (durch Projektleiter) aus {positiv geprüft, negativ geprüft, verworfen}
% reviewstate = Annahmestatus des Reviews {kein Review durchgeführt, akzeptiert ohne Änderungen, akzeptiert mit Änderungen, nicht akzeptiert}
% endstate = Endstatus des Dokuments aus {freigegeben, verworfen}
\def\docstate{neu}
\def\qsstate{nicht QS-geprüft}
\def\proofstate{nicht geprüft}
\def\reviewstate{kein Review durchgeführt}
\def\endstate{-}

%Nicht einrücken
%\setlength{\parindent}{0pt}
\end_preamble
\use_default_options false
\language ngerman
\inputencoding latin9
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_amsmath 0
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 3cm
\topmargin 3cm
\rightmargin 3cm
\bottommargin 3cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "Deckblatt.lyx"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%Header und Footer Definitionen für alle anderen Seiten
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
pagestyle
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

fancy
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset FormulaMacro
\renewcommand{\headrulewidth}{0mm}
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
lhead
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
chead
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
rhead
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
lfoot
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\size small
SIMPL © 2009 $IMPL
\size default

\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
cfoot
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
rfoot
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\size small

\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
thepage
\end_layout

\end_inset


\begin_inset space \space{}
\end_inset

/ 
\begin_inset CommandInset ref
LatexCommand pageref
reference "LastPage"

\end_inset


\size default

\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%Ab hier beginnt das Dokument
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
Änderungsgeschichte
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="4">
<features>
<column alignment="left" valignment="top" width="2cm">
<column alignment="left" valignment="top" width="3cm">
<column alignment="left" valignment="top" width="3cm">
<column alignment="left" valignment="top" width="6cm">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Version
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Datum
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Autor
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Änderungen
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
13.11.2009
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
zoabifs
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Erstellung des Dokuments.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
04.01.2010
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
schneimi
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Überarbeitung der Struktur
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
09.01.2010
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
schneimi
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SIMPL Core Beschreibung
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
Einleitung
\end_layout

\begin_layout Standard
Dieses Kapitel erklärt den Zweck des Dokuments, den Zusammenhang zu anderen
 Dokumenten und gibt dem Leser einen Überblick über den Aufbau des Dokuments.
\end_layout

\begin_layout Subsection
Zweck dieses Dokuments
\end_layout

\begin_layout Standard
Der Feinentwurf beschreibt Details der Implementierung der Komponenten,
 die im Grobentwurf 
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"

\end_inset

 in Kapitel 3 vorgestellt wurden.
 Die Komponenten werden ausführlich beschrieben und ihre Funktionalität
 durch statische und dynamische UML-Diagramme visualisiert.
 Der Feinentwurf bezieht sich im Gegensatz zum Grobentwurf nur auf die aktuelle
 Iteration und wird mit den folgenden Iterationen vervollständigt.
 Grobentwurf und Feinentwurf bilden zusammen den Gesamtentwurf des SIMPL
 Rahmenwerks.
\end_layout

\begin_layout Subsection
Gliederung
\end_layout

\begin_layout Standard
Der Feinentwurf gliedert sich in die folgenden Kapitel.
\end_layout

\begin_layout Itemize
Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:SIMPLCore"

\end_inset

 
\begin_inset Quotes eld
\end_inset

SIMPL Core
\begin_inset Quotes erd
\end_inset

 beschreibt die Implementierung des SIMPL Cores und seinen Web Services.
 (siehe 
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"

\end_inset

 Kapitel 3.1)
\end_layout

\begin_layout Itemize
Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Apache-ODE"

\end_inset

 
\begin_inset Quotes eld
\end_inset

Apache ODE
\begin_inset Quotes erd
\end_inset

 beschreibt die Implementierung der DM-Aktivitäten und das externe Auditing.
 (siehe
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"

\end_inset

 Kapitel 3.2)
\end_layout

\begin_layout Itemize
Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Eclipse"

\end_inset

 
\begin_inset Quotes eld
\end_inset

Eclipse Plug-Ins
\begin_inset Quotes erd
\end_inset

 beschreibt die Implementierung der Plug-Ins, die für das SIMPL Rahmenwerk
 realisiert werden.
 (siehe
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"

\end_inset

 Kapitel 3.3)
\end_layout

\begin_layout Itemize
Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Kommunikation"

\end_inset

 
\begin_inset Quotes eld
\end_inset

Kommunikation
\begin_inset Quotes erd
\end_inset

 beschreibt die Kommunikation der Komponenten im SIMPL Rahmenwerk auf Funktionse
bene.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:SIMPLCore"

\end_inset

SIMPL Core
\end_layout

\begin_layout Standard
Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:SIMPL-Core-Klassendiagramm"

\end_inset

 zeigt den Aufbau des SIMPL Cores, der in den folgenden Abschnitten beschrieben
 wird.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diagramme/iteration1/SIMPLCore_Class_Diagram.png
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:SIMPL-Core-Klassendiagramm"

\end_inset

SIMPL Core Klassendiagramm
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Paketstruktur
\end_layout

\begin_layout Standard
Der SIMPL Core besitzt folgende Paketstruktur, die sich in einen Kernbereich,
 sowie Bereiche für die Dienste (Services) und Web Services aufteilt.
\end_layout

\begin_layout Subsubsection*
org.simpl.core
\end_layout

\begin_layout Standard
Hier befinden sich zentrale Klassen des SIMPL Cores, die auf die Dienste
 des SIMPL Core zurückgreiffen, wie z.B.
 die SIMPLCore-Klasse, die in Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:SIMPLCore"

\end_inset

 näher beschrieben wird.
\end_layout

\begin_layout Subsubsection*
org.simpl.administration
\end_layout

\begin_layout Standard
Hier befinden sich alle Klassen zur Realisierung des Administration Service
 (
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"

\end_inset

 3.3.1).
\end_layout

\begin_layout Subsubsection*
org.simpl.storage
\end_layout

\begin_layout Standard
Hier befinden sich alle Klassen zur Realisierung des Storage Service (
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"

\end_inset

 3.3.5).
\end_layout

\begin_layout Subsubsection*
org.simpl.datasource
\end_layout

\begin_layout Standard
Hier befinden sich alle Klassen zur Realisierung des Datasource Service
 (
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"

\end_inset

 3.3.5).
\end_layout

\begin_layout Subsubsection*
org.simpl.datasource.plugins
\end_layout

\begin_layout Standard
Hier befinden sich die Plug-Ins für den Datasource Service, die für die
 verschiedenen Datenquellentypen entwickelt werden.
 Falls sich die einzelnen Plug-Ins auf mehrere Klassen verteilen, werden
 diese zusätzlich auf eigene Unterpakete verteilt.
 Das Plug-In-System wird in Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Datasource-Plug-Ins"

\end_inset

 näher beschrieben.
\end_layout

\begin_layout Subsubsection*
org.simpl.webservices
\end_layout

\begin_layout Standard
Hier befinden sich die Web Services des SIMPL Core, die den Zugriff von
 Außen auf den SIMPL Core ermöglichen.
 Alle Klassen werden mit JAX-WS-Annotationen versehen und können als Webservices
 in Apache ODE deployt werden.
\end_layout

\begin_layout Subsection
SIMPL Core Services
\begin_inset Note Note
status open

\begin_layout Plain Layout
Beschreibung der Dienste
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In diesem Abschnitt werden die Dienste des SIMPL Cores beschrieben.
\end_layout

\begin_layout Subsubsection*
Administration Service
\end_layout

\begin_layout Standard
Der AdministrationService ist für die Verwaltung der Einstellungen der Admin-Kon
sole des SIMPL Core Eclipse Plug-Ins zuständig.
 Die Einstellungen der Admin-Konsole werden dabei direkt über das SIMPL
 Core Client Plug-In an den AdministrationService geschickt oder von diesem
 angefordert.
 Die auf diese Weise zentral im SIMPL Core hinterlegten Einstellungen können
 dann bei Bedarf direkt von Services, die diese Informationen benötigen,
 ausgelesen werden.
 Zur persistenten Speicherung der Einstellungen und weiterer Daten wird
 eine eingebettete Apache Derby (Embedded Derby) Datenbank verwendet, die
 vom gesamten SIMPL Core genutzt wird.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diagramme/iteration1/AdmininistrationServiceSequence.png
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Sequenzdiagramm-des-AdministrationServices"

\end_inset

Sequenzdiagramm des AdministrationServices
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Sequenzdiagramm-des-AdministrationServices"

\end_inset

 zeigt die Verwendung und die Funktionalität des AdministrationService.
 Über die getInstance()-Methode erhält man eine Instanz des AdministrationServic
es mit der man dessen Funktionen aufrufen kann.
 Mit der loadSettings()-Methode können Einstellungen aus der Datenbank geladen
 werden, dafür wird intern eine einfache Datenbankabfrage genutzt.
 Zur Identifizierung verschiedener Einstellungen, wie z.B.
 Standard-Einstellungen und zuletzt gespeicherten Einstellungen, besitzt
 jede Einstellung eine eindeutige Id.
 So kann später die Admin-Konsole um das Laden und Speichern von benutzerspezifi
schen Preset-Einstellungen ergänzt werden.
 
\end_layout

\begin_layout Standard
Die Struktur der Datenbank orientiert sich direkt am Aufbau der Admin-Konsole,
 da hier immer Ober- und Unterpunkte zusammengehören, wurde auf der Datenbank
 diese Beziehungen durch die Strukturierung mit Schemata und Tabellen umgesetzt.
 So gibt es für jeden Oberpunkt, wie z.B.
 
\emph on
Auditing
\emph default
 ein gleichnamiges Schema und für jeden Unterpunkt eines Oberpunktes, wie
 z.B.
 
\emph on
General
\emph default
 eine gleichnamige Tabelle im Schema des Oberpunkts.
 Daraus ergibt sich der genaue Pfad einer, in der Datenbank gespeicherten,
 Einstellung aus der Auswahl in der Admin-Konsole.
 Mit der saveSettings()-Methode können Einstellungen in einer entsprechenden
 Tabelle eines Schemas gespeichert werden.
 Dazu wird zuerst überprüft, ob das zu den Einstellungen gehörige Schema
 bereits existiert oder noch erzeugt werden muss und anschließend, ob die
 Tabelle bereits existiert oder noch erzeugt werden muss.
 Die Tabelle wird dabei direkt aus den übergebenen Einstellungen automatisch
 erzeugt, indem die Einstellungsnamen als Spaltennamen verwendet werden.
 Wenn nun Schema und Tabelle vorhanden sind wird überprüft, ob die zu speichernd
e Einstellung bereits vorhanden ist und nur noch aktualisiert werden muss
 oder ob die Einstellung neu angelegt, also eine neue Zeile eingefügt werden
 muss.
\end_layout

\begin_layout Subsubsection*
Storage Service
\end_layout

\begin_layout Standard
Der Storage Sevice ist für Daten eines beliebigen Services des SIMPL Cores
 zustaendig.
 Der Storage Service verwaltet in einer embedded Datenbank alle Daten, die
 von dem Service des SIMPL Core geleitet.
 Und das Service des SIMPL Core kann später die Daten wieder auslesen.
\end_layout

\begin_layout Standard
Das Storage Service verhaltet aenliche wie Administration Service, ein beliebige
r Service des SIMPL Core benutzt die Methoden save() und load() der Storage
 Service Objekt, um die Data zu speichern und wieder auszulesen, muessen
 zuerst durch Methode getInstance() eine Instance erhalten.
\end_layout

\begin_layout Standard
Das Storage Service speichert die Data durch die Parametern serviceNS, serviceNa
me, und data als Referenzen, wobei serviceNS als schemaname serviceName
 als tablename mit String Data sind.
 Data ist die Dateien, was man speichern moechte, durch eine List<LinkedHashMap<
String, String>> Objekt zu organisieren.
 Nachdem das Service verhaltet, wird die eine boolean Value zurueckgeben,
 um mitzuteilen, ob der Verhalten richtig durchgefuehrt wird.
\end_layout

\begin_layout Standard
Wenn das andere Service die Data durch die Storage Service auslesen moechte,
 braucht nur die serviceNS und die serviceName als String Data als die Parameter
n von der Methode load() eingeben.
 Nachdem das Service durchgefuehrt wird, die Data, die man gewuenscht werden,
 werden als eine List<LinkedHashMap<String, String>> Objekte zurueckgegeben.
 Wenn die Methoden saveSettings() und loadSettings() ueber den Storage Service
 die Data speichern und laden moechte, muss die zuerst durch die Private
 Methode getConnection() eine Connection mit der Datenbank herstellen, spaeter
 haengen die beiden Methode von Private Methode getStatement() ab, um die
 gewuenschte Datenbankopration zu erhalten.
 Nachdem die Methode fertig verhaltet, wird die Methode die Operationsatz
 von Datenbank als eine String Objekt zurueckgeben.
 Wobei die Schema und Table sowie settingName als String Data settings als
 List<LinkedHashMap<String, String>> durch Parametern eingegeben werden.
 Hier ist die erste Element von LinkedHashMap<> Objekt als Primarykey gestellt.
 Es gibt noch Methoden createSchemaIfItDoesntExistYet() und createTableIfItDoesn
tExistYet(), saveSettings() und loadSettings() benutzen die Beiden, um zu
 bestaetigen, ob es die Schema oder Table in der Datenbank vorhandenen ist,
 wenn nein, dann herstellen, wenn ja, dann benutzt die vorhandenen Schema
 und Table.
 Es gibt auch die Methode settingsAlreadyExist(), der ist zustaendig fuer
 Methode getStatement(), dafuer kann getStatement() wissen, soll Operation
 fuer „updaten“ oder „insert“ sein.
\end_layout

\begin_layout Subsubsection*
Datasource Service
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:SIMPLCore"

\end_inset

SIMPLCore
\end_layout

\begin_layout Standard
Die SIMPLCore-Klasse bildet den zentralen Zugriffspunkt auf alle Dienste
 des SIMPL Cores für den Zugriff auf Klassenebene.
 Damit die Instanzen der Dienste nur einmal existieren und nicht bei jedem
 Zugriff erneut erstellt werden, ist die Klasse als Singleton (
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"

\end_inset

 Kapitel 3.3) ausgelegt.
 Diese Klasse wird von den Apache ODE Extension Activities (siehe 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:SIMPL-DM-Extension"

\end_inset

) benutzt um DM-Aktivitäten auszuführen, aber auch innerhalb des SIMPL Cores,
 dort wo sich Dienste gegenseitig verwenden.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Datasource-Plug-Ins"

\end_inset

Datasource Plug-Ins
\end_layout

\begin_layout Standard
Die Unterstützung verschiedener Typen von Datenquellen wird durch Datasource
 Plug-Ins realisiert um eine Erweiterungsmöglichkeit zu garantieren.
 Dies wird durch die Bereitstellung einer abstrakten Klasse erreicht, von
 der sich die Plug-Ins ableiten lassen.
 Mit der Reflection API von Java ist es möglich, die Plug-Ins zur Laufzeit
 zu erkennen und zu verwenden, ohne dass bestehender Code angepasst werden
 muss.
\end_layout

\begin_layout Paragraph*
DatasourceService (interface)
\end_layout

\begin_layout Standard
Das DatasourceService-Interface schreibt alle Funktionen vor, die von den
 DatasourceServices (Plug-Ins) implementiert werden müssen.
\end_layout

\begin_layout Paragraph*
DatasourceServicePlugin (abstract class)
\end_layout

\begin_layout Standard
Bei der DatasourceServicePlugin-Klasse handelt es sich um eine abstrakte
 Klasse, die an das DatasourceService-Interface gebunden ist und damit das
 Grundgerüst für einen Datasource Service bildet.
 Ein Plug-In muss diese Klasse erweitern und wird dadurch gezwungen das
 DatasourceService-Interface zu implementieren.
\end_layout

\begin_layout Paragraph*
DatasourceServiceProvider
\end_layout

\begin_layout Standard
Über den DatasourceServiceProvider kann die Instanz eines DatasourceService
 angefordert werden.
 Dies geschieht über eine eindeutige Typkennzeichnung (z.B.
 RDB, XML, ...), mit der die entsprechende Instanz der Klasse über die Class.forName
-Methode der Java Reflection API erzeugt und ausgeliefert wird.
\end_layout

\begin_layout Subsection
Web Services
\end_layout

\begin_layout Standard
Die Web Services werden mit den JAX-WS annotierten Klassen wie folgt bereitgeste
llt.
 Zunächst wird mit Hilfe des Befehls wsgen.exe (..
\backslash
Java
\backslash
jdk1.6.0_14
\backslash
bin
\backslash
wsgen.exe), eine WSDL-Datei zu einer Klasse erzeugt.
 Die WSDL-Datei wird anschließend zusammen mit der kompilierten Klasse als
 JAR-Datei in Apache ODE hinterlegt (..
\backslash
Tomcat 6.0
\backslash
webapps
\backslash
ode
\backslash
WEB-INF
\backslash
servicejars) und wird damit beim Start von Apache Tomcat von Apache ODE
 als Web Service bereitgestellt.
\end_layout

\begin_layout Paragraph
Datasource Web Service
\begin_inset Note Note
status open

\begin_layout Plain Layout
Beschreibung der Funktionen
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Der Datasource Web Service...
\begin_inset Note Note
status open

\begin_layout Plain Layout
Datenquellentyp als Parameter fehlt noch, oder? Später mit JNDI, Registry
 usw.
 wird er evtl.
 nicht mehr benötigt.
 Typ und Subtyp werden zusammengelegt
\end_layout

\end_inset


\end_layout

\begin_layout Subparagraph
public DataObject queryData(String dsAddress, String statement, String dsType)
\end_layout

\begin_layout Subparagraph
public boolean defineData(String dsAddress, String statement)
\end_layout

\begin_layout Subparagraph
public boolean manipulateData(String dsAddress, String statement, DataObject
 data)
\end_layout

\begin_layout Subparagraph
public List<String> getDatasourceTypes()
\end_layout

\begin_layout Subparagraph
public List<String> getDatasourceSubTypes(String datasourceType)
\end_layout

\begin_layout Subparagraph
public List<String> getDatasourceLanguages(String datasourceSubType)
\end_layout

\begin_layout Subparagraph
public List<String> getDatasourceMetaData(String dsAddress, String dsType)
\end_layout

\begin_layout Paragraph
Administration Web Service
\end_layout

\begin_layout Standard
Der Administration Web Service...
\end_layout

\begin_layout Subparagraph
public boolean saveSettings(String schema, String table, String settingName,
 LinkedHashMap<String, String> settings)
\end_layout

\begin_layout Subparagraph
public LinkedHashMap<String, String> loadSettings(String schema, String
 table, String settingName)
\end_layout

\begin_layout Paragraph
Storage Web Service
\end_layout

\begin_layout Standard
Der Storage Web Service...
\end_layout

\begin_layout Subparagraph
public boolean save(String serviceNS, String serviceName, List<LinkedHashMap<Str
ing, String>> data)
\end_layout

\begin_layout Subparagraph
public List<LinkedHashMap<String, String>> load(String serviceNS, String
 serviceName)
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Apache-ODE"

\end_inset

Apache ODE
\begin_inset Note Note
status open

\begin_layout Plain Layout
Verweise auf den Grobentwurf fehlen noch.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:SIMPL-DM-Extension"

\end_inset

SIMPL DM Extension Activities
\end_layout

\begin_layout Standard
Die SIMPL DM Extension Activities (siehe Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:SIMPL-DM-Extension"

\end_inset

) haben als Hauptklasse die Klasse SIMPLActivity, welche verschiedene Funktional
itäten für alle weiteren Events anbietet.
 Die Extension Activities nutzen zur Auführung der verschiedenen Datamanagement-
Operationen den Datasource-Service des SIMPLCore.Die Implementierung der
 Extension Activities wird folgendermaßen umgesetzt: 
\end_layout

\begin_layout Standard
Zunächst muss eine neue Aktivität von der Klasse „AbstractSyncExtensionOperation
“ abgeleitet werden und die dadurch vererbten Methoden müssen implementiert
 werden.
 Die Methode „runsync“ ist hierbei für die eigentliche Ausführung der neuen
 Aktivität verantwortlich.
 Dafür ist die Nutzung der beiden Parameter „context“ und „element“ notwendig.
 Mit 
\begin_inset Quotes eld
\end_inset

context
\begin_inset Quotes erd
\end_inset

 hat man die Möglichkeit auf BPEL-Variablen und weitere Konstrukte die im
 Prozess vorhanden sind zuzugreifen.
 Der Inhalt des BPEL-Prozess-Dokkuments wird in Nodes geparst um ein objektbasie
rtes Modell des BPEL Prozesses zu erzeugen.
 Mit „element“ ist es möglich auf die verschiedenen Eigenschaften dieser
 Nodes zuzugreifen und mit ihnen zu arbeiten.
 
\end_layout

\begin_layout Standard
Weiterhin ist es notwendig ein eigenes ExtensionBundle zu implementieren.
 Dies wird erreicht durch das ableiten einer neuen Klassen von „AbstractExtensio
nBundle“.
 In dieser Klasse müssen nun in der Methode „registerExtensionActivity“
 alle Klassen die für die Extension Activity von Bedeutung sind mit Hilfe
 von „registerExtensionOperation“ bei ODE registriert werden.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diagramme/iteration1/SIMPL-EA.jpg
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:SIMPL-DM-Extension"

\end_inset

SIMPL DM Extension Activities
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
SIMPL Event System
\end_layout

\begin_layout Standard
Für die SIMPL Extension Activities wird eine Reihe von neuen Events eingeführt.
 Die Eventhierarchie ist in Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:SIMPL-Event-System"

\end_inset

 zu sehen.
 Die neuen Events unterteilen sich in DMEvents und ConnectionEvents, welche
 beide als Hauptklasse die Klasse SIMPLEvent haben.
 SIPMPLEvent ist wiederum von Scope Event abgeleitet.
 Die neuen Events werden dadurch als Scope Events in die bestehende Event
 Hierarchie von ODE eingegliedert.
 Dies erlaubt es uns diese direkt innerhalb der Extension Acitvities zu
 nutzen und aufzurufen.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diagramme/iteration1/SIMPL-Events.jpg
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:SIMPL-Event-System"

\end_inset

SIMPL Event System
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Ausführung einer SIMPL DM Extension Activity
\end_layout

\begin_layout Standard
In Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Ausführung-einer-SIMPL"

\end_inset

 wird die Ausführung einer Query-Activity, mit den während der Ausführung
 auftretenden Events, aufgezeigt.
 Hierbei ist zu erwähnen, dass die Query-Activity folgendermaßen durchgeführt
 wird:
\end_layout

\begin_layout Enumerate
Mit Hilfe der queryData-Methode werden die Daten aus der aktuellen Datenquelle
 gelesen und als DataObject zurückgegeben
\end_layout

\begin_layout Enumerate
Mit Hilfe der defineData-Methode wird eine neue Tabelle in der aktuellen
 Datenbank erzeugt
\end_layout

\begin_layout Enumerate
Mit Hilfe der manipulateData-Methode wird das unter 1.
 erzeugte DataObject in der in 2.
 erzeugten Tabelle abgespeichert
\end_layout

\begin_layout Standard
Die Events 
\begin_inset Quotes eld
\end_inset

DMStarted
\begin_inset Quotes erd
\end_inset

 und 
\begin_inset Quotes eld
\end_inset

DMEnd
\begin_inset Quotes erd
\end_inset

 werden zu Beginn bzw.
 am Ende der Ausführung erzeugt.
 Das Event 
\begin_inset Quotes eld
\end_inset

DMFailure
\begin_inset Quotes erd
\end_inset

 wird erzeugt falls die Rückmeldungsvariable 
\begin_inset Quotes eld
\end_inset

success
\begin_inset Quotes erd
\end_inset

 auf false gesetzt wurde.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diagramme/iteration1/SIMPL-EA-Events-Sequenz-Diagramm.jpg
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Ausführung-einer-SIMPL"

\end_inset

Ausführung einer SIMPL DM Extension Activity
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
SIMPL DAO
\begin_inset Note Note
status open

\begin_layout Plain Layout
Rechtschreibung! Sinn und Zweck des DAO als Einleitung fehlt noch.
 (am besten mit Verweis auf Grobentwurf)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Das Simpl Dao besteht aus der Implementierung der Interfaces aus dem Packet
 org.apache.ode.bpel.dao die in den folgenden unterpunkten beschrieben werden.
 Das Simpl-Dao übernimmt alle Eigenschaften der Ode internen Jpa-Implementierung
 und erweitert diese um die Eigenschaft, Daten per SDO an den SIMPL-Core
 senden zu können.
 Das heißt, die Dao Daten werden auch weiterhin in der internen Apache Derby
 Datenbank gespeichert und von dort gelesen.
 Datentransfers an den Simpl-Core und damit verbundene beliebige Datenquellen,
 können nur schreibend, jedoch nicht lesend erfolgen.
\end_layout

\begin_layout Subsubsection*
ActivityRecoveryDao
\end_layout

\begin_layout Standard
Wird ausgeführt, wenn eine Aktivität den 
\begin_inset Quotes eld
\end_inset

recovery
\begin_inset Quotes erd
\end_inset

 Status einnimmt.
\end_layout

\begin_layout Subsubsection*
BpelDAOConnectionFactory
\end_layout

\begin_layout Standard
Die Factory verwaltet und erstellt die DaoConnection zu den angegebenen
 Datenquellen (standartmäßig der internen Derby Datenbank)
\end_layout

\begin_layout Subsubsection*
BpelDAOConnection
\end_layout

\begin_layout Standard
Stellt die Implementierung der Connection dar.
 Hier werden unter anderem BPEL Events in das Dao eingefügt und der Nachrichten
 austausch erstellt und verwaltet.
\end_layout

\begin_layout Subsubsection*
CorrelationSetDAO
\end_layout

\begin_layout Standard
Dieses DAO representiert ein BPEL correlation set.
\end_layout

\begin_layout Subsubsection*
FaultDAO
\end_layout

\begin_layout Standard
Wird benutzt um auf Informationen über einen Fehler zuzugreifen, der wärend
 einer Prozessausführung aufgetreten ist.
\end_layout

\begin_layout Subsubsection*
MessageDAO
\end_layout

\begin_layout Standard
Representiert eine Nachricht in der Datenbank.
\end_layout

\begin_layout Subsubsection*
MessageExchangeDAO
\end_layout

\begin_layout Standard
DAO für den Nachrichten austausch.
\end_layout

\begin_layout Subsubsection*
MessageRouteDAO
\end_layout

\begin_layout Standard
Das DAO representiert einen Nachrichten Anfrager, wie zum beispiel ein Pick
 oder ein recive.
\end_layout

\begin_layout Subsubsection*
PartnerLinkDAO
\end_layout

\begin_layout Standard
Das DAO representiert einen Partnerlink.
 Es enthällt informationen über die eigene Rolle die Rolle des Partners
 und die Endpointreferenz.
\end_layout

\begin_layout Subsubsection*
ProcessDAO
\end_layout

\begin_layout Standard
Das DAO representiert einen laufenden Prozess.
 Es enthällt die Prozess-Id, den Prozess-Typ, sowie die Prozessinstanzen.
\end_layout

\begin_layout Subsubsection*
ProcessInstanceDAO
\end_layout

\begin_layout Standard
Dieses DAO representiert eine Prozess-Instanz und enthällt alle Daten die
 einer Instanz zugehörig sind.
 Dazu zählen Events, Scopes, sowie wartende pick und recive Aktivitäten.
\end_layout

\begin_layout Subsubsection*
ScopeDAO
\end_layout

\begin_layout Standard
Dieses DAO representiert eine Scope-Instanz.
 Es enthällt eine ansammlung von Correlation-Sets und XML-Variablen.
\end_layout

\begin_layout Subsubsection*
XmlDataDAO
\end_layout

\begin_layout Standard
Das DAO representiert XML-Daten.
 Es wird dazu benutzt BPEL-Variablen zu modelieren.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Eclipse"

\end_inset

Eclipse
\begin_inset Note Note
status open

\begin_layout Plain Layout
Verweise auf den Grobentwurf nicht vergessen.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
BPEL DM Plug-In
\end_layout

\begin_layout Subsection
SIMPL Core Plug-In
\end_layout

\begin_layout Subsection
SIMPL Core Client
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Kommunikation"

\end_inset

Kommunikation
\end_layout

\begin_layout Standard
In diesem Kapitel wird die Kommunikation im SIMPL Rahmenwerk beschrieben
 und wichtige Abläufe deutlich gemacht.
\end_layout

\begin_layout Subsection
SIMPL Rahmenwerk
\end_layout

\begin_layout Standard
In Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Kommunikation-im-SIMPL"

\end_inset

 wird die Kommunikation zwischen den Komponenten beschrieben und die entsprechen
den Funktionsaufrufe gezeigt.
\begin_inset Note Note
status open

\begin_layout Plain Layout
Beschreibung der Abbildung
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diagramme/iteration1/SIMPLRahmenwerkKommunikation.png
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Kommunikation-im-SIMPL"

\end_inset

Kommunikation im SIMPL Rahmenwerk
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Speicherung von Einstellungen über die Admin-Konsole
\begin_inset Note Note
status open

\begin_layout Plain Layout
Beschreibung der Abbildung
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Speicherung-von-Einstellungen"

\end_inset

 zeigt den Ablauf bei der Speicherung von Einstellungen der Adminkonsole
 und das Zusammenspiel der beteiligten Komponenten.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diagramme/iteration1/AdminConsoleSequence.png
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Speicherung-von-Einstellungen"

\end_inset

Speicherung von Einstellungen über die Adminkonsole
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{section}{Literaturverzeichnis}
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-1"

\end_inset


\shape italic
Grobentwurf v1.5
\shape default
.

\shape italic
 
\shape default
Stupro-A SIMPL (2009)
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{section}{Abkürzungsverzeichnis}
\end_layout

\end_inset


\end_layout

\begin_layout Section*

\series bold
\size larger
Abkürzungsverzeichnis
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="2cm">
<column alignment="left" valignment="top" width="10cm">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
UML
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unified Modeling Language
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{section}{Abbildungsverzeichnis}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList figure

\end_inset


\end_layout

\end_body
\end_document
