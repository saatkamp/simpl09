#LyX 1.6.3 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\begin_preamble





\usepackage{babel}

%Packages für eigen definierte Header und Footer
\usepackage{lastpage}
\usepackage{fancyhdr}

% doctitel = Titel des Dokuments
% docvers = Versionsnr.
% docautor = Author(en)
% docdate = Datum der letzten Änderung
\def\doctitel{Feinentwurf}
\def\docvers{1.0}
\def\docautor{}
\def\docdate{15. Januar 2010}

% docstate = Status des Dokuments aus {neu, bearbeitet}
% qsstate = QS-Prüfungsstatus aus {positiv QS-geprüft, negativ QS-geprüft, verworfen}
% proofstate = Prüfungsstatus (durch Projektleiter) aus {positiv geprüft, negativ geprüft, verworfen}
% reviewstate = Annahmestatus des Reviews {kein Review durchgeführt, akzeptiert ohne Änderungen, akzeptiert mit Änderungen, nicht akzeptiert}
% endstate = Endstatus des Dokuments aus {freigegeben, verworfen}
\def\docstate{neu}
\def\qsstate{nicht QS-geprüft}
\def\proofstate{nicht geprüft}
\def\reviewstate{kein Review durchgeführt}
\def\endstate{-}

%Nicht einrücken
%\setlength{\parindent}{0pt}
\end_preamble
\use_default_options false
\language ngerman
\inputencoding latin9
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_amsmath 0
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 3cm
\topmargin 3cm
\rightmargin 3cm
\bottommargin 3cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "Deckblatt.lyx"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%Header und Footer Definitionen für alle anderen Seiten
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
pagestyle
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

fancy
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset FormulaMacro
\renewcommand{\headrulewidth}{0mm}
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
lhead
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
chead
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
rhead
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
lfoot
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\size small
SIMPL © 2009 $IMPL
\size default

\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
cfoot
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
rfoot
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\size small

\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
thepage
\end_layout

\end_inset


\begin_inset space \space{}
\end_inset

/ 
\begin_inset CommandInset ref
LatexCommand pageref
reference "LastPage"

\end_inset


\size default

\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%Ab hier beginnt das Dokument
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
Änderungsgeschichte
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="17" columns="4">
<features>
<column alignment="left" valignment="top" width="2cm">
<column alignment="left" valignment="top" width="3cm">
<column alignment="left" valignment="top" width="3cm">
<column alignment="left" valignment="top" width="6cm">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Version
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Datum
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Autor
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Änderungen
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
13.11.2009
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
zoabifs
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Erstellung des Dokuments.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
04.01.2010
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
schneimi
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Überarbeitung der Struktur, Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Einleitung"

\end_inset

 hinzugefügt.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
09.01.2010
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
schneimi
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:SIMPLCore"

\end_inset

 hinzugefügt.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
12.02.2010
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
schneimi
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Beschreibung von Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Kommunikation"

\end_inset

.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
12.01.2010
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
rehnre
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:BPEL-DM-Extension"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:SIMPL-Event-System"

\end_inset

 und 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Ausführung-einer-BPEL-DM"

\end_inset

 hunzugefügt.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
12.01.2010
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
huettiwg
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:SIMPL-DAO"

\end_inset

 hinzugefügt.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
12.01.2010
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
bruededl
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Beschreibung von Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Eclipse"

\end_inset

.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
12.01.2010
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
hahnml
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Diagramme in Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Eclipse"

\end_inset

 und 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Kommunikation"

\end_inset

 eingefügt.
\end_layout

\begin_layout Plain Layout
Beschreibung der Abschnitte 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Administration-Service"

\end_inset

 und 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Storage-Service"

\end_inset

.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
15.01.2010
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
bruededl
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Eclipse"

\end_inset

 überarbeitet
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
15.01.2010
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
schneimi, hahnml, huettiwg
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Abschließende Korrekturen durchgeführt.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
24.03.2010
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
hahnml
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Eclipse"

\end_inset

 überarbeitet.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
24.03.2010
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
huettiwg
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:SIMPL-DAO"

\end_inset

 überarbeitet.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
27.03.2010
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
hahnml
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Abschnitte 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:RRS-Eclipse-Plug-In"

\end_inset

 und 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:UDDI-Eclipse-Plug-In"

\end_inset

 eingefügt.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
29.03.2010
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
schneimi
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:SIMPLCore"

\end_inset

 überarbeitet.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Einleitung"

\end_inset

Einleitung
\end_layout

\begin_layout Standard
Dieses Kapitel erklärt den Zweck des Dokuments, den Zusammenhang zu anderen
 Dokumenten und gibt dem Leser einen Überblick über den Aufbau des Dokuments.
\end_layout

\begin_layout Subsection
Zweck dieses Dokuments
\end_layout

\begin_layout Standard
Der Feinentwurf beschreibt Details der Implementierung der Komponenten,
 die im Grobentwurf 
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"

\end_inset

 in Kapitel 3 vorgestellt wurden.
 Die Komponenten werden ausführlich beschrieben und ihre Funktionalität
 durch statische und dynamische UML-Diagramme visualisiert.
 Der Feinentwurf bezieht sich im Gegensatz zum Grobentwurf aktuell nur auf
 die erste Iteration und wird mit der zweiten Iteration vervollständigt.
 Grobentwurf und Feinentwurf bilden zusammen den Gesamtentwurf des SIMPL
 Rahmenwerks.
\end_layout

\begin_layout Subsection
Gliederung
\end_layout

\begin_layout Standard
Der Feinentwurf gliedert sich in die folgenden Kapitel:
\end_layout

\begin_layout Itemize
Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:SIMPLCore"

\end_inset

 
\begin_inset Quotes eld
\end_inset

SIMPL Core
\begin_inset Quotes erd
\end_inset

 beschreibt die Implementierung des SIMPL Cores und seinen Web Services
 (siehe 
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"

\end_inset

 Kapitel 3.1).
\end_layout

\begin_layout Itemize
Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Apache-ODE"

\end_inset

 
\begin_inset Quotes eld
\end_inset

Apache ODE
\begin_inset Quotes erd
\end_inset

 beschreibt die Implementierung der Datamanagement-Aktivitäten (DM-Aktivitäten)
 und das externe Auditing (siehe
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"

\end_inset

 Kapitel 3.2).
\end_layout

\begin_layout Itemize
Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Eclipse"

\end_inset

 
\begin_inset Quotes eld
\end_inset

Eclipse Plug-Ins
\begin_inset Quotes erd
\end_inset

 beschreibt die Implementierung der Eclipse Plug-Ins, die für das SIMPL
 Rahmenwerk realisiert werden (siehe
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"

\end_inset

 Kapitel 3.3).
\end_layout

\begin_layout Itemize
Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Kommunikation"

\end_inset

 
\begin_inset Quotes eld
\end_inset

Kommunikation
\begin_inset Quotes erd
\end_inset

 beschreibt die Kommunikation der Komponenten im SIMPL Rahmenwerk auf Funktionse
bene.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:SIMPLCore"

\end_inset

SIMPL Core
\end_layout

\begin_layout Standard
Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:SIMPL-Core-Klassendiagramm"

\end_inset

 zeigt den Aufbau des SIMPL Cores mit Paketstruktur, Klassen und Interfaces,
 sowie deren Zusammenhänge über Verbindungspfeile, die in den folgenden
 Abschnitten beschrieben werden.
 In der Abbildung wird aus Gründen der Übersichtlichkeit auf die Darstellung
 der Interface- und Web Service-Methoden, sowie allgemein Getter- und Setter-Met
hoden verzichtet, die aber in den folgenden Abschnitten genannt und beschrieben
 werden.
 Einige der SIMPL Core Dienste werden, falls sie außerhalb des SIMPL Cores
 aufrufbar sein müssen, nach Außen über Web Services verfügbar gemacht.
 Falls im Nachfolgenden nicht die Dienste selbst, sondern die Web Services
 dieser gemeint sind, werden diese auch als solche bezeichnet, wie z.B.
 Administration Web Service.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diagramme/iteration2/SIMPLCore_Class_Diagram.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:SIMPL-Core-Klassendiagramm"

\end_inset

SIMPL Core Klassendiagramm
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Paketstruktur
\end_layout

\begin_layout Standard
Der SIMPL Core besitzt folgende Paketstruktur, die sich ausgehend vom Kernbereic
h 
\emph on
org.simpl.core
\emph default
, in Bereiche für die Dienste, Web Services, Plug-Ins sowie Hilfsklassen
 aufteilt.
\end_layout

\begin_layout Subsubsection*
org.simpl.core
\end_layout

\begin_layout Standard
Hier befinden sich zentrale Klassen des SIMPL Cores, dazu gehört die 
\emph on
SIMPLCore
\emph default
-Klasse, die den Zugriff auf die verschiedenen Dienste ermöglicht, sowie
 die 
\emph on
SIMPLConfig
\emph default
-Klasse, die für das Einlesen der Konfigurationsdatei des SIMPL Cores zuständig
 ist.
 Die Klassen werden in den folgenden Abschnitten 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:SIMPLCore"

\end_inset

 und 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:SIMPLCore"

\end_inset

 näher beschrieben.
\end_layout

\begin_layout Subsubsection*
org.simpl.core.services
\end_layout

\begin_layout Standard
In diesem Paket befinden sich keine Klassen oder Interfaces, es dient lediglich
 zur Gliederung der verschiedenen Dienste des SIMPL Cores.
\end_layout

\begin_layout Subsubsection*
org.simpl.core.services.administration
\end_layout

\begin_layout Standard
Hier befinden sich alle Klassen zur Realisierung des Administration Service
 (siehe 
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"

\end_inset

, Kapitel 3.3.1).
 Dieser Dienst wird benötigt, um alle Einstellungen des SIMPL Cores zu verwalten.
\end_layout

\begin_layout Subsubsection*
org.simpl.core.services.storage
\end_layout

\begin_layout Standard
Hier befinden sich alle Klassen zur Realisierung des Storage Service (siehe
 
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"

\end_inset

, Kapitel 3.3.5).
 Dieser Dienst wird benötigt, um das Speichern und Laden von Einstellungen
 und Metadaten des SIMPL Rahmenwerks zu realisieren.
\end_layout

\begin_layout Subsubsection*
org.simpl.core.services.datasource
\end_layout

\begin_layout Standard
Hier befinden sich alle Klassen zur Realisierung des Datasource Service
 (siehe 
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"

\end_inset

, Kapitel 3.3.2).
 Dieser Dienst wird benötigt, um Datenquellen anzubinden und Abfragen an
 diese zu senden.
\end_layout

\begin_layout Subsubsection*
org.simpl.core.plugins
\end_layout

\begin_layout Standard
In diesem Paket befinden sich keine Klassen oder Interfaces, es dient lediglich
 zur Gliederung der verschiedenen Plugins des SIMPL Cores.
\end_layout

\begin_layout Subsubsection*
org.simpl.core.plugins.datasource
\end_layout

\begin_layout Standard
Hier befinden sich die Plug-Ins für den Datasource Service, die für die
 verschiedenen Datenquellentypen entwickelt werden.
 Falls sich die einzelnen Plug-Ins auf mehrere Klassen verteilen, können
 diese zusätzlich auf eigene Unterpakete verteilt werden.
 Das Plug-In-System wird in Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Plug-In-System"

\end_inset

 näher beschrieben.
\end_layout

\begin_layout Subsubsection*
org.simpl.core.plugins.dataformat
\end_layout

\begin_layout Standard
Hier befinden sich die Plug-Ins für den Dataformat Service, die für die
 Unterstützung verschiedener Datenformate, speziell für Filesysteme entwickelt
 werden.
 Falls sich die einzelnen Plug-Ins auf mehrere Klassen verteilen, können
 diese zusätzlich auf eigene Unterpakete verteilt werden.
 Das Plug-In-System wird in Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Plug-In-System"

\end_inset

 näher beschrieben.
\end_layout

\begin_layout Subsubsection*
org.simpl.core.webservices
\end_layout

\begin_layout Standard
Hier befinden sich die Web Services des SIMPL Cores, die den Zugriff von
 Außen auf Dienste des SIMPL Cores ermöglichen.
 Alle Klassen werden mit JAX-WS-Annotationen versehen und als Webservices
 über den Axis2 Integration Layer von ODE zur Verfügung gestellt.
\end_layout

\begin_layout Subsubsection*
org.simpl.core.helpers
\end_layout

\begin_layout Standard
In diesem Paket befinden sich Hilfsklassen, die den Entwickler unterstützen.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:SIMPLCore"

\end_inset

Die SIMPLCore Klasse
\end_layout

\begin_layout Standard
Die SIMPLCore-Klasse bildet den zentralen Zugriffspunkt auf alle Dienste
 des SIMPL Cores für den Zugriff auf Klassenebene.
 Damit die Instanzen der Dienste nur einmal existieren und nicht bei jedem
 Zugriff erneut erstellt werden, ist die Klasse als Singleton (
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"

\end_inset

 Kapitel 3.3) ausgelegt.
 Diese Klasse wird von den Apache ODE Extension Activities (siehe 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:BPEL-DM-Extension"

\end_inset

) benutzt, um DM-Aktivitäten auszuführen, sowie innerhalb des SIMPL Cores,
 wenn Dienste sich gegenseitig verwenden.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:SIMPLConfig"

\end_inset

Die SIMPLConfig Klasse
\end_layout

\begin_layout Standard
Die installierten Plugins und ggf.
 später weitere Einstellungen des SIMPL Cores, werden über eine Konfigurationsda
tei registriert, die in 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Die-simpl-core-config.xml-Datei"

\end_inset

 näher beschrieben wird.
 Das Einlesen und Abrufen der Informationen aus dieser Datei, ist über die
 
\emph on
SIMPLConfig
\emph default
-Klasse möglich, die dazu entsprechende Methoden bereitstellt.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Die-simpl-core-config.xml-Datei"

\end_inset

Die SIMPLCore-Konfigurationsdatei
\end_layout

\begin_layout Standard
Die Konfigurationsdatei ist unter
\emph on
 ode/conf/simpl-core-config.xml 
\emph default
abgelegt und hat die folgende Struktur, die in Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Die-SIMPLCore-Konfigurationsdatei-simpl-core-config.xml"

\end_inset

 zu sehen ist.
 Die Plug-In-Klassen müssen jeweils mit dem voll qualifizierten Namen registrier
t werden und als jar-Dateien unter 
\emph on
ode/lib
\emph default
 abgelegt werden, damit sie erkannt werden können.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diagramme/iteration2/simpl-core-config.png
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Die-SIMPLCore-Konfigurationsdatei-simpl-core-config.xml"

\end_inset

Die SIMPLCore-Konfigurationsdatei simpl-core-config.xml
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
SIMPL Core Services
\end_layout

\begin_layout Standard
In diesem Abschnitt werden die Dienste des SIMPL Cores und ihre Funktionsweise
 beschrieben.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Administration-Service"

\end_inset

Administration Service
\end_layout

\begin_layout Standard
Der Administration Service ist für die Verwaltung der Einstellungen der
 Admin-Konsole des SIMPL Core Eclipse Plug-Ins zuständig.
 Die Einstellungen der Admin-Konsole werden dabei über das SIMPL Core Communicat
ion Plug-In (siehe 
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"

\end_inset

, Kapitel 2.1) an den Administration Service übermittelt oder von ihm angefordert.
 Die auf diese Weise zentral im SIMPL Core hinterlegten Einstellungen können
 dann bei Bedarf direkt von anderen SIMPL Core Diensten, die diese Informationen
 benötigen, ausgelesen werden.
 Zur persistenten Speicherung der Einstellungen und weiterer Daten wird
 eine eigene eingebettete Apache Derby (Embedded Derby) Datenbank verwendet,
 die vom gesamten SIMPL Core genutzt wird.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diagramme/iteration1/AdminServiceSequence.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Sequenzdiagramm-des-AdministrationServices"

\end_inset

Sequenzdiagramm eines Lade- und Speichervorgangs der SIMPL Core Einstellungen
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Sequenzdiagramm-des-AdministrationServices"

\end_inset

 zeigt die Verwendung und die Funktionalität des Administration Service.
 Mit der loadSettings()-Methode können Einstellungen aus der Datenbank geladen
 werden.
 Dafür wird intern eine einfache Datenbankabfrage genutzt.
 Die Einstellungen werden dabei als HashMap zurückgeliefert und auch so
 beim Speichern übergeben, damit sowohl die Bezeichnung der Einstellung
 wie auch ihr Wert zu jeder Zeit verfügbar sind.
 Zur Identifizierung verschiedener Einstellungsprofile, wie z.B.
 Standard-Einstellungen und zuletzt gespeicherten Einstellungen, besitzt
 jede Einstellung eine eindeutige Id.
 So kann später die Admin-Konsole um das Laden und Speichern von benutzerspezifi
schen Preset-Einstellungen ergänzt werden.
\end_layout

\begin_layout Standard
Die Struktur der Datenbank orientiert sich direkt am Aufbau der Admin-Konsole.
 Da in der Admin-Konsole immer Ober- und Unterpunkte zusammengehören, wurden
 auf der Datenbank diese Beziehungen durch die Strukturierung mit Schemata
 und Tabellen umgesetzt.
 So gibt es für jeden Oberpunkt, wie z.B.
 
\emph on
Auditing
\emph default
 ein gleichnamiges Schema und für jeden Unterpunkt eines Oberpunkts, wie
 z.B.
 
\emph on
General
\emph default
 eine gleichnamige Tabelle im Schema des Oberpunkts.
 Daraus ergibt sich der genaue Pfad einer in der Datenbank gespeicherten
 Einstellung aus der Auswahl in der Admin-Konsole.
 Mit der saveSettings()-Methode können Einstellungen in einer entsprechenden
 Tabelle eines Schemas gespeichert werden.
 Dazu wird zuerst überprüft, ob das zu den Einstellungen gehörige Schema
 bereits existiert (createSchemaIfItDoesntExistYet()) oder noch erzeugt
 werden muss, und anschließend, ob die Tabelle bereits existiert (createTableIfI
tDoesntExistYet()) oder noch erzeugt werden muss.
 Die Tabelle wird dabei direkt aus den übergebenen Einstellungen automatisch
 erzeugt, indem die Einstellungsnamen als Spaltennamen verwendet werden.
 Wenn nun Schema und Tabelle vorhanden sind, wird überprüft, ob die zu speichern
de Einstellung bereits vorhanden ist und nur noch aktualisiert werden muss,
 oder ob die Einstellung neu angelegt, also eine neue Zeile eingefügt werden
 muss.
 Dazu wird die executeUpdate()-Methode verwendet, die eventuell vorhandene
 Einstellungsprofile abfragt und anhand des Abfrageergebnisses (Einstellungsprof
il existiert vs.
 Einstellungsprofil existiert nicht) das Einstellungsprofil über entsprechende
 Datenbankbefehle aktualisiert oder erstellt.
 Der AdministrationService gibt anschließend eine Statusmeldung (success?)
 an den SIMPL Core zurück, ob der ausgeführte Speichervorgang erfolgreich
 war.
 Dieses generische Vorgehen ist erforderlich, um die Erweiterung der Admin-Konso
le durch weitere Eigenschaften möglichst einfach zu halten.
 Ein Entwickler muss nur die vorhandenen Schnittstellen der Admin-Konsole
 implementieren, seine Implementierung an den entsprechenden Extension-Point
 anbinden und braucht sich nicht um das Laden und Speichern seiner Einstellungen
 zu kümmern.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Storage-Service"

\end_inset

Storage Service
\end_layout

\begin_layout Standard
Der Storage Service ist für die Verwaltung von Daten aller SIMPL Core Services
 zuständig.
 Dafür nutzt er ebenfalls die eingebettete Apache Derby Datenbank.
 Seine Architektur und Funktionalität ist der des Administration Services
 sehr ähnlich, mit dem Unterschied, dass die Struktur der zu speichernden
 Daten und ihre Quelle sich zur Laufzeit ständig ändern können.
 Auch der Storage Service nutzt das Prinzip, die Daten nach ihrer Herkunft
 mit Schemata und Tabellen zu strukturieren.
 Da hier aber keine natürliche Struktur wie beim Administration Service
 vorliegt, wird eine entsprechende Gliederung durch die Zugehörigkeit der
 Services erzeugt.
 So werden z.B.
 alle Daten von Services, die etwas mit Sicherheit zu tun haben, unter dem
 Schema 
\emph on
Security
\emph default
 in entsprechende Tabellen gespeichert, wobei die Tabellennamen aus den
 Klassennamen der Services erzeugt werden.
 Die Zugehörigkeit eines Services wird dabei in seiner Implementierung als
 Konstante hinterlegt und kann so einfach zur Laufzeit genutzt werden.
 Daraus ergibt sich wieder ein eindeutiger Pfad zu den in der Datenbank
 gespeicherten Daten eines jeden SIMPL Core Services.
 Die Daten werden auch wie im Administration Service als HashMaps verarbeitet,
 um sowohl die Bezeichnung als auch den Wert immer verfügbar zu haben.
 Im Storage Service wird allerdings immer der erste in der HashMap hinterlegte
 Wert als Id der zugehörigen Datenbanktabelle interpretiert.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diagramme/iteration1/StorageServiceSequence.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Sequenzdiagramm-des-StorageServices"

\end_inset

Sequenzdiagramm eines Lade- und Speichervorgangs von Einstellungen eines
 SIMPL Services
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Sequenzdiagramm-des-StorageServices"

\end_inset

 zeigt die Verwendung und die Funktionalität des Storage Services.
 Mit der load()-Methode können Daten wieder aus der Datenbank geladen werden,
 und die save()-Methode speichert alle Daten eines Services analog zur Vorgehens
weise der saveSettings()-Methode des Administration Services.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Datasource-Service"

\end_inset

Datasource Service
\end_layout

\begin_layout Standard
Der Datasource Service realisiert die Schnittstelle für den Zugriff auf
 die verschiedenen Datenquellen und wird über Plug-Ins realisiert (siehe
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:DataSourcePlugin"

\end_inset

).
 Eine genaue Beschreibung des Plug-In Systems folgt in Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Plug-In-System"

\end_inset

.
 Folgende Funktionen müssen von einem Datasource Service realisiert werden:
\end_layout

\begin_layout Paragraph
public Connection openConnection(String dsAddress)
\end_layout

\begin_layout Standard
Öffnet eine Verbindung zu einer Datenquelle und liefert zu der Adresse einer
 Datenquelle ein Verbindungsobjekt über das mit der Datenquelle kommuniziert
 werden kann.
 
\end_layout

\begin_layout Paragraph
public boolean closeConnection(Connection connection)
\end_layout

\begin_layout Standard
Schließt die Verbindung zu einer Datenquelle und bestätigt den Verbindungsabbau
 mit einem booleschen Rückgabewert.
\end_layout

\begin_layout Paragraph
public DataObject retrieveData(String dsAddress, String statement)
\end_layout

\begin_layout Standard
Ermöglicht die Anforderung von Daten von einer bestimmten Datenquelle durch
 Adresse und ein Statement der entsprechenden Anfragesprache wie z.B.
 ein SELECT-Statement in der Anfragesprache SQL.
 Die Rückgabe der Daten erfolgt als SDO.
\end_layout

\begin_layout Paragraph
public boolean depositData(String dsAddress, String statement, String target)
\end_layout

\begin_layout Standard
Mit dieser Funktion werden über ein Statement Daten selektiert und auf der
 Datenquelle hinterlegt.
 Die hinterlegten Daten werden über das 
\emph on
target 
\emph default
als Tabelle referenziert und können darüber anschließend abgerufen werden.
\end_layout

\begin_layout Paragraph
public boolean executeStatement(String dsAddress, String statement)
\end_layout

\begin_layout Standard
Ermöglicht die Ausführung eines Statements auf einer Datenquelle und bestätigt
 die Ausführung mit einem booleschen Rückgabewert.
\end_layout

\begin_layout Paragraph
public boolean writeBack(String dsAddress, String statement, DataObject
 data)
\end_layout

\begin_layout Standard
Wird verwendet um bestehende Daten zu manipulieren bzw.
 zu aktualisieren.
 Die Funktion erhält Daten in Form eines SDO und ein Statement mit dem die
 Verwendung der Daten beschrieben wird.
 Der Erfolg der Operation wird mit einem booleschen Rückgabewert bestätigt.
\end_layout

\begin_layout Paragraph
public DataObject getMetaData(String dsAddress)
\end_layout

\begin_layout Standard
Liefert Metadaten zu einer Datenquelle als SDO und wird in Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Metadaten"

\end_inset

 näher beschrieben.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Dataformat-Service"

\end_inset

Dataformat Service
\end_layout

\begin_layout Standard
Der Dataformat Service realisiert die Unterstützung beliebiger Datenformate,
 die von den Datenquellen vorgegeben sein können.
 Die Formate werden von den Datasource-Plug-Ins verwendet um die Rückgabe
 der angeforderten Daten als SDO zu realisieren.
 Folgende Funktion muss von einem Dataformat-Plug-In realisiert werden:
\end_layout

\begin_layout Paragraph
public <T> DataObject toSDO(T data)
\end_layout

\begin_layout Standard
Die Funktion bekommt Daten eines bestimmten Formats von einer Datenquelle
 und stellt diese als SDO für die weitere Verarbeitung zur Verfügung.
 Sie ist generisch ausgelegt, damit die eingehenden Daten von einem beliebigen
 Typ sein können, der von jedem Plug-In selbst bestimmt werden kann, bei
 lokalen Dateisystemen bietet sich z.B.
 der Typ 
\emph on
File
\emph default
 an.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Plug-In-System"

\end_inset

Plug-In System
\end_layout

\begin_layout Standard
Um eine Erweiterungsmöglichkeit des SIMPL Cores für die Unterstützung verschiede
ner Typen von Datenquellen und Datenformaten zu garantieren, wird ein Plug-In
 System realisiert.
 Dies wird durch die Bereitstellung von abstrakten Klassen erreicht, von
 der sich die Plug-Ins ableiten lassen.
 Mit der Reflection API von Java ist es möglich, die Plug-Ins zur Laufzeit
 zu laden und zu verwenden, ohne dass bestehender Code angepasst werden
 muss.
 Die Plug-Ins werden als JAR-Dateien im Classpath von Apache ODE 
\emph on
ode/lib
\emph default
 abgelegt und müssen in der 
\emph on
simpl-core-config.xml 
\emph default
(siehe 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Die-simpl-core-config.xml-Datei"

\end_inset

) registriert werden.
 Für das Laden und Bereitstellen der Plug-Ins stehen Service-Provider zur
 Verfügung, die die Plug-Ins als Dienste bereitstellen.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:DataSourcePlugin"

\end_inset

DataSourcePlugin
\end_layout

\begin_layout Standard
Mit DataSourcePlugins können beliebige Datenquellen an den SIMPL Core angeschlos
sen werden.
\end_layout

\begin_layout Paragraph*
DataSourceService (Interface)
\end_layout

\begin_layout Standard
Das DatasourceService-Interface schreibt alle Funktionen vor, die von den
 Datasource Services (Plug-Ins) implementiert werden müssen und entsprechen
 den Funktionen in Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Datasource-Service"

\end_inset

.
\end_layout

\begin_layout Paragraph*
DataSourcePlugin (Abstrakte Klasse)
\end_layout

\begin_layout Standard
Bei der DataSourcePlugin-Klasse handelt es sich um eine abstrakte Klasse,
 die an das DataSourceService-Interface gebunden ist und damit das Grundgerüst
 für einen Datasource Service bildet.
 Ein Plug-In muss diese Klasse erweitern und wird dadurch gezwungen, das
 DataSourceService-Interface zu implementieren.
\end_layout

\begin_layout Paragraph*
DataSourceServiceProvider
\end_layout

\begin_layout Standard
Über den DataSourceServiceProvider kann mit der Methode getInstance() die
 Instanz eines Datasource Service angefordert werden.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:DataFormatPlugin"

\end_inset

DataFormatPlugin
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph*
DataFormatService
\end_layout

\begin_layout Standard
Das DatasourceService-Interface schreibt alle Funktionen vor, die von den
 Datasource Services (Plug-Ins) implementiert werden müssen und entsprechen
 den Funktionen in Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Dataformat-Service"

\end_inset

.
\end_layout

\begin_layout Paragraph*
DataFormatPlugin
\end_layout

\begin_layout Standard
Bei der DataFormatPlugin-Klasse handelt es sich um eine abstrakte Klasse,
 die an das DataFormatService-Interface gebunden ist und damit das Grundgerüst
 für einen Dataformat Service bildet.
 Ein Plug-In muss diese Klasse erweitern und wird dadurch gezwungen, das
 DataFormatService-Interface zu implementieren.
\end_layout

\begin_layout Paragraph*
DataFormatServiceProvider
\end_layout

\begin_layout Standard
Über den DataFormatServiceProvider kann mit der Methode getInstance() die
 Instanz eines Dataformat Service angefordert werden.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Metadaten"

\end_inset

Metadaten
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Web-Services"

\end_inset

Web Services
\end_layout

\begin_layout Standard
Die Web Services werden mit den JAX-WS annotierten Klassen wie folgt bereitgeste
llt.
 Zunächst wird mit Hilfe des Befehls wsgen.exe (..
\backslash
Java
\backslash
jdk1.6.0_14
\backslash
bin
\backslash
wsgen.exe) eine WSDL-Datei zu einer Klasse erzeugt.
 Die WSDL-Datei wird anschließend zusammen mit der kompilierten Klasse als
 JAR-Datei in Apache ODE hinterlegt (..
\backslash
Tomcat 6.0
\backslash
webapps
\backslash
ode
\backslash
WEB-INF
\backslash
servicejars) und wird damit beim Start von Apache Tomcat von Apache ODE
 als Web Service bereitgestellt.
\end_layout

\begin_layout Standard
Komplexe Objekte wie z.B.
 HashMaps, die intern von den SIMPL Core Diensten zur Ausführung benötigt
 werden, werden als String serialisiert an die Web Services übergeben und
 in dieser Form auch als Rückgabeparameter empfangen.
 Bei der Deserialisierung werden die Objekte wiederhergestellt und können
 als solche verwendet werden.
 Eine Ausnahme bilden die SDO Objekte, die bereits über eine XML Darstellung
 verfügen und in dieser direkt übermittelt werden können.
 Für diesen Vorgang stellt die Helper-Klasse Parameter entsprechende Funktionen
 zur Verfügung.
\end_layout

\begin_layout Subsubsection
Datasource Web Service (Datasource)
\begin_inset Note Note
status collapsed

\begin_layout Subparagraph
public DataObject queryData(String dsAddress, String statement, String dsType)
\end_layout

\begin_layout Subparagraph
public boolean defineData(String dsAddress, String statement, String dsType)
\end_layout

\begin_layout Subparagraph
public boolean manipulateData(String dsAddress, String statement, DataObject
 data, String dsType)
\end_layout

\begin_layout Subparagraph
public List<String> getDatasourceTypes()
\end_layout

\begin_layout Subparagraph
public List<String> getDatasourceSubTypes(String datasourceType)
\end_layout

\begin_layout Subparagraph
public List<String> getDatasourceLanguages(String datasourceSubType)
\end_layout

\begin_layout Subparagraph
public List<String> getDatasourceMetaData(String dsAddress, String dsType)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Der Datasource Web Service bietet eine Schnittstelle zu allen Ausprägungen
 des Datasource Service im SIMPL Core.
 Die Funktionen des Datasource Web Service entsprechen den öffentlichen
 Funktionen der Datasource Services, erhalten aber als zusätzlichen Parameter
 die eindeutige Typkennzeichung (siehe 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Plug-In-System"

\end_inset

 DatasourceServiceProvider) der angeforderten Datenquelle, über die bei
 einem Zugriff intern der entsprechende Datasource Service angesprochen
 werden kann.
 Zusätzlich besitzt der Datasource Web Service eine Funktion, um Metadaten
 von einer Datenquelle anzufordern, die beispielsweise von Eclipse zur Auswahl
 in der GUI benötigt werden, wie z.B.
 die existierenden Tabellen in einer Datenbank.
\end_layout

\begin_layout Subsubsection
Administration Web Service (Administration)
\begin_inset Note Note
status collapsed

\begin_layout Subparagraph
public boolean saveSettings(String schema, String table, String settingName,
 LinkedHashMap<String, String> settings)
\end_layout

\begin_layout Subparagraph
public LinkedHashMap<String, String> loadSettings(String schema, String
 table, String settingName)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Der Administration Web Service ist die direkte Schnittstelle des Administration
 Service nach außen und besitzt daher die gleichen Funktionen wie dieser,
 mit dem Unterschied, dass komplexe Parameter als String-Parameter gehandhabt
 werden (siehe Abschnitt 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Web-Services"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Apache-ODE"

\end_inset

Apache ODE
\begin_inset Note Note
status open

\begin_layout Plain Layout
Verweise auf den Grobentwurf fehlen noch.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In diesem Kapitel wird auf die Erweiterungen, die an Apache ODE vorgenommen
 werden, eingegangen.
 Dies beinhaltet die BPEL-DM Extension Activities, das SIMPL Event System
 sowie das SIMPL DAO.
 Es wird auf die verschiedenen Funktionalitäten als auch auf deren Umsetzung
 eingegangen.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:BPEL-DM-Extension"

\end_inset

BPEL-DM Extension Activities
\end_layout

\begin_layout Standard
Die BPEL-DM Extension Activities (siehe Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:BPEL-DM-Extension"

\end_inset

) haben als Hauptklasse die Klasse SIMPLActivity, welche verschiedene Funktional
itäten für alle weiteren Extension Activities anbietet.
 Die Extension Activities nutzen zur Ausführung der verschiedenen Data-Managemen
t-Operationen den Datasource Service des SIMPL Cores.
 Die Implementierung der Extension Activities wird wie folgt umgesetzt.
\end_layout

\begin_layout Standard
Zunächst muss eine neue Aktivität von der Klasse „AbstractSyncExtensionOperation
“ abgeleitet werden und die dadurch vererbten Methoden müssen implementiert
 werden.
 Die Methode „runsync“ ist hierbei für die eigentliche Ausführung der neuen
 Aktivität verantwortlich.
 Dafür ist die Nutzung der beiden Parameter „context“ und „element“ notwendig.
 Mit 
\begin_inset Quotes eld
\end_inset

context
\begin_inset Quotes erd
\end_inset

 hat man die Möglichkeit, auf BPEL-Variablen und weitere Konstrukte, die
 im Prozess vorhanden sind, zuzugreifen.
 Der Inhalt des BPEL-Prozess-Dokuments wird als DOM-Baum geparst, um ein
 objektbasiertes Modell des BPEL Prozesses zu erzeugen.
 Mit „element“ ist es möglich, auf die verschiedenen Eigenschaften der einzelnen
 Knoten des Baumes zuzugreifen und mit ihnen zu arbeiten.
 
\end_layout

\begin_layout Standard
Weiterhin ist es notwendig, ein eigenes ExtensionBundle zu implementieren.
 Das ExtensionBundle ist notwendig, damit ODE weiß, aus welchen Extension
 Activities die Erweiterung besteht, und um sie zur Laufzeit ausführen zu
 können.
 Die Implementierung wird erreicht durch das Ableiten einer neuen Klassen
 von „AbstractExtensionBundle“.
 In dieser Klasse müssen nun in der Methode „registerExtensionActivity“
 alle Klassen, die für die Extension Activity von Bedeutung sind, mit Hilfe
 von „registerExtensionOperation“ bei ODE registriert werden.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diagramme/iteration1/SIMPL-EA.jpg
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:BPEL-DM-Extension"

\end_inset

BPEL-DM Extension Activities
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:SIMPL-Event-System"

\end_inset

SIMPL Event System
\end_layout

\begin_layout Standard
Für die SIMPL Extension Activities wird eine Reihe von neuen Events eingeführt.
 Die Klassenhierarchie der Events ist in Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:SIMPL-Event-System"

\end_inset

 zu sehen.
 Die neuen Events unterteilen sich in DMEvents und ConnectionEvents, welche
 beide als Hauptklasse die Klasse SIMPLEvent haben.
 SIMPLEvent ist wiederum von Scope Event abgeleitet.
 DMEvents stehen dabei für alle Ereignisse, die während der Ausführung einer
 DM-Aktivität auftreten können, während ConnectionEvents Rückmeldung über
 den Status der Verbindung zu einer Datenquelle geben.
 Die neuen Events werden als Scope Events in die bestehende Event Hierarchie
 von ODE eingegliedert.
 Dies erlaubt es uns, diese direkt innerhalb der ExtensionAcitvities zu
 nutzen und aufzurufen.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diagramme/iteration1/SIMPL-Events.jpg
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:SIMPL-Event-System"

\end_inset

SIMPL Event System
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Ausführung-einer-BPEL-DM"

\end_inset

Ausführung einer BPEL-DM Extension Activity
\end_layout

\begin_layout Standard
In Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Ausführung-einer-SIMPL"

\end_inset

 wird die Ausführung einer Query-Activity, mit den während der Ausführung
 auftretenden Events, aufgezeigt.
 Hierbei ist zu erwähnen, dass die Query-Activity folgendermaßen durchgeführt
 wird:
\end_layout

\begin_layout Enumerate
Mit Hilfe der queryData-Methode werden die Daten aus der aktuellen Datenquelle
 gelesen und als SDO (DataObject) zurückgegeben
\end_layout

\begin_layout Enumerate
Mit Hilfe der defineData-Methode wird eine neue Tabelle in der aktuellen
 Datenbank erzeugt
\end_layout

\begin_layout Enumerate
Mit Hilfe der manipulateData-Methode wird das unter 1.
 erzeugte SDO (DataObject) in der in 2.
 erzeugten Tabelle abgespeichert
\end_layout

\begin_layout Standard
Die Events 
\begin_inset Quotes eld
\end_inset

DMStarted
\begin_inset Quotes erd
\end_inset

 und 
\begin_inset Quotes eld
\end_inset

DMEnd
\begin_inset Quotes erd
\end_inset

 werden zu Beginn bzw.
 am Ende der Ausführung erzeugt.
 Das Event 
\begin_inset Quotes eld
\end_inset

DMFailure
\begin_inset Quotes erd
\end_inset

 wird erzeugt, falls die Rückmeldungsvariable 
\begin_inset Quotes eld
\end_inset

success
\begin_inset Quotes erd
\end_inset

 auf false gesetzt wurde.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diagramme/iteration1/SIMPL-EA-Events-Sequenz-Diagramm.jpg
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Ausführung-einer-SIMPL"

\end_inset

Ausführung einer BPEL-DM Extension Activity
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:SIMPL-DAO"

\end_inset

SIMPL DAO 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Einige Dinge in Iter 2 zu ändern
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Das SIMPL Data Access Object (DAO) besteht aus der Implementierung der Interface
s aus dem Paket 
\emph on
org.apache.ode.bpel.dao
\emph default
, die in den folgenden Unterpunkten beschrieben werden.
 Das DAO wird dafür verwendet, wichtige Daten der Prozessausführung aufzuzeichne
n und persistent zu speichern (Siehe hierfür 
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"

\end_inset

 3.2.2).
 
\end_layout

\begin_layout Standard
Das SIMPL DAO übernimmt alle Eigenschaften der ODE internen Java Persistence
 API (JPA)-Implementierung und erweitert diese um die Eigenschaft, Daten
 per Service Data Object (SDO) an den SIMPL Core senden zu können, so dass
 die Auditing Daten über den SIMPL Core einfach in beliebigen Datenquellen
 gespeichert werden können.
 Das SIMPL DAO bietet den Vorteil, dass Daten gefiltert in der Datenquelle
 gespeichert werden können und somit nur relevante Daten über die Prozessausführ
ung in die Datenbank geschrieben werden.
 Darüber hinaus kann die Stuktur der zu speichernden Daten beliebig verändert
 werden, zum Beispiel um die Lesbarkeit der Daten zu erhöhen.
 Die Übertragung der Daten findet dabei direkt in den set-Methoden der DAOs
 statt.
 Die DAO Daten werden trotzdem auch weiterhin in der internen Apache Derby
 Datenbank gespeichert und von dort gelesen.
 Datentransfers an den SIMPL Core und damit verbundene beliebige Datenquellen,
 können nur schreibend, jedoch nicht lesend erfolgen.
 
\end_layout

\begin_layout Subsubsection
DAOs
\end_layout

\begin_layout Standard
In diesem Abschnitt werden die verschiedenen DAOs beschrieben, welche vom
 SIMPL Auditing unterstützt werden und die Daten, welche gespeichert werden.
\end_layout

\begin_layout Subsubsection*
ActivityRecoveryDAO
\end_layout

\begin_layout Standard
Das ActivityRecoveryDAO wird ausgeführt, wenn eine Aktivität den 
\begin_inset Quotes eld
\end_inset

recovery
\begin_inset Quotes erd
\end_inset

 Status einnimmt.
\end_layout

\begin_layout Subsubsection*
CorrelationSetDAO
\end_layout

\begin_layout Standard
Das CorrelationSetDAO wird ausgeführt, wenn in BPEL ein Correlation Set
 erstellt wird.
 Correlation Sets ermöglichen die Kommunikation einer Prozessinstanz mit
 seinen Partnern.
\end_layout

\begin_layout Subsubsection*
FaultDAO
\end_layout

\begin_layout Standard
Das FaultDAO wird erstellt, wenn ein Fehler in der Proessausführung passiert.
 Über dieses DAO kann auf die Informationen bezüglich des Fehlers, zum Beispiel
 der Name und der Grund für den Fehler, zugegriffen werden.
\end_layout

\begin_layout Subsubsection*
PartnerLinkDAO
\end_layout

\begin_layout Standard
Das PartnerLinkDAO repräsentiert einen PartnerLink.
 Es enthält Informationen über die eigene Rolle, die Rolle des Partners
 und die im PartnerLink hinterlegte Endpunkt-Referenz.
\end_layout

\begin_layout Subsubsection*
ProcessDAO
\end_layout

\begin_layout Standard
Das ProcessDAO repräsentiert ein Prozessmodell.
 Es enthält die Prozess-Id, den Prozess-Typ und die Prozessinstanzen dieses
 Modells.
\end_layout

\begin_layout Subsubsection*
ProcessInstanceDAO
\end_layout

\begin_layout Standard
Das ProcessInstanceDAO repräsentiert eine Prozess-Instanz und enthält alle
 Daten, die einer Instanz zugehörig sind.
 Dazu zählen Events, Scopes sowie wartende Pick- und Receive-Aktivitäten.
\end_layout

\begin_layout Subsubsection*
ScopeDAO
\end_layout

\begin_layout Standard
Das ScopeDAO repräsentiert eine Scope-Instanz.
 Es enthält eine Ansammlung von Correlation-Sets und XML-Variablen.
\end_layout

\begin_layout Subsubsection*
XmlDataDAO
\end_layout

\begin_layout Standard
Das XmlDataDAO repräsentiert XML-Daten und wird dazu benutzt Inhalte von
 BPEL-Variablen zu speichern.
\end_layout

\begin_layout Subsubsection
DAO Java Persistence API (JPA)
\end_layout

\begin_layout Standard
Das DAO-JPA ist eine DAO Implementierung, die auf Apache Open JPA basiert.
 Dieses stellt Funktionalitäten zur persistenten Speicherung auf relationalen
 Datenspeichern zur Verfügung.
 Über annotierte Variablen können somit die DAO Daten komfortabel in der
 ODE internen Derby Datenbank gespeichert werden.
\end_layout

\begin_layout Subsubsection
DAO Lebenszyklus
\end_layout

\begin_layout Standard
Beim Starten von Apache Tomcat wird auch ODE und somit der darin enthaltene
 BPEL-Server gestartet.
 Sofort wird die in der 
\emph on
OdeServer
\emph default
-Klasse enthaltene 
\emph on
init
\emph default
-Methode aufgerufen.
 Diese ruft wiederum die 
\emph on
initDao
\emph default
-Methode auf.
 Dort wird die 
\emph on
DaoConnectionFactory
\emph default
 geladen, welche zuvor in der 
\emph on
OdeConfigProperties
\emph default
 definiert oder aus der 
\emph on
Axis2.properties
\emph default
 geladen wurde.
 Über die 
\emph on
ConnectionFactory
\emph default
-Klasse werden 
\emph on
DaoConnections
\emph default
 erstellt und bereitgestellt, mit deren Hilfe direkt auf die DAOs zugegriffen
 werden kann.
 Der Zugriff erfolgt an den Stellen in ODE, wo die den DAOs entsprechenden
 BPEL Konstrukte ausgewertet werden.
 So wird auf die 
\emph on
ProcessDAO
\emph default
 zum Beispiel aus der 
\emph on
ODEProcess
\emph default
-Klasse zugegriffen, um die Prozessdaten persistent zu speichern.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Eclipse"

\end_inset

Eclipse
\end_layout

\begin_layout Standard
Das SIMPL Rahmenwerk besteht aus der bereits vorhandenen Eclipse IDE und
 dem Eclipse BPEL Designer Plug-In sowie den drei zu erstellenden Plug-Ins
 BPEL-DM Plug-In, SIMPL Core Plug-In und SIMPL Core Client Plug-In.
 Dazu kommen noch Eclipse Plug-Ins für das Reference Resolution System (RRS)
 und eine UDDI-Registry.
 Im Rahmen des Feinentwurfes werden die Anbindung an die vorhandenen Komponenten
 sowie die zu erstellenden Komponenten näher erläutert.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:BPEL-DM-Plug-In"

\end_inset

BPEL DM Plug-In
\end_layout

\begin_layout Standard
Mit dem BPEL-DM Plug-In werden die bestehenden Aktivitäten des Eclipse BPEL
 Designer Plug-Ins um die DM-Aktivitäten ergänzt.
 Das Plug-In gliedert sich in die in Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:BPEL-DM-Plug-In"

\end_inset

 dargestellten Pakete.
 Das User-Interface Paket (
\emph on
org.eclipse.bpel.simpl.ui
\emph default
) sorgt für die grafische Darstellung der DM-Aktivitäten und deren Einbindung
 in den Eclipse BPEL Designer.
 Das zugrundeliegende Modell der DM-Aktivitäten befindet sich im Paket 
\emph on
org.eclipse.bpel.simpl.model
\emph default
.
 Für die grafische Modellierung von Abfragebefehlen für verschiedene Datenquelle
n können weitere Plug-Ins über einen Extension-Point an das BPEL-DM Plug-In
 angebunden werden.
 Im Rahmen des Projekts wird ein Beispiel Plug-In (
\emph on
org.eclipse.bpel.simpl.ui.sql
\emph default
) für die grafische Modellierung von SQL-Abfragen umgesetzt.
 Die verschiedenen Pakete und deren Klassen werden in den folgenden Unterkapitel
n näher erläutert.
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diagramme/iteration1/BPEL-DM Plug-In Overview.png
	lyxscale 60
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:BPEL-DM-Plug-In"

\end_inset

BPEL DM Plug-In Paketstruktur
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
BPEL DM Plug-In User Interface
\end_layout

\begin_layout Standard
Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:BPEL-DM-Plug-In UI"

\end_inset

 zeigt den Aufbau der grafischen Benutzerschnittstelle (User Interface)
 des BPEL-DM Plug-Ins.
 Der Aufbau orientiert sich dabei an der Architektur des Eclipse BPEL Designer
 Plug-Ins und dessen Extension Points.
 Nachfolgend werden nun alle Pakete und die wichtigsten Klassen des BPEL-DM
 Plug-Ins beschrieben und deren Zweck näher erläutert.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diagramme/iteration1/BPEL-DM Plug-In UI.png
	lyxscale 80
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:BPEL-DM-Plug-In UI"

\end_inset

BPEL DM Plug-In User Interface
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
org.eclipse.bpel.simpl.ui
\end_layout

\begin_layout Standard
Dieses Paket enthält die Klassen 
\emph on
Application
\emph default
 und 
\emph on
DataManagementUIConstants
\emph default
.
 Die Klasse 
\emph on
Application
\emph default
 enthält verschiedene Methoden, die die Verwaltung der angebunden Plug-Ins
 des 
\emph on
queryLanguage
\emph default
 Extension-Points erleichtern.
 Die Klasse 
\emph on
DataManagementUIConstants
\emph default
 enthält alle Bildpfade der Icons der DM-Aktivitäten und stellt diese zur
 Verfügung.
\end_layout

\begin_layout Subsubsection*
org.eclipse.bpel.simpl.adapters
\end_layout

\begin_layout Standard
Dieses Paket enthält eine Adapter-Klasse für jede DM-Aktivität.
 Die Adapter-Klassen verknüpfen das Modell und die grafische Repräsentation
 (UI) einer DM-Aktivität und erben von der abstrakten Klasse 
\emph on
org.eclipse.bpel.ui.adapters.ActivityAdapter
\emph default
.
\end_layout

\begin_layout Subsubsection*
org.eclipse.bpel.simpl.extensions
\end_layout

\begin_layout Standard
Das Interface 
\emph on
IStatementeEditor
\emph default
 vererbt an die abstrakte Klasse 
\emph on
AStatementEditor
\emph default
, und diese gibt die Rahmenbedingungen für die Einbindung von Statement-Editoren
 für neue Anfragesprachen vor.
 Eine StatementEditor-Implementierung enthält immer ein Composite, in dem
 die grafischen Elemente positioniert sind und die Logik zur grafischen
 Modellierung eines Befehls, über die zur Verfügung gestellten Elemente.
 Weiterhin müssen die Methoden 
\emph on
getComposite()
\emph default
, 
\emph on
setComposite()
\emph default
 und 
\emph on
createComposite()
\emph default
 zur Verwaltung und Erzeugung des Composites, aus der Vaterklasse heraus,
 bereitgestellt werden.
 Um den modellierten Abfragebefehl aus der StatementEditor-Implementierung
 auszulesen bzw.
 einen gespeicherten Befehl zu übergeben, werden noch die 
\emph on
getStatement()
\emph default
 und 
\emph on
setStatement()
\emph default
-Methoden benötigt.
 Die Anbindung von StatementEditor-Implementierungen erfolgt dabei über
 den Extension Point 
\noun on
org.eclipse.bpel.simpl.ui.queryLanguage
\noun default
.
\end_layout

\begin_layout Subsubsection*
org.eclipse.bpel.simpl.factories
\end_layout

\begin_layout Standard
Die beiden Klassen in diesem Paket erzeugen Objekte für die grafische Platzierun
g von DM-Aktivitäten in der Modellierungsumgebung.
 Die Klasse 
\emph on
DataManagementUIObjectFactory
\emph default
 erzeugt Objekte für die grafische Repräsentation der jeweiligen Aktivität
 und die Klasse 
\emph on
DataManagementUIAdapterFactory
\emph default
 die zugehörigen Adapter, die für die Verknüpfung der oben genannten Objekte
 entsprechenden Modellinstanzen der Aktivitäten benötigt werden.
 Die Klasse 
\emph on
DataManagementUIObjectFactory
\emph default
 erweitert dafür die abstrakte Klasse 
\emph on
org.eclipse.bpel.ui.factories.AbstractUIObjectFactory 
\emph default
und wird über den vorhandenen Extension-Point 
\noun on
org.eclipse.bpel.ui.uiObjectFactories
\noun default
 an den BPEL Designer angebunden.
 Die Klasse 
\emph on
DataManagementUIAdapterFactory
\emph default
 erweitert die Klasse 
\emph on
org.eclipse.bpel.simpl.model.util.ModelAdapterFactory
\emph default
 des BPEL-DM Modells.
\end_layout

\begin_layout Subsubsection*
org.eclipse.bpel.simpl.palette
\end_layout

\begin_layout Standard
Dieses Paket erweitert die grafische Palette der Aktivitäten des BPEL Designers.
 In der Palette werden alle verfügbaren Aktivitäten des BPEL Designers und
 durch die Erweiterung auch die BPEL-DM-Aktivitäten dargestellt.
 Mithilfe der Palette können die Aktivitäten ausgewählt und in den Editor
 zur Prozessmodellierung eingefügt werden.
 Die Klasse 
\emph on
DataManagementPaletteProvider
\emph default
 implementiert dafür die Schnittstelle 
\emph on
org.eclipse.bpel.common.ui.palette.IPaletteProvider
\emph default
 und wird über den vorhandenen BPEL Designer Extension-Point 
\noun on
org.eclipse.bpel.common.ui.paletteAdditions
\noun default
.
\end_layout

\begin_layout Subsubsection*
org.eclipse.bpel.simpl.properties
\end_layout

\begin_layout Standard
Das Paket beinhaltet die Anzeige der Eigenschaften der jeweiligen DM-Aktivitäten.
 Die Anbindung erfolgt über den vorhandenen BPEL Designer Extension-Point
 
\noun on
org.eclipse.ui.views.properties.tabbed.propertySections
\noun default
.
 Die Eigenschaften können in der Modellierungsumgebung unter dem Punkt Propertie
s ausgewählt werden.
 Zu den Optionen gehört primär die Angabe des Datenquellentyps, wie Datenbank,
 Sensornetz oder ein Filesystem.
 Je nach gewählter Art kann dann unter 
\begin_inset Quotes eld
\end_inset

Subtype
\begin_inset Quotes erd
\end_inset

 die Auswahl verfeinert werden.
 So kann z.B.
 beim Filesystem NTFS oder EXT3 gewählt werden.
 Bei einer Datenbank kann z.B.
 zwischen DB2 und MySQL gewählt werden, beim Sensornetz wird momentan nur
 TinyDB unterstützt.
 Weiterhin kann hier die Datenquellenadresse angegeben werden, also die
 Adresse, wohin der in der Aktivität definierte DM-Befehl zur Verarbeitung
 geschickt wird.
 Der in der Aktivität hinterlegte DM-Befehl wird im 
\begin_inset Quotes eld
\end_inset

Resulting Statement
\begin_inset Quotes erd
\end_inset

-Textfeld angezeigt und kann im Statement-Editor bearbeitet oder auch neu
 modelliert werden.
 Bei den einzelnen DM-Aktivitäten werden Optionen, die nicht möglich sind,
 nicht zur Auswahl freigegeben.
 Es ist beispielsweise nicht möglich, bei einer Insert-Aktivität ein Sensornetz
 auszuwählen.
\end_layout

\begin_layout Subsubsection
BPEL-DM Plug-In Modell
\end_layout

\begin_layout Standard
Das BPEL-DM Plug-In Modell stellt die Pakete und Klassen des (EMF-) Modells
 der BPEL-DM-Aktivitäten dar.
\end_layout

\begin_layout Standard
\align block
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diagramme/iteration1/BPEL-DM Plug-In Model.png
	lyxscale 80
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:BPEL-DM-Plug-In Modell"

\end_inset

BPEL-DM Plug-In Modell
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:BPEL-DM-Plug-In Modell"

\end_inset

 zeigt alle Pakete und Klassen, die das BPEL-DM Modell ergeben.
 An oberster Stelle steht die 
\emph on
DataManagementActivity
\emph default
-Klasse (Interface), die die Klasse 
\emph on
org.eclipse.bpel.model.ExtensionActivity
\emph default
 erweitert.
 Sie enthält die Variablen 
\emph on
dsType
\emph default
, 
\emph on
dsKind
\emph default
, 
\emph on
dsAddress
\emph default
 und 
\emph on
dsStatement,
\emph default
 die die gemeinsame Schnittmenge der Aktivitätenvariablen bilden.
 Diese werden an die Kindklassen wie z.B.
 
\emph on
QueryActivity
\emph default
 (Interface) vererbt und können somit bei Bedarf um schnittstellenspezifische
 Eigenschaften erweitert werden.
 Die konkrete Realisierung dieser Interfaces erfolgt dann im Paket 
\emph on
org.eclipse.bpel.simpl.model.impl
\emph default
 z.B.
 in der Klasse 
\emph on
QueryActivityImpl
\emph default
.
 Die Klassen 
\emph on
ModelFactory
\emph default
 (Interface) und 
\emph on
ModelPackage
\emph default
 (Interface) erben von den Klassen 
\emph on
org.eclipse.emf.ecore.EFactory
\emph default
 und 
\emph on
org.eclipse.emf.ecore.EPackage
\emph default
 und werden benötigt, um Objekte des Modells zu erzeugen (Factory), wie
 z.B.
 ein QueryActivity-Objekt und um Objekte des Modells zu verwalten (Package),
 wie z.B.
 das Auslesen der Variablenwerte eines QueryActivity-Objekts.
\end_layout

\begin_layout Standard
\align block
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diagramme/iteration1/BPEL-DMPlugInModellUtil.png
	lyxscale 80
	width 60text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:BPEL-DM-Plug-In Modell-Util"

\end_inset

Utility-Paket des BPEL-DM Plug-In Modells
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Im Paket 
\emph on
org.eclipse.bpel.simpl.model.util
\emph default
 (siehe Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:BPEL-DM-Plug-In Modell-Util"

\end_inset

) befinden sich Zubehörklassen wie Serializer und Deserializer.
 Letztgenannte übernehmen das Lesen bzw.
 Schreiben der DM-Aktivitäten aus bzw.
 in BPEL-Files.
 Serializer werden dafür von der Klasse 
\emph on
org.eclipse.bpel.model.extensions.BPELActivitySerializer
\emph default
 und Deserializer von der Klasse
\emph on
 org.eclipse.bpel.model.extensions.BPELActivityDerserializer
\emph default
 abgeleitet.
\end_layout

\begin_layout Subsubsection
BPEL-DM Plug-In Abfragesprachen-Erweiterung
\end_layout

\begin_layout Standard
Die Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:BPEL-DM-Plug-In Extension Modell"

\end_inset

 des Pakets 
\emph on
org.eclipse.bpel.simpl.ui.sql.editor
\emph default
 steht beispielhaft für eine Erweiterung des Statementeditors um die Abfragespra
che SQL.
 Die einzelnen Klassen dieses Pakets erben von der abstrakten Klasse 
\emph on
org.eclipse.bpel.simpl.ui.extensions.AStatementEditor
\emph default
 und realisieren die grafische Modellierung von elementaren SQL-Abfragen
 wie Select und Insert.
 Jede Erweiterung kann am Extension Point 
\emph on
org.eclipse.bpel.simpl.ui.queryLanguage
\emph default
 angeschlossen werden.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diagramme/iteration1/BPEL-DM Plug-In Extensions.png
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:BPEL-DM-Plug-In Extension Modell"

\end_inset

Klassendiagramm der BPEL-DM Plug-In SQL-Erweiterung
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
SIMPL Core Plug-In
\end_layout

\begin_layout Standard
Das SIMPL Core Plug-In kümmert sich um die Integration des SIMPL Menüs in
 die Eclipse Menüleiste und liefert die Admin-Konsole zur Verwaltung der
 Einstellungen des SIMPL Cores.
 In der Admin-Konsole können momentan Authentifizierungsinformationen (Benutzern
ame und Passwort) für Datenquellen hinterlegt, das Auditing aktiviert und
 deaktiviert und die Auditing Datenbank festgelegt werden.
 Nähere Informationen und einige Bilder des SIMPL Menüs und der Admin-Konsole
 liefert 
\begin_inset CommandInset citation
LatexCommand cite
key "key-2"

\end_inset

 (Kapitel 4.1).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diagramme/iteration1/SIMPL_Core_PlugIn.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:SIMPL-Core-Plug-In "

\end_inset

SIMPL Core Plug-In Klassendiagramm
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:SIMPL-Core-Plug-In "

\end_inset

 zeigt das Klassendiagramm des SIMPL Core Plug-Ins.
 Die zentrale Klasse dieses Plug-Ins ist die Klasse 
\emph on
AdminConsoleUI
\emph default
, die die Admin-Konsole erzeugt und deren Funktionalität liefert.
 Die Methode 
\emph on
createComposite()
\emph default
 erzeugt dafür die Composites der Admin-Konsolen Plug-Ins und mit 
\emph on
showComposite()
\emph default
 werden diese, entsprechend der Auswahl im Baum der Admin-Konsole, angezeigt.
 Die Methode 
\emph on
createSShell() 
\emph default
erzeugt die Admin-Konsole selbst und 
\emph on
fillTree()
\emph default
 füllt den Baum mit den entsprechenden Einträgen der Plug-Ins beim Öffnen
 der Admin-Konsole.
 Ebenso wichtig ist die Klasse 
\emph on
IAdminConsoleComposite
\emph default
, die die Schnittstelle der Admin-Konsolen Plug-In Composites definiert.
 Diese Klasse muss von jedem Plug-In implementiert werden.
 Die 
\emph on
getComposite()
\emph default
 und 
\emph on
setComposite()
\emph default
-Methoden werden dazu benötigt, die Plug-In Composites aus dem SIMPL Core
 Plug-In heraus zu verwalten.
 Die Methode 
\emph on
createComposite()
\emph default
 wird benötigt, um das entsprechende Composite des Plug-Ins aus der Klasse
 
\emph on
AdminConsoleUI
\emph default
 heraus zu erstellen.
 Die übrigen Methoden der Klasse werden dazu benötigt, die Einstellungen
 der Admin-Konsolen Plug-Ins über den SIMPL Core zu laden (
\emph on
loadSettings()
\emph default
), über den SIMPL Core zu speichern (
\emph on
saveSettings()
\emph default
), zu überprüfen ob sich die Einstellungen seit dem letzten Speichern geändert
 haben (
\emph on
haveSettingsChanged()
\emph default
) und um Einstellungen aus einem lokalen Buffer zu laden (
\emph on
loadSettingsFromBuffer()
\emph default
).
 Der lokale Buffer wird benötigt, um geänderte Einstellungen, die noch nicht
 gespeichert wurden, aber durch einen Wechsel des Einstellungspunktes der
 Admin-Konsole verloren gehen würden, zu sichern.
 Der Buffer wird dadurch realisiert, dass die Einstellungen in den entsprechende
n Composite-Klassen in Variablen hinterlegt werden und alle Composite-Klassen
 zentral in der Klasse 
\emph on
Application
\emph default
 verwaltet werden.
 
\end_layout

\begin_layout Standard
Die Klasse 
\emph on
Application
\emph default
 enthält nützliche Methoden zur Verwaltung der Admin-Konsolen Plug-Ins und
 dient gleichzeitig als lokaler Buffer für die Composite-Klassen der Plug-Ins.
 Sie ist als Singleton realisiert und kann über die 
\emph on
getInstance()
\emph default
-Methode verwendet werden.
 Die Methode 
\emph on
initApplication()
\emph default
 sorgt dafür, dass beim Laden des SIMPL Core Plug-Ins alle angebundenen
 Plug-In Composites erstellt werden und mit den im SIMPL Core hinterlegten
 Einstellungen gefüllt werden.
 Durch diesen Umstand muss nur einmal ein Ladevorgang auf dem SIMPL Core
 ausgeführt werden, da die Einstellungen dann im lokalen Buffer liegen und
 von dort gelesen werden können.
 Das Speichern der Einstellungen hingegen erfolgt direkt und erfordert,
 sofern sich Werte geändert haben, jedesmal eine Verbindung mit dem SIMPL
 Core.
 Die beiden Methoden 
\emph on
getTreeItems()
\emph default
 und 
\emph on
getTreeSubItems()
\emph default
 werden benötigt, um den Baum der Admin-Konsole aus den angebundenen Plug-Ins
 zu erstellen.
 Dazu wird auch die Klasse 
\emph on
Tuple
\emph default
 benötigt, die es ermöglicht jeden Eintrag in den Admin-Konsolen Baum mit
 einem Index zu versehen, so dass ein Plug-In Entwickler direkt darauf Einfluss
 nehmen kann, an welcher Stelle sein neuer Eintrag im Baum positioniert
 ist.
 Die Methode 
\emph on
sortTuple()
\emph default
 der Klasse 
\emph on
Application
\emph default
 sorgt dann dafür, dass die verschiedenen Plug-Ins bzw.
 deren Einträge für die Admin-Konsole nach den angegebenen Indizes sortiert
 wird.
 Sollte hier ein Index doppelt vergeben sein, so entscheidet sich die Reihenfolg
e durch die Initialisierungsfolge der einzelnen Plug-Ins durch Eclipse.
 Die Klasse 
\emph on
SimplHandler
\emph default
 sorgt dafür, dass falls der SIMPL Menüpunkt 
\begin_inset Quotes eld
\end_inset

Admin Console
\begin_inset Quotes erd
\end_inset

 ausgewählt wird, die Admin-Konsole geöffnet wird.
\end_layout

\begin_layout Standard
Die Admin-Konsole besteht nur aus Extension-Point-Erweiterungen, um eine
 größtmögliche Flexibilität hinsichtlich der späteren Nutzung zu erreichen.
 Das bedeutet, die Einträge, die bereits bei der Auslieferung von SIMPL
 in der Admin-Konsole vorhanden sind, wurden auch durch entsprechende Plug-Ins,
 die an diese Extension-Points angebunden sind, realisiert und können gegebenenf
alls leicht ausgetauscht werden.
 Weitere Einträge können über den Extension-Point 
\noun on
org.eclipse.simpl.core.adminConsoleItem
\noun default
 hinzugefügt werden.
 Bei der Auslieferung sind die Funktionen Auditing (
\emph on
org.eclipse.simpl.core.auditing
\emph default
) und Global Settings (
\emph on
org.eclipse.simpl.core.globalSettings
\emph default
) bereits durch Plug-Ins eingebunden.
\end_layout

\begin_layout Subsection
SIMPL Core Client Plug-In
\begin_inset Note Note
status open

\begin_layout Plain Layout
Muss noch überarbeitet werden
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Das SIMPL Core Client Plug-In stellt die Verbindung zu den SIMPL Core Web
 Services her und bietet den anderen Eclipse Plug-Ins damit die Möglichkeit,
 diese zu verwenden.
 Da sowohl das BPEL-DM Plug-In als auch das SIMPL Core Plug-In mit dem SIMPL
 Core kommunizieren, wird der SIMPL Core Client als eigenständiges Plug-In
 realisiert.
 Die Funktionalität für den Zugriff auf die Web Services wird mit Hilfe
 des Befehls wsimport (..
\backslash
Java
\backslash
jdk1.6.0_14
\backslash
bin
\backslash
wimport.exe) über die WSDL-Schnittstellen generiert und wird um die Serialisierun
g und Deserialisierung der komplexen Parameter erweitert.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:RRS-Eclipse-Plug-In"

\end_inset

RRS Eclipse Plug-In
\end_layout

\begin_layout Standard
Das RRS Eclipse Plug-In besteht zum Einen aus einem Modell der Endpunkt-Referenz
en (EPR) und zum Anderen aus einem Eclipse View, in dem EPRs mehrerer RRS
 verwaltet werden können.
 In den folgenden zwei Abschnitten wird zuerst das den EPRs zugrundeliegende
 Modell bzw.
 dessen Implementierung näher erläutert und anschließend die Umsetzung deren
 Verwaltung über eine Eclipse View beschrieben.
\end_layout

\begin_layout Subsubsection
RRS Eclipse Plug-In Modell
\end_layout

\begin_layout Standard
Um den Implementierungsaufwand gering und die Erweiterbarkeit bzw.
 Änderbarkeit des EPR-Datenmodells möglichst hoch und einfach zu halten,
 wurde auch für dieses Eclipse Plug-In ein EMF-Modell zur Modellierung der
 EPRs erstellt (vgl.
 Beschreibung des BPEL-DM Plug-Ins in Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:BPEL-DM-Plug-In"

\end_inset

).
 Dadurch ist es möglich Änderungen im EMF-Modell durchzuführen und die Implement
ierung des Modells automatisch neu zu generieren.
 Die momentane Struktur des EPR-Modells zeigt Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:RRS-Plug-In-Model"

\end_inset

.
 Im Folgenden wird auf die einzelnen Pakete bzw.
 deren Klassen näher eingegangen.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diagramme/iteration2/RRSPlugInModel.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:RRS-Plug-In-Model"

\end_inset

Klassendiagramm des Modells des RRS Eclipse Plug-Ins
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
org.eclipse.simpl.rrs.model
\end_layout

\begin_layout Standard
Die Klasse 
\emph on
ModelProvider
\emph default
 hält alle EPRs, die in der RRS View angezeigt werden.
 Sie ist der globale Zugriffpunkt für die vorhandenen EPRs und den in diesen
 enthaltenen Daten.
\end_layout

\begin_layout Subsubsection*
org.eclipse.simpl.rrs.model.reference
\end_layout

\begin_layout Standard
Dieses Paket enthält alle Klassen des EPR-(EMF-)Modells.
 Das Modell beruht dabei auf der, in 
\begin_inset CommandInset citation
LatexCommand cite
key "key-2"

\end_inset

 Kapitel 7.1.2, vorgegebenen Struktur einer EPR.
 Die Klassen 
\emph on
ReferenceFactory
\emph default
 (Interface) und 
\emph on
ReferencePackage
\emph default
 (Interface) erben von den Klassen 
\emph on
org.eclipse.emf.ecore.EFactory
\emph default
 und 
\emph on
org.eclipse.emf.ecore.EPackage
\emph default
 und werden benötigt, um Objekte des Modells zu erzeugen (Factory), wie
 z.B.
 ein 
\emph on
EPR
\emph default
-Objekt und um Objekte des Modells zu verwalten (Package), wie z.B.
 das Auslesen der Adresse eines 
\emph on
EPR
\emph default
-Objekts.
\end_layout

\begin_layout Subsubsection*
org.eclipse.simpl.rrs.model.reference.impl
\end_layout

\begin_layout Standard
Dieses Paket enhält die Implementierungen der verschiedenen Modell-Klassen
 des Pakets 
\emph on
org.eclipse.simpl.rrs.model.reference.
\end_layout

\begin_layout Subsubsection*
org.eclipse.simpl.rrs.model.reference.util
\end_layout

\begin_layout Standard
Dieses Paket enthält durch EMF automatisch generierte Zubehörklassen, die
 dazu verwendet werden können, Modellobjekte zu (de)serialisieren.
 Dazu werden mit der Klasse 
\emph on
ReferenceResourceFactoryImpl
\emph default
, die von der Klasse 
\emph on
org.eclipse.emf.ecore.resource.impl.ResourceFactoryImpl
\emph default
 erbt, Objekte der Klasse 
\emph on
ReferenceResourceImpl
\emph default
, die von der Klasse 
\emph on
org.eclipse.emf.ecore.xmi.impl.XMLResourceImpl
\emph default
 erbt, erzeugt.
 Die so erzeugten Objekte der Klasse 
\emph on
ReferenceResourceImpl
\emph default
 können dann, über die Klasse 
\emph on
ReferenceFactory
\emph default
 erstellte, EPRs aufnehmen und diese im XML-Format serialisieren.
 Ebenso können so in XML hinterlegte EPRs wieder in Objekte der Klasse 
\emph on
EPR
\emph default
 deserialisiert werden.
 Mithilfe dieser Klassen können die in den EPRs enthaltenen Daten relativ
 einfach aus XML in Modell-Objekte und umgekehrt überführt werden.
 Dies hat den entscheidenden Vorteil, dass in Eclipse die Modellklassen
 verwendet werden können und für den Transport bzw.
 das Laden und Speichern der EPRs eine XML-Repräsentation ohne explizite
 Implementierung erstellt werden kann.
\end_layout

\begin_layout Subsubsection
RRS Eclipse Plug-In User Interface
\end_layout

\begin_layout Standard
Diese Komponente des RRS Eclipse Plug-Ins sorgt dafür, dass in Eclipse ein
 neuer View bereitgestellt wird, mit dessen Hilfe EPRs aus verschiedenen
 RRS angezeigt und verwaltet werden können.
 Zur Verwaltung gehört das Anlegen von neuen EPRs sowie das Bearbeiten und
 Löschen vorhandener EPRs.
 Die grundlegende Struktur der Implementierung des User Interfaces zeigt
 Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:RRS-Plug-In-UI"

\end_inset

.
 Im Folgenden wird auf die einzelnen Pakete bzw.
 deren Klassen näher eingegangen.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diagramme/iteration2/RRSPlugInUI.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:RRS-Plug-In-UI"

\end_inset

Klassendiagramm des User Interfaces des RRS Eclipse Plug-Ins
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
org.eclipse.simpl.rrs.ui.dialogs
\end_layout

\begin_layout Standard
Dieses Paket enthält die beiden Klassen 
\emph on
AddReferenceDialog
\emph default
 und 
\emph on
EditReferenceDialog
\emph default
, die die Klasse 
\emph on
org.eclipse.jface.dialogs.TitleAreaDialog
\emph default
 erweitern.
 Die Klasse 
\emph on
AddReferenceDialog
\emph default
 wird dazu verwendet, einen Dialog für das Anlegen neuer EPRs bereitszustellen.
 Die Klasse 
\emph on
EditReferenceDialog
\emph default
 stellt dazu analog einen Dialog für das Editieren von EPRs bereit.
\end_layout

\begin_layout Subsubsection*
org.eclipse.simpl.rrs.ui.commands
\end_layout

\begin_layout Standard
Dieses Paket enthält drei Klassen, die die Schnittstelle 
\emph on
org.eclipse.core.commands.IHandler
\emph default
 implementieren.
 Diese werden dazu benötigt, um auf entsprechende Commands zu reagieren,
 die mit Toolbar- bzw.
 Menüeinträgen des RRS View verknüpft sind und bei der Auswahl eines solchen
 Eintrags angestoßen werden.
 Die Klasse 
\emph on
AddEPRHandler
\emph default
 sorgt dafür, dass bei der Auswahl des Add-Menüeintrags der AddEPR-Dialog
 geöffnet wird.
 Die Klasse 
\emph on
EditEPRHandler
\emph default
 sorgt entsprechend dafür, dass bei der Auswahl des Edit-Menüeintrags der
 EditEPR-Dialog geöffnet wird.
 Die Klasse 
\emph on
RemoveEPRHandler
\emph default
 sorgt dafür, dass alle in der View ausgewählten EPRs gelöscht werden.
 
\end_layout

\begin_layout Subsubsection*
org.eclipse.simpl.rrs.ui.view
\end_layout

\begin_layout Standard
Dieses Paket enthält alle Klassen, die für Einbindung der RRS View in Eclipse
 benötigt werden.
 Die Klasse 
\emph on
ReferenceManagementView
\emph default
 erweitert dafür die Klasse 
\emph on
org.eclipse.ui.part.ViewPart
\emph default
 und sorgt somit für die Darstellung des RRS Views und die Visualisierung
 aller EPRs eines RRS in einer Tabelle innerhalb des Views.
 Die Klasse 
\emph on
ReferenceContentProvider
\emph default
 implementiert die Schnittstelle 
\emph on
org.eclipse.jface.viewers.IStructuredContentProvider
\emph default
 und sorgt dafür, dass die EPRs, aus dem Modell, der View zugänglich gemacht
 werden.
 Die Klasse 
\emph on
ReferenceLabelProvider
\emph default
 erweitert die Klasse 
\emph on
org.eclipse.jface.viewers.LabelProvider
\emph default
 und sorgt dafür, dass die einzelnen Daten der EPRs in der View entsprechend
 angezeigt werden, d.h.
 in dieser Klasse wird definiert, wie die über den 
\emph on
ReferenceContentProvider
\emph default
 bereitgestellten EPR-Objekte ausgelesen werden sollen und welche Daten
 überhaupt in der View angezeigt werden sollen.
\end_layout

\begin_layout Subsubsection*
org.eclipse.simpl.rrs.ui.view.filter
\end_layout

\begin_layout Standard
Die Klasse 
\emph on
ReferenceFilter
\emph default
 erweitert die Klasse 
\emph on
org.eclipse.jface.viewers.ViewerFilter
\emph default
 und liefert die Möglichkeit die in der View angezeigten EPRs zu filtern,
 d.h.
 die EPRs nach entsprechenden Zeichenfolgen zu durchsuchen und nur solche
 anzuzeigen, die die Zeichenfolge enthalten.
\end_layout

\begin_layout Subsubsection*
org.eclipse.simpl.rrs.ui.view.sorter
\end_layout

\begin_layout Standard
Die Klasse 
\emph on
TableSorter
\emph default
 erweitert die Klasse 
\emph on
org.eclipse.jface.viewers.ViewerSorter
\emph default
 und liefert die Möglichkeit die im View angezeigten EPRs zu sortieren,
 d.h.
 die EPRs können nach jeder beliebigen Spalte des RRS Views auf- oder absteigend
 sortiert werden.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:UDDI-Eclipse-Plug-In"

\end_inset

UDDI Eclipse Plug-In
\end_layout

\begin_layout Standard
Das UDDI Eclipse Plug-In ist analog zum RRS Eclipse Plug-In aufgebaut, mit
 der Einschränkung, dass es nur für die Betrachtung von UDDI-Einträgen verwendet
 werden kann und eine Verwaltung dieser nicht über das Plug-In in Eclipse
 realisiert wird.
 Für die Verwaltung wird ein spezielles Web Interface bereitgestellt, dass
 in Kapitel XYZ 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Referenz noch einfügen, sobald das Kapitel vorhanden ist
\end_layout

\end_inset

 näher beschrieben wird.
\end_layout

\begin_layout Standard
Die in der UDDI-Registry hinterlegten Datenquellen werden für die Darstellung
 im UDDI Browser View, der durch dieses Plug-In bereitgestellt wird, über
 eine entsprechende EMF-Modell Implementierung repräsentiert.
 Die grundlegende Struktur der Implementierung des gesamten Plug-Ins zeigt
 Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:UDDI-Plug-In"

\end_inset

.
 Im Folgenden wird auf die einzelnen Pakete bzw.
 deren Klassen näher eingegangen.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diagramme/iteration2/UDDIEclipsePlugIn.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:UDDI-Plug-In"

\end_inset

UDDI Eclipse Plug-In Klassendiagramm
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
org.eclipse.simpl.uddi.model
\end_layout

\begin_layout Standard
Die Klasse 
\emph on
ModelProvider
\emph default
 hält alle Datenquellen (DataSource-Objekte), die in der UDDI View angezeigt
 werden.
 Sie ist der globale Zugriffpunkt für die vorhandenen Datenquellen.
\end_layout

\begin_layout Subsubsection*
org.eclipse.simpl.uddi.model.datasource
\end_layout

\begin_layout Standard
Dieses Paket enthält alle Klassen des Datenquellen-(EMF-)Modells.
 Das Modell beruht dabei auf der Modellierung einer Datenquelle anhand vordefini
erter Eigenschaften, wie z.B.
 dem Datenquellentyp (Dateisystem, RDB, usw.) oder Abfragesprache (SQL, XQuery,
 usw.).
 Die Klassen 
\emph on
DatasourceFactory
\emph default
 (Interface) und 
\emph on
DatasourcePackage
\emph default
 (Interface) erben von den Klassen 
\emph on
org.eclipse.emf.ecore.EFactory
\emph default
 und 
\emph on
org.eclipse.emf.ecore.EPackage
\emph default
 und werden benötigt, um Objekte des Modells zu erzeugen (Factory), wie
 z.B.
 ein 
\emph on
DataSource
\emph default
-Objekt und um Objekte des Modells zu verwalten (Package), wie z.B.
 das Auslesen des Typs eines 
\emph on
DataSource
\emph default
-Objekts.
\end_layout

\begin_layout Subsubsection*
org.eclipse.simpl.uddi.model.datasource.impl
\end_layout

\begin_layout Standard
Dieses Paket enhält die Implementierungen der verschiedenen Modell-Klassen
 des Pakets 
\emph on
org.eclipse.simpl.uddi.model.datasource.
\end_layout

\begin_layout Subsubsection*
org.eclipse.simpl.uddi.model.datasource.util
\end_layout

\begin_layout Standard
Dieses Paket enthält durch EMF automatisch generierte Standardklassen, die
 für die Verwendung des Modells benötigt werden.
\end_layout

\begin_layout Subsubsection*
org.eclipse.simpl.uddi.view
\end_layout

\begin_layout Standard
Dieses Paket enthält alle Klassen, die für Einbindung der UDDI View in Eclipse
 benötigt werden.
 Die Klasse 
\emph on
UDDIBrowserView
\emph default
 erweitert dafür die Klasse 
\emph on
org.eclipse.ui.part.ViewPart
\emph default
 und sorgt somit für die Darstellung des UDDI Views und die Visualisierung
 aller hinterlegter Datenquellen einer UDDI-Registry in einer Tabelle innerhalb
 des Views.
 Die Klasse 
\emph on
UDDIContentProvider
\emph default
 implementiert die Schnittstelle 
\emph on
org.eclipse.jface.viewers.IStructuredContentProvider
\emph default
 und sorgt dafür, dass die Datenquellen, aus dem Modell, der View zugänglich
 gemacht werden.
 Die Klasse 
\emph on
UDDILabelProvider
\emph default
 erweitert die Klasse 
\emph on
org.eclipse.jface.viewers.LabelProvider
\emph default
 und sorgt dafür, dass die einzelnen Informationen der Datenquellen in der
 View entsprechend angezeigt werden, d.h.
 in dieser Klasse wird definiert, wie die über den 
\emph on
UDDIContentProvider
\emph default
 bereitgestellten DataSource-Objekte ausgelesen werden sollen und welche
 Daten überhaupt in der View angezeigt werden sollen.
\end_layout

\begin_layout Subsubsection*
org.eclipse.simpl.uddi.view.filter
\end_layout

\begin_layout Standard
Die Klasse 
\emph on
DataSourceFilter
\emph default
 erweitert die Klasse 
\emph on
org.eclipse.jface.viewers.ViewerFilter
\emph default
 und liefert die Möglichkeit die in der View angezeigten Datenquellen zu
 filtern, d.h.
 die Informationen der Datenquellen nach entsprechenden Zeichenfolgen zu
 durchsuchen und nur solche Datenquellen anzuzeigen, deren Informationen
 die Zeichenfolge enthalten.
\end_layout

\begin_layout Subsubsection*
org.eclipse.simpl.uddi.view.sorter
\end_layout

\begin_layout Standard
Die Klasse 
\emph on
TableSorter
\emph default
 erweitert die Klasse 
\emph on
org.eclipse.jface.viewers.ViewerSorter
\emph default
 und liefert die Möglichkeit die im View angezeigten Datenquellen zu sortieren,
 d.h.
 die Datenquellen können nach jeder beliebigen Spalte des UDDI Views auf-
 oder absteigend sortiert werden.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Kommunikation"

\end_inset

Kommunikation
\end_layout

\begin_layout Standard
In diesem Kapitel werden die Kommunikation zwischen den Komponenten des
 SIMPL Rahmenwerks beschrieben und wichtige Abläufe deutlich gemacht.
\end_layout

\begin_layout Standard
In Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Kommunikation-im-SIMPL"

\end_inset

 wird die Kommunikation zwischen den Komponenten mit entsprechenden Funktionsauf
rufen gezeigt.
 Über das SIMPL Core Client Plug-In wird die Kommunikation der anderen SIMPL
 Eclipse Plug-Ins zum SIMPL Core hergestellt.
 Über die Web Services des SIMPL Cores werden Metadaten zu Datenquellen
 angefordert (11, 21: getDatasourceMetaData) und Einstellungen gespeichert
 (2: saveSettings) und geladen (1: loadSettings).
 Dazu werden von den Web Services die Dienste des SIMPL Cores verwendet
 und die Anfragen entsprechend weitergeleitet.
 Apache ODE kann die Dienste des SIMPL Cores direkt ansprechen, da sich
 der SIMPL Core im Classpath von Apache ODE befindet.
 Dort werden die DM-Aktivitäten (DM-Activities) über den DatasourceService
 ausgeführt, wozu die drei Methoden manipulateData, defineData und queryData
 (19, 18, 14) zur Verfügung stehen, die in Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Datasource-Service"

\end_inset

 bereits beschrieben wurden.
 Für das SIMPL Auditing benötigen die SIMPL DAOs ebenfalls Zugriff auf den
 DatasourceService, um die Auditing Daten zu speichern.
 Die Auditing Daten entstehen unter anderem bei der Ausführung der DM-Aktivitäte
n (13: auditing) und lösen eine Speicherung über die SIMPL DAOs aus (16:
 saveData).
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diagramme/iteration1/SIMPLRahmenwerkKommunikation.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Kommunikation-im-SIMPL"

\end_inset

Kommunikation im SIMPL Rahmenwerk
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{section}{Literaturverzeichnis}
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "SIMPLGrobE"
key "key-1"

\end_inset


\shape italic
Grobentwurf v1.5
\shape default
.

\shape italic
 
\shape default
Stupro-A SIMPL (2009)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "SIMPLSpez"
key "key-2"

\end_inset


\emph on
Spezifikation v2.3
\emph default
.
 Stupro-A SIMPL (2009) 
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{section}{Abkürzungsverzeichnis}
\end_layout

\end_inset


\end_layout

\begin_layout Section*

\series bold
\size larger
Abkürzungsverzeichnis
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="12" columns="2">
<features>
<column alignment="left" valignment="top" width="2cm">
<column alignment="left" valignment="top" width="10cm">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
API
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Application Programming Interface
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
BPEL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Business Process Execution Language
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DAO
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data Access Object
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DM
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data-Management
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GUI
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Graphical User Interface
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
JAX-WS
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Java API for XML - Web Services
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ODE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Orchestration Director Engine
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SDO
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Service Data Object
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SIMPL 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SimTech: Information Management, Processes and Languages
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SQL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Structured Query Language
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
UML
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unified Modeling Language
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
WS
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Web Service
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{section}{Abbildungsverzeichnis}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList figure

\end_inset


\end_layout

\end_body
\end_document
