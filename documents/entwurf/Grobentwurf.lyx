#LyX 1.6.3 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\begin_preamble





\usepackage{babel}

%Packages für eigen definierte Header und Footer
\usepackage{lastpage}
\usepackage{fancyhdr}

% doctitel = Titel des Dokuments
% docvers = Versionsnr.
% docautor = Author(en)
% docdate = Datum der letzten Änderung
\def\doctitel{Grobentwurf}
\def\docvers{1.0}
\def\docautor{Michael Schneidt}
\def\docdate{11. November 2009}

% docstate = Status des Dokuments aus {neu, bearbeitet}
% qsstate = QS-Prüfungsstatus aus {positiv QS-geprüft, negativ QS-geprüft, verworfen}
% proofstate = Prüfungsstatus (durch Projektleiter) aus {positiv geprüft, negativ geprüft, verworfen}
% reviewstate = Annahmestatus des Reviews {kein Review durchgeführt, akzeptiert ohne Änderungen, akzeptiert mit Änderungen, nicht akzeptiert}
% endstate = Endstatus des Dokuments aus {freigegeben, verworfen}
\def\docstate{neu}
\def\qsstate{nicht QS-geprüft}
\def\proofstate{nicht geprüft}
\def\reviewstate{kein Review durchgeführt}
\def\endstate{-}

%Nicht einrücken
%\setlength{\parindent}{0pt}
\end_preamble
\use_default_options false
\language ngerman
\inputencoding latin9
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_amsmath 0
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 3cm
\topmargin 3cm
\rightmargin 3cm
\bottommargin 3cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "Deckblatt.lyx"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand input
filename "DokStatus.lyx"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%Header und Footer Definitionen für alle anderen Seiten
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
pagestyle
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

fancy
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset FormulaMacro
\renewcommand{\headrulewidth}{0mm}
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
lhead
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
chead
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
rhead
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
lfoot
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\size small
SIMPL © 2009 $IMPL
\size default

\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
cfoot
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
rfoot
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\size small

\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
thepage
\end_layout

\end_inset


\begin_inset space \space{}
\end_inset

/ 
\begin_inset CommandInset ref
LatexCommand pageref
reference "LastPage"

\end_inset


\size default

\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%Ab hier beginnt das Dokument
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
Änderungsgeschichte
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="11" columns="4">
<features>
<column alignment="left" valignment="top" width="2cm">
<column alignment="left" valignment="top" width="3cm">
<column alignment="left" valignment="top" width="3cm">
<column alignment="left" valignment="top" width="6cm">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Version
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Datum
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Autor
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Änderungen
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
29.10.2009
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
schneimi
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Erstellung des Dokuments
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
30.10.2009
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
schneimi
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Kapitel 1 erstellt
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
04.11.2009
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
schneimi
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Kapitel 2, Kapitel 3.3 erstellt
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
07.11.2009
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
schneimi
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Kapitel 4 erstellt
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
09.11.2009
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
rehnre
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Kapitel 3.2 erstellt
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
09.11.2009
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
bruededl
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Kapitel 3.1 erstellt
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
11.11.2009
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
schneimi
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Korrektur nach internem Review
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20.11.2009
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
schneimi
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Überarbeitung nach Kundenreview
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
05.12.2009
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
schneimi
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Neue Schaubilder und Beschreibungen
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
07.12.2009
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
zoabi,bruededl
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Kapitel 3.1
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Einleitung
\end_layout

\begin_layout Standard
Dieses Kapitel soll dem Leser einen Überblick über das SIMPL Rahmenwerk
 geben und dessen Zweck, die damit verbundenen Anforderungen und die eingesetzte
n Entwurfsprinzipien erläutern.
 Die Struktur und der Aufbau des Dokuments orientieren sich dabei an der
 Entwurfsvorlage 
\begin_inset CommandInset citation
LatexCommand cite
key "key-1"

\end_inset

 von Markus Knauß.
\end_layout

\begin_layout Subsection
Zweck des Dokuments
\end_layout

\begin_layout Standard
Der Grobentwurf beschreibt das Rahmenwerk auf Komponentenebene und bildet
 die Grundlage für den späteren Feinentwurf.
 Es werden alle wichtigen Komponenten und ihre Schnittstellen identifiziert,
 sowie ihr Zusammenspiel beschrieben.
 Damit soll gezeigt werden, dass das resultierende System funktionieren
 kann und den Anforderungen gerecht wird.
 Damit die in späteren Iterationen dazukommenden Funktionalitäten schon
 beim Feinentwurf berücksichtigt werden, wird soweit es möglich ist das
 Gesamtsystem beschrieben und inhaltlich nicht zwischen den einzelnen Iteratione
n unterschieden.
 Teile die erst in späteren Iterationen spezifiziert werden können, werden
 explizit kenntlich gemacht.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Das-SIMPL-Rahmenwerk"

\end_inset

Das SIMPL Rahmenwerk
\end_layout

\begin_layout Standard
Das SIMPL Rahmenwerk soll dem Benutzer eine erweiterbare Umgebung bieten,
 die eine einfache Modellierung von Simulationsworkflows auf Basis von BPEL
 mit generischem Zugriff auf beliebige Datenquellen ermöglicht.
 Bei den Datenquellen kann es sich beispielsweise um Datenbanken, Sensornetze
 oder Dateisysteme handeln.
 Die Modellierung der Prozesse findet in Eclipse mit dem Eclipse BPEL Designer
 Plug-In statt, das für diesen Zweck um zusätzliche Aktivitäten für den
 Zugriff auf Datenquellen und die Definition von Datamangement-Operationen
 innerhalb des Prozesses erweitert wird.
 Diese Aktivitäten werden im folgenden Verlauf des Dokuments als Data-Management
-Aktivitäten bzw.
 DM-Aktivitäten bezeichnet.
 Die Ausführung der Prozesse erfolgt durch die Apache ODE Workflow Engine,
 die für diese Aktivitäten erweitert werden muss.
 Zusätzlich werden das bestehende Event-Modell und das Auditing der Prozessdaten
 für die DM-Aktivitäten angepasst.
 Die Dienste, die für die Ausführung der DM-Aktivitäten von der Workflow
 Engine benötigt werden, werden in Form von Web Services bereitgestellt.
 Durch ein weiteres Plug-In für Eclipse sollen außerdem Referenzvariablen
 bei der Modellierung von Prozessen unterstützt werden und diese durch eine
 entsprechende Modelltransformation auch auf anderen Workflow Engines einsetzbar
 bleiben.
\end_layout

\begin_layout Subsection
Anforderungen
\end_layout

\begin_layout Standard
In diesem Abschnitt werden die Anforderungen des SIMPL Rahmenwerks beschrieben.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Einfache-Modellierung"

\end_inset

Einfache Modellierung
\end_layout

\begin_layout Standard
Neben der vereinfachten Modellierung der DM-Aktivitäten, gibt es eine weitere
 Anforderung.
 Während der Modellierung von Prozessen wiederholen sich in der Regel häufig
 längere Befehle (Statements) oder Befehlsteile in Anfragesprachen wie SQL
 oder XQuery und auch längere Namen von Datenquellen oder Datencontainern
 (Tabellen, Dateien, XML-Dokumente, etc).
 Damit diese vom Prozess-Modellierer nicht jedes mal vollständig angegeben
 werden müssen, soll es die Möglichkeit geben, diese in BPEL-Variablen zu
 hinterlegen.
 Diese BPEL-Variablen können anschließend als Referenzen in anderen Befehlen
 verwendet werden.
 Durch die Modularisierung der Befehle sind insbesondere komplexe und geschachte
lte Datenbankmanagementoperationen einfacher zu modellieren und die Komplexität
 wird reduziert.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Große-Datenmengen"

\end_inset

Große Datenmengen
\end_layout

\begin_layout Standard
Der Schwerpunkt des Rahmenwerks liegt in der Modellierung von wissenschaftlichen
 Prozessen, bei denen überwiegend mit großen Datenmengen gearbeitet wird.
 Damit diese Datenmengen nicht innerhalb des Prozesses gehalten werden müssen,
 wird ein Reference Resolution System (RRS) realisiert.
 Damit wird es möglich, Daten zu referenzieren, sie per Referenz sehr schnell
 weiterzugeben und nur bei Bedarf aufzulösen und in den Prozess zu laden.
 Weiterhin können auch innerhalb der DM-Aktivitäten Datenquellen bzw.
 Datencontainer per Referenz angeben werden.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Auditing-von-Prozessen"

\end_inset

Auditing von Prozessen
\end_layout

\begin_layout Standard
Beim Auditing von Prozessen handelt es sich um das Protokollieren von Prozessdat
en, wie z.B.
 dem Status einer Variable oder aufgetretene Events, die unter Anderem ein
 Monitoring der Prozesse ermöglichen.
 Apache ODE besitzt bereits ein internes Auditing, bei dem Prozessdaten
 persistent gespeichert werden.
 Das interne Auditing muss für die zusätzlichen DM-Aktivitäten angepasst
 werden, und der Benutzer soll außerdem die Möglichkeit bekommen, die Granularit
ät der Protokollierung zu bestimmen.
 Zusätzlich soll die interne Datenspeicherung auf eine beliebige externe
 Datenquelle umgeleitet werden können.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Late-Binding-von"

\end_inset

Late Binding von Datenquellen
\end_layout

\begin_layout Standard
Da bei der Modellierung nicht immer feststeht, auf welche Datenquelle zugegriffe
n wird, beispielsweise beim Ablegen von Daten, soll das Late Binding von
 Datenquellen unterstützt werden.
 Damit kann durch die Formulierung von Anforderungen an die Datenquelle
 und das Wählen einer Auswahlstrategie durch den Prozess-Modellierer eine
 passende Datenquelle automatisch zur Laufzeit bestimmt werden.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Authentifizierung-und-Autorisierung"

\end_inset

Authentifizierung und Autorisierung
\end_layout

\begin_layout Standard
Datenquellen erfordern in der Regel eine Authentifizierung und Autorisierung
 des Benutzers bei einem Zugriff.
 Das Rahmenwerk soll dem Prozess-Modellierer diesen Vorgang vereinfachen,
 so dass die dafür benötigten Informationen wie z.B.
 Benutzername und Passwort nicht bei jedem Zugriff erneut angegeben werden
 müssen.
 Dazu soll das Konzept des Single Sign On (SSO) angeboten bzw.
 unterstützt werden.
 (siehe 
\begin_inset CommandInset citation
LatexCommand cite
key "key-5"

\end_inset

, Kapitel 7.2.1)
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Registry"

\end_inset

Registry
\end_layout

\begin_layout Standard
Für die Verwaltung der für den Prozess-Modellierer zur Verfügung stehenden
 Datenquellen, ist eine zentrale Registry vorgesehen, in der die Datenquellen
 von Datenquellen-Administratoren definiert werden können.
 Dort werden auch die entsprechenden Eigenschaften der Datenquellen hinterlegt,
 die für das Late Binding benötigt werden.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Admin-Konsole"

\end_inset

Admin-Konsole
\end_layout

\begin_layout Standard
Für alle wichtigen Einstellungen des Rahmenwerks soll eine Admin-Konsole
 bereitgestellt werden, über die der Workflow-Administrator Einstellungen
 treffen kann.
 Dies betrifft vor allem alle Einstellungen die auch zur Laufzeit getätigt
 werden können, wie z.B.
 das Aktualisieren von Referenzen.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Erweiterbarkeit"

\end_inset

Erweiterbarkeit
\end_layout

\begin_layout Standard
Das Rahmenwerk stellt folgende Anforderungen an die Erweiterbarkeit und
 soll dafür entsprechende Zugriffspunkte bereitstellen:
\end_layout

\begin_layout Itemize
Anbindung weiterer Datenquellentypen und damit weiterer Konzepte für den
 Zugriff, sowie Anfragesprachen
\begin_inset Note Note
status open

\begin_layout Plain Layout
noch querverweisen, muss klar werden dass das über Plug-Ins realisiert wird
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Erweiterung der Funktionalität des Rahmenwerks durch Integration neuer Dienste
 die ggf.
 nur bereits vorhandenen Dienste benutzen
\end_layout

\begin_layout Itemize
Unterstützung weiterer Anfragesprachen
\end_layout

\begin_layout Itemize
Erweiterung um neue DM-Aktivitätstypen
\end_layout

\begin_layout Itemize
Erweiterung um neue Events für das Auditing
\end_layout

\begin_layout Itemize
Unterstützung weiterer Authentifizierungs- und Autorisierungsverfahren
\end_layout

\begin_layout Itemize
Unterstützung weiterer Registries für Datenquellen
\end_layout

\begin_layout Itemize
Erweiterung um zusätzliche Unterpunkte für die Admin-Konsole
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Verwendbarkeit"

\end_inset

Verwendbarkeit
\end_layout

\begin_layout Standard
Die Aktivitäten, die für SIMPL entwickelt werden, sollen auch auf anderen
 BPEL Workflow-Engines ausführbar sein.
 Dazu müssen die bei der Modellierung verwendeten Referenzen in standard-konform
en BPEL-Code transformiert werden.
 Eine zusätzliche Anforderung ist, dass die von SIMPL bereitgestellten Web
 Services auf verschiedenen Web Containern lauffähig sein müssen.
\end_layout

\begin_layout Subsection
Entwurfsprinzipien
\end_layout

\begin_layout Standard
In diesem Abschnitt werden die Prinzipien beschrieben, die für den Entwurf
 angewendet werden.
 (vgl.
 
\begin_inset CommandInset citation
LatexCommand cite
key "key-2"

\end_inset

, Kapitel 17)
\end_layout

\begin_layout Subsubsection
Offenes Rahmenwerk
\end_layout

\begin_layout Standard
Das SIMPL Rahmenwerk ist größtenteils ein offenes Rahmenwerk.
 Offen bedeutet, es gibt keine einheitliche Schnittstelle für alle Erweiterungen.
 Daher können viele Erweiterungen nicht ohne technisches Verständnis und
 Wissen über die Mechanismen und Abläufe des Rahmenwerks realisiert werden.
 Die Erweiterungsmöglichkeiten werden daher ausführlich dokumentiert und
 Beispiele erstellt, mit denen die Umsetzung eigener Erweiterungen erleichtert
 wird.
 Bereiche des Rahmenwerks, bei denen im Laufe des Projekts ausreichend Erfahrung
 gesammelt wurde, werden wenn möglich in geschlossener Form für die Entwicklung
 bereitgestellt.
\end_layout

\begin_layout Subsubsection
Modularisierung
\end_layout

\begin_layout Standard
Durch die Modularisierung werden die Komponenten in einfache und leicht
 verständliche Teile gegliedert.
 Die Realisierungsdetails eines Moduls werden nach dem Prinzip des Information
 Hiding versteckt und die Dienste nur über eine Schnittstelle angeboten.
 Ziel ist es, später Module ändern oder austauschen zu können, möglichst
 ohne dabei die Schnittstellen ändern zu müssen und damit Auswirkungen auf
 andere Module zu verursachen.
\end_layout

\begin_layout Subsubsection
Kopplung und Zusammenhalt
\end_layout

\begin_layout Standard
Beim Entwurf der Module wird darauf geachtet, dass die Kopplung zu anderen
 Modulen möglichst gering ist, und dass der Zusammenhalt innerhalb eines
 Moduls möglichst hoch ist.
 Durch dieses Vorgehen wird eine hohe Lokalität und damit gute Wartbarkeit
 erreicht, da sich Fehler, die bei Änderungen entstehen, nicht im System
 fortpflanzen können.
\end_layout

\begin_layout Subsubsection
Entwicklungsrichtung
\end_layout

\begin_layout Standard
Die Entwicklung wird Top-down durchgeführt.
 Dabei wird die Aufgabe des Rahmenwerks rekursiv bis zur elementaren Ebene
 (der Programmiersprache) in Teilaufgaben zerlegt und damit schrittweise
 verfeinert.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Plug-In"

\end_inset

Plug-In
\end_layout

\begin_layout Standard
Plug-Ins sind externe Software-Einheiten, durch die das Rahmenwerk um zusätzlich
e Funktionalität erweitert werden kann.
 Das Rahmenwerk bietet dafür entsprechende Zugriffspunkte an, an denen die
 Plug-Ins angeschlossen werden können.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Adapter"

\end_inset

Adapter
\end_layout

\begin_layout Standard
Adapter bzw.
 Konnektoren sind interne Verbindungsstücke.
 Sie werden dort entwickelt wo Komponenten angebunden werden sollen, deren
 Schnittstellen nicht zu den vorhandenen Schnittstellen des Rahmenwerks
 passen.
\end_layout

\begin_layout Subsection
Überblick über den Grobentwurf
\end_layout

\begin_layout Standard
Der Grobentwurf gliedert sich in die folgenden weiteren Kapitel.
\end_layout

\begin_layout Itemize
Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Architektur"

\end_inset

 
\begin_inset Quotes eld
\end_inset

Architektur
\begin_inset Quotes erd
\end_inset

 beschreibt die Architektur des Rahmenwerks.
 Das Rahmenwerk wird in überschaubare Komponenten gegliedert, die jeweils
 genau definierte Funktionen erfüllen.
\end_layout

\begin_layout Itemize
Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Komponenten"

\end_inset

 
\begin_inset Quotes eld
\end_inset

Komponenten
\begin_inset Quotes erd
\end_inset

 beschreibt die im Kapitel 
\begin_inset Quotes eld
\end_inset

Architektur
\begin_inset Quotes erd
\end_inset

 genannten Komponenten und definiert ihre Schnittstellen.
\end_layout

\begin_layout Itemize
Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Schnittstellen"

\end_inset

 
\begin_inset Quotes eld
\end_inset

Schnittstellen
\begin_inset Quotes erd
\end_inset

 beschreibt die in Kapitel 
\begin_inset Quotes eld
\end_inset

Komponenten
\begin_inset Quotes erd
\end_inset

 definierten Schnittstellen, eingesetzten Protokolle und die übertragenen
 Daten.
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Architektur"

\end_inset

Architektur
\end_layout

\begin_layout Standard
Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Architektur-des-SIMPL"

\end_inset

 zeigt die Architektur des SIMPL Rahmenwerks.
 Das Zusammenspiel der übergeordneten Komponenten wird in den folgenden
 Abschnitten beschrieben, auf die Komponenten selbst und ihre Erweiterungen
 wird dann in Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Komponenten"

\end_inset

 eingegangen.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Architektur.png
	width 90text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Architektur-des-SIMPL"

\end_inset

Architektur des SIMPL Rahmenwerks
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Eclipse
\end_layout

\begin_layout Standard
Die Entwicklungsumgebung Eclipse bildet mit den entsprechenden Plug-Ins
 sowohl die GUI für den Prozess-Modellierer, als auch den Workflow-Administrator.
 Mit dem Eclipse BPEL Designer Plug-In kann der Prozess-Modellierer bereits
 BPEL Prozesse erstellen und auf Apache ODE zum Einsatz bringen (deployen).
 Das SIMPL Eclipse Plug-In erweitert mit dem BPEL-DM Plug-In die bestehenden
 Aktivitäten des Eclipse BPEL Designer Plug-Ins um die DM-Aktivitäten.
 Die GUI für den Workflow-Administrator wird vom SIMPL Core Plug-In in Form
 einer Admin-Konsole bereitgestellt.
 (siehe 
\begin_inset CommandInset citation
LatexCommand cite
key "key-5"

\end_inset

, Kapitel 4).
 Mit dem RRS Plug-In wird die Verbindung zum Reference Resolution System
 (RRS) geschaffen.
 Dadurch können Referenzen verwaltet werden und falls Referenzen bei der
 Modellierung verwendet wurden, eine Modelltransformation vor dem Deployment
 durchgeführt werden, damit die Prozesse auch auf anderen Workflow Engines
 zum Einsatz kommen können.
\end_layout

\begin_layout Subsection
Apache Tomcat
\end_layout

\begin_layout Standard
Der Web Container Apache Tomcat ist die Laufzeitumgebung für Apache ODE
 und den SIMPL Core.
 Apache ODE ist für die Ausführung der Prozesse nach der Modellierung zuständig
 und benötigt, wie bereits in Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Das-SIMPL-Rahmenwerk"

\end_inset

 erwähnt, bestimmte Dienste für die Ausführung der zusätzlichen DM-Aktivitäten
 in den Prozessen wie z.B.
 das Ausführen eines Befehls auf einer Datenquelle.
 Diese Dienste werden vom SIMPL Core bereitgestellt, der sich aus nach Aufgaben
 eingeteilten Web Services zusammensetzt.
 Zusätzlich werden für die Umsetzung des Reference Resolution Systems (RRS)
 weitere Dienste bereitgestellt, die den SIMPL Core ergänzen.
 Das RRS verwaltet die Referenzen über den SIMPL Core, der seinerseits das
 RRS für das Late Binding benötigt.
 Das Auditing von Apache ODE wird über den SIMPL Core auf einer beliebigen
 externen Datenquelle ermöglicht.
\end_layout

\begin_layout Subsection
UDDI Registry
\end_layout

\begin_layout Standard
Eine UDDI Registry ermöglicht eine zentrale Verwaltung von Datenquellen,
 die zur Modellierung bereitgestellt werden.
 Dort können auch Eigenschaften und Anforderungen zu Datenquellen abgelegt
 werden, die für das Late Binding benötigt werden.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Komponenten"

\end_inset

Komponenten
\end_layout

\begin_layout Standard
In Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Komponenten"

\end_inset

 werden die für das SIMPL Rahmenwerk relevanten Komponenten und ihre Abhängigkei
ten gezeigt, die in den folgenden Abschnitten näher beschrieben werden.
 Die Richtung der Pfeile beschreibt die Richtung in der die Zugriffe stattfinden.
 Der SIMPL Core greift für das Late Binding auf Apache jUDDI zu um eine
 passende Datenquelle zu finden.
 Für Einstellungen zur Laufzeit muss vom SIMPL Core direkt auf Apache ODE
 zugegriffen werden.
 Apache ODE verwendet den SIMPL Core für die Ausführung der DM-Aktivitäten
 und verwendet dabei den RRS Service um Referenzen aufzulösen.
 Eclipse bietet die Möglichkeit den SIMPL Core über eine GUI zu administrieren,
 die Einstellungen werden im SIMPL Core gespeichert.
 Beim Deployment eines modellierten Prozesses, wird über den RRS eine Modelltran
formation durchgeführt und der Prozess in Apache ODE deployt.
 Die Referenzen des RRS werden ebenfalls über eine GUI in Eclipse verwaltet
 und vom RRS über den SIMPL Core gespeichert.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Komponenten.png
	width 60text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Komponenten"

\end_inset

Komponenten des SIMPL Rahmenwerks
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Eclipse
\begin_inset Note Note
status open

\begin_layout Plain Layout
- Erweiterung der Anfragesprachen (
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Erweiterbarkeit"

\end_inset

) wird durch entsprechende GUI-Schnittstellen ermöglicht
\end_layout

\begin_layout Plain Layout
- Erweiterung um neue DM-Aktivitäten und Anfragesprachen, wird bei der GUI
 wie erreicht? (zB.
 modularer Aufbau,...)
\end_layout

\begin_layout Plain Layout
- IPVS-Referenzen werden evtl.
 im Deployment Descriptor erstellt und beim Deployment aufgelöst
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Die Enwicklungsumgebung Eclipse in Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Eclipse-mit-SIMPL"

\end_inset

 besteht im Rahmen des SIMPL Projekts aus der Eclipse Basis IDE und dem
 SIMPL Eclipse Plug-In.
 Das SIMPL Eclipse Plug-In setzt sich aus verschiedenen Plug-Ins zusammen,
 die über bestehende Extension Points realisiert werden und ggf.
 selbst Extension Points anbieten.
 In den folgenden Abschnitten werden die Plug-Ins näher beschrieben.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Eclipse.png
	width 90text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Eclipse-mit-SIMPL"

\end_inset

Eclipse mit SIMPL Erweiterungen
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Eclipse Extension Points
\end_layout

\begin_layout Standard
Eclipse bietet über Extension Points die Möglichkeit die IDE zu erweitern.
 Für das SIMPL Projekt nutzen wir den 
\begin_inset Quotes eld
\end_inset

Menu View
\begin_inset Quotes erd
\end_inset

 - und 
\begin_inset Quotes eld
\end_inset

View
\begin_inset Quotes erd
\end_inset

 Extension Point, den Eclipse zur Verfügung stellt.
\end_layout

\begin_layout Paragraph
Menu 
\end_layout

\begin_layout Standard
Das Menu stellt die Auswahlmöglicheiten als Drop-Down Liste dar, die auf
 die verschiedene Funktionsbereiche des Plug-In referenziert.
 
\end_layout

\begin_layout Standard
Das Menu Extensoin Point wird im Rahmen der SIMPL dazu verwendet, um SIMPL-Menu
 zusätsliche Einträge hinzüfügen zu können.
\end_layout

\begin_layout Standard
Dieses SIMPL-Menu beinhaltet die Menupunkte wie 
\begin_inset Quotes eld
\end_inset

Admin-Consol
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

Settings
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

Auditing
\begin_inset Quotes erd
\end_inset

 und 
\begin_inset Quotes eld
\end_inset

Help
\begin_inset Quotes erd
\end_inset

, die auf ensprechende Fenster verlinken.
\end_layout

\begin_layout Paragraph
View
\end_layout

\begin_layout Standard
Das View im Eclipse ist eine Art Fenster im Framwork, die Funktionen etc.
 für den gesammten Plug-In erfüllt.
\end_layout

\begin_layout Standard
Im Rahmen der SIMPL-Plug-In wird eine View verwendet um die Referenzen für
 das RRS-Plug-In einzustellen bzw.
 verwalten.
 
\end_layout

\begin_layout Subsubsection
Eclipse BPEL Designer Plug-In Extension Points
\begin_inset Note Note
status open

\begin_layout Plain Layout
Erwähnen, dass es auch noch mehr Extension Points gibt
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Es wird an der unten drei Extension Points eingegangen, weil im Rahmen von
 SIMPL werden nur folgender drei Extnsion Points benutzt.
 
\end_layout

\begin_layout Standard
Es gibt auch noch weitere Extension Points in BPEL Designer Plug-In.
\end_layout

\begin_layout Paragraph
UIObjectFactory
\end_layout

\begin_layout Standard
Dieser Extension Point ermöglicht das Erzeugen von Instanzen die dann grafisch
 auf der Modellierungsfläche abgelegt und logisch integriert werden.
\end_layout

\begin_layout Paragraph
PaletteAdditions
\end_layout

\begin_layout Standard
Die Palette ist im BPEL Editor eine Auswahl der zur Verfügung stehenden
 Möglichkeiten.
 Durch diesen Extension Point wird das Hinzufügen einer neuen Möglichkeit
 bzw.
 Aktivität ermöglicht.
 Hier wird bei der Modellierung die Aktivität ausgewählt.
\end_layout

\begin_layout Paragraph
PropertySections
\end_layout

\begin_layout Standard
Diese Extension Point ermöglicht das erweitern von Property-Fenstern, die
 die BPEL Aktivitäten verwalten indem Variablen, Eigenschaften oder Referenzen
 etc.
 eingestellt werden.
\end_layout

\begin_layout Subsubsection
BPEL-DM Plug-In
\begin_inset Note Note
status open

\begin_layout Plain Layout
Eigene Extension Points?
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Im Rahmen der BPEL-DM Plug-In beinhaltet die Daten Aktivitäten, die den
 Aktivitäten vom BPEL Designer Plug-In erweitert.
\end_layout

\begin_layout Standard
Die Erweiterung der Aktivitäten geschieht in der drei Extinsion Points :
\end_layout

\begin_layout Itemize
UIObjectFactory
\end_layout

\begin_layout Itemize
PaletteAdditions
\end_layout

\begin_layout Itemize
PropertySections
\end_layout

\begin_layout Standard
Für die jeweilige DM-Aktivitäten existiert die 
\begin_inset Quotes eld
\end_inset

Properties
\begin_inset Quotes erd
\end_inset

 Fenster, die wieder erweiterbar ist.
\end_layout

\begin_layout Standard
Die Erweiterbarkeit der 
\begin_inset Quotes eld
\end_inset

Properties
\begin_inset Quotes erd
\end_inset

 Fenster jeder DM-Aktivität wird durch XML-Dateien geleistet.
 Die Erweiterbarkeit in diesem Sinn betrifft speziel neue Abfragesprachen
 und dafür benötigte GUI Elemente.
\end_layout

\begin_layout Subsubsection
SIMPL Core Plug-In
\begin_inset Note Note
status open

\begin_layout Plain Layout
Eigene Extension Points?
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
RRS Plug-In
\end_layout

\begin_layout Subsection
Apache ODE
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
- Alles was dazu im Schaubild zu sehen ist, muss beschrieben werden
\end_layout

\begin_layout Plain Layout
- Erweiterung um neue Events für das Auditing wird wie erreicht? (zB.
 Event Klasse spezialisieren,...)
\end_layout

\begin_layout Plain Layout
-
\begin_inset space \space{}
\end_inset

BPEL Variablen für SDO Objekte?
\end_layout

\begin_layout Plain Layout
-Beschreibung von ManagementAPI muss in Apache ODE Kapitel
\end_layout

\begin_layout Plain Layout
\begin_inset Quotes eld
\end_inset

Das ManagementAPI von Apache ODE bietet Funktionen auf Prozess- und auf
 Instanzenebene, darüber können z.B.
 Prozesse gestartet und beendet werden und Informationen zu einzelnen Instanzen
 abgerufen werden.
 
\begin_inset Quotes eld
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Hier wird der Aufbau und die einzelnen Bestandteile von ODE, die für das
 SIMPL Rahmenwerk von Bedeutung sind erläutert.
 Zunächst wird kurz Beschreibung über den derzeitigen Zustand von ODE geboten
 und im Anschluss folgt eine Beschreibung der Erweiterungen, die notwendig
 sind.
 In 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Apache-ODE-mit"

\end_inset

 werden alle wichtigen Bestandteile dargestellt.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ApacheODE.png
	width 90text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Apache-ODE-mit"

\end_inset

Apache ODE mit SIMPL Erweiterungen
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Schnittstellen
\end_layout

\begin_layout Standard
In diesem Teil folgt eine kurze Beschreibung der Schnittstellen über die
 die ODE Engine verfügt.
 Diese werden hier nur aufgelistet, aber voraussichtlich nicht verwendet.
\end_layout

\begin_layout Paragraph
ProcessManagement und InstanceManagement (Management API)
\end_layout

\begin_layout Standard
Die Management API von Apache ODE bietet Funktionen auf Prozess- und auf
 Instanzebene an.
 Dadurch können z.B.
 bestimmte Nachrichten an Prozesse geschickt werden um deren Ausführung
 zu starten oder zu beenden und es können Informationen zu den einzelnen
 Instanzen abgerufen werden.
\end_layout

\begin_layout Standard
Die Management API unterteilt sich in Instanz-Management und Prozess-Management.
 Beide bieten verschiedene Funktionen für Instanzen bzw.
 Prozesse an.
 Es besteht auf der einen Seite die Möglichkeit, verschiedene Informationen
 über die Prozesse und Instanzen zu erhalten, zum Beispiel eine Liste der
 verschiedene Prozessmodelle oder Informationen über ein einzelnes Prozessmodell
, auf der anderen Seite ist es aber auch möglich, direkt mit Prozessinstanzen
 zu interagieren.
 Dadurch ist es beispielsweise möglich, eine Prozessinstanz anzuhalten,
 oder direkt zu terminieren.
\end_layout

\begin_layout Paragraph
DeploymentService
\end_layout

\begin_layout Standard
Der Deployment Service bietet verschiedene Funktionen für das Deployment
 von Prozessen an.
 Dazu gehören neben einer Deploy- und Undeploy-Funktion unter Anderem auch
 das Auflisten von deployten Prozessen.
 In den nächsten Iterationen kommen noch weitere Punkte hinzu, die das Deploymen
t betreffen.
 
\end_layout

\begin_layout Subsubsection
Komponenten
\end_layout

\begin_layout Standard
bla
\end_layout

\begin_layout Paragraph
Plug-In Architektur
\end_layout

\begin_layout Standard
ODE verfügt über eine Plug-In-Architektur mit der es unter anderem möglich
 ist Extension Activities zu erstellen, die die Standardaktivitäten von
 BPEL erweitern.
 Dazu werden spezielle Interfaces zur Verfügung gestellt.
 Dabei handelt es sich um 
\begin_inset Quotes eld
\end_inset

AbstractSyncExtensionOperation
\begin_inset Quotes erd
\end_inset

, bei synchronen Aktivitäten und um 
\begin_inset Quotes eld
\end_inset

AbstractAsyncExtensionOperation
\begin_inset Quotes erd
\end_inset

 bei asynchronen Aktivitäten.
 Um diese Aktivitäten der ODE Engine hinzuzufügen, ist es notwendig diese
 als jar-Dateien in den Classpath zu kopieren.
 Anschließend ist es nur noch notwendig die Extension in der ODE Engine
 zu registieren.
 Dies geschieht in der ode-axis2.PROPERTIES Datei.
\end_layout

\begin_layout Paragraph
Event System
\end_layout

\begin_layout Standard
Innerhalb des ODE Event Systems existieren bereits 5 Event-Typen.
 Diese sind:
\end_layout

\begin_layout Itemize
Instance Life Cycle Events
\end_layout

\begin_layout Itemize
Activity Life Cycle Events
\end_layout

\begin_layout Itemize
Scope Handling Events
\end_layout

\begin_layout Itemize
Data Handling Events
\end_layout

\begin_layout Itemize
Correlation Events
\end_layout

\begin_layout Standard
Diese Events sind in einer Hierarchie organisiert.
\end_layout

\begin_layout Paragraph
Data Access Object (DAO)
\end_layout

\begin_layout Standard
Das DAO ist für die persistente Datenhaltung aller Daten die innerhalb von
 ODE erzeugt werden zuständig.
 Weiterhin werden mit Hilfe des DAOs die Auditing Daten in der Embedded
 Auditing Datenbank gespeichert.
 Das DAO bietet außerdem verschiedene Einstellungen für die Auditing Datenbank
 an.
 So ist es mit Hilfe des DAOs wie bereits oben erläutert möglich das Auditing
 auf eine externe Datenbank umzuleiten.
 Es existiert zum Beispiel die Möglichkeit eine MySQL Datenbank zu nutzen.
\end_layout

\begin_layout Paragraph
Embedded Auditing Datenbank
\end_layout

\begin_layout Standard
Die Auditingdaten die ODE erzeugt, werden momentan in einer Embedded Datenbank
 gespeichert.
 Dies ist eine Apache Derby Datenbank die sowohl Hibernate als auch JPA
 unterstützt.
 Welche Art der Datenbank genutzt wird, kann durch ein entsprechendes DAO
 eingestellt werden.
 Es ist weiterhin möglich statt der embedded Datenbank eine externe Datenbank
 zu nutzen in dem dies in einem DAO und der axis2-properties-Datei eingestellt
 wird.
\end_layout

\begin_layout Subsubsection
Erweiterungen
\end_layout

\begin_layout Standard
bla
\end_layout

\begin_layout Paragraph
SIMPL DM Extension Activities
\end_layout

\begin_layout Standard
Extension Acitivities für die Apache ODE Workflow Engine werden als Java
 Klassen erstellt, welche die Implementierung der neuen Aktivitäten enthalten.
 Weiterhin ist es notwendig die unter Plug-in Architektur genannten Interfaces
 zu implementieren.
 Bei der Ausführung der DM-Aktivitäten wird der SIMPL Core genutzt um die
 Datenmanagement-Operationen zu realisieren.
\end_layout

\begin_layout Paragraph
SIMPL Events
\end_layout

\begin_layout Standard
Für das Auditing der DM-Aktivitäten ist es notwendig, dass eine Reihe von
 eigenen Events erstellt wird.
 Dies geschieht durch Erstellung neuer Event-Klassen, die von den bestehenden
 Event Klassen abgeleitet und anschließend innerhalb der Engine eingebunden
 werden.
 Diese neuen Events werden unterteilt in DM-Events und Connection-Events.
 DM-Events betreffen hierbei die Ausführung der DM-Aktivitäten, während
 Connection-Events Rückmeldung über die Verbindung zu einer Datenquelle
 liefern.
 Die einzelnen Events sind:
\end_layout

\begin_layout Subparagraph
DM-Events:
\end_layout

\begin_layout Itemize
DMStarted
\end_layout

\begin_layout Itemize
DMFailure
\end_layout

\begin_layout Itemize
DMEnd
\end_layout

\begin_layout Subparagraph
Connection-Events:
\end_layout

\begin_layout Itemize
ConnectionStarted
\end_layout

\begin_layout Itemize
ConnectionLost
\end_layout

\begin_layout Itemize
ConnectionEnd
\end_layout

\begin_layout Standard
Bei der Implementierung werden DM-Events und Connection-Events jeweils als
 ein neuer Event-Typ implementiert und die einzelnen spezifischen Events
 werden von diesen abgeleitet.
 Dies bietet die Möglichkeit die Granularitätseinstellungen innerhalb des
 Deployment-Deskriptors ebenfalls um diese Typen zu erweitern.
 Die Events werden direkt in den Extension Activities eingebunden und werden
 hier auch ausgelöst.
 Es ist nicht vorgesehen diese Events an einer anderen Stelle in ODE zu
 nutzen.
\end_layout

\begin_layout Paragraph
SIMPL DAO
\end_layout

\begin_layout Standard
Das SIMPL DAO ermöglicht es die Auditing Daten auf eine externe Datenquelle
 umzuleiten.
 Dies wird durch eine entsprechende Implementierung erreicht und über den
 SIMPL Core gesteuert.
\end_layout

\begin_layout Subsection
SIMPL Core
\end_layout

\begin_layout Standard
Der SIMPL Core, dargestellt in Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:SIMPL-Core"

\end_inset

, stellt die Funktionalität zur Verfügung, die während der Modellierung
 und der Ausführung von Prozessen benötigt wird.
 Er bietet nach Außen verschiedene Web Services zu Verfügung, die jeweils
 bestimmte Aufgaben innerhalb des SIMPL Rahmenwerks haben.
 Der SIMPL Core wird als JAR-Datei im Classpath von Apache ODE hinterlegt,
 dadurch wird eine schnelle direkte Kommunikation zwischen dem SIMPL Core
 und Apache ODE ermöglicht.
 Desweiteren kann der SIMPL Core als Singleton betrieben werden und es können
 damit z.B.
 Verbindungen zu Datenquellen für Folgezugriffe aufrecht gehalten werden.
 Die Web Services des SIMPL Cores werden dabei innerhalb der Axis2 Installation
 von Apache ODE bereitgestellt und zusätzlich mit der Java API JAX-WS annotiert,
 damit ein Einsatz auch mit anderen Web Containern außer Apache Tomcat möglich
 ist (siehe Anforderung 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Verwendbarkeit"

\end_inset

).
 
\end_layout

\begin_layout Standard
In den folgenden Abschnitten werden zunächst die Web Services des SIMPL
 Core und ihre Aufgaben näher beschrieben.
 Die Schnittstellen und ihre Verwendung werden in Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Schnittstellen"

\end_inset

 weiter ausgeführt.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename SIMPLCore.png
	width 90text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:SIMPL-Core"

\end_inset

SIMPL Core
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Administration Service
\end_layout

\begin_layout Standard
Über den Administration Service wird die Funktionalität für die Admin-Konsole
 (siehe Anforderung 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Admin-Konsole"

\end_inset

) in Eclipse bereitgestellt.
 Die Einstellungen der Admin-Konsole werden über den Storage Service verwaltet.
 Für Einstellungen, mit denen zur Laufzeit Einfluss auf Apache ODE genommen
 wird, wie z.B.
 die Granularität des Auditings, werden die vorhandenen Schnittstellen von
 Apache ODE verwendet und, falls nötig, neue Schnittstellen geschaffen.
 Die geforderte austauschbare GUI (siehe Anforderung 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Erweiterbarkeit"

\end_inset

), wird durch die WSDL-Schnittstelle erreicht.
\end_layout

\begin_layout Subsubsection
Datasource Service
\end_layout

\begin_layout Standard
Der Datasource Service ist für alle Aufgaben zuständig, die den Zugriff
 auf die Datenquellen betreffen.
 Dort werden entsprechende Adapter (siehe 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Adapter"

\end_inset

) in Form von Direct Access Services (DAS) implementiert, die den Zugriff
 auf verschiedene Typen von Datenquellen ermöglichen und die Erweiterbarkeit
 für weitere Typen und Anfragesprachen (siehe Anforderung 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Erweiterbarkeit"

\end_inset

) garantieren.
 Des Weiteren werden Plug-In-Schnittstellen (siehe 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Plug-In"

\end_inset

) für zusätzliche funktionale Erweiterungen geschaffen, wie z.B die Unterstützung
 verschiedener Dateitypen bei Dateisystemen.
 Referenzen werden vom RRS Service über den Datasource Service aufgelöst.
\end_layout

\begin_layout Subsubsection
Security Service
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Was macht der Service konkret? "verarbeiten", "transformieren", "zwischenspeiche
rn" - das sagt mir nichts über seine Funktionalität aus.
 WIE soll denn SSO realisiert werden? Meldet der Service sich bei den Datenquell
en an? Wie macht er das? usw.
\end_layout

\begin_layout Plain Layout
Ihr solltet in dem Zusammenhang auch über die Verwaltung der Connections
 nachdenken, z.B.
 über einen connection pool o.ä.
 Es ist an dieser Stelle nicht klar, ob das hier der Security Service macht,
 ob das der Data Source Service macht (oder ein anderer), ob man dafür einen
 neuen Service braucht, oder ob das der Container, in dem der SIMPL Core
 deployed ist, machen soll.
\end_layout

\begin_layout Plain Layout
Tomcat oder ein Service Bus sollten dafür auch entsprechende Funktionalitäten
 bieten.
 Sprecht da am besten mal mit Michael Reiter drüber.
 Auf jeden Fall sollte so etwas in den Grobentwurf.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Der Security Service ist zuständig für die Verwaltung von Informationen
 zur Authentifizierung und Autorisierung gegenüber Datenquellen.
 Mit diesem Service können ggf.
 auch Authentifizierungs- und Autorisierungsinformationen in andere Formate
 transformiert werden, wie beispielsweise Benutzername und Passwort nach
 SAML.
 Die Informationen werden über den Storage Service verwaltet um das Konzept
 des SSO (siehe Anforderung 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Authentifizierung-und-Autorisierung"

\end_inset

) zu realisieren.
 Die genaue Rolle des Security Service wird erst in einer späteren Iteration
 spezifiziert.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Strategy-Service"

\end_inset

Strategy Service
\end_layout

\begin_layout Standard
Der Strategy Service wird vom DatasourceService für das Late Binding (siehe
 Anforderung 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Late-Binding-von"

\end_inset

) verwendet.
 Dort stehen verschiedene Auswahlstrategien bzw.
 -algorithmen zur Verfügung, um mit im Prozess formulierten Anforderungen
 eine passende Datenquelle ausfindig zu machen.
 Die Datenquellen zur Auswahl werden von der UDDI Registry (Apache jUDDI)
 bereitgestellt.
 In einer späteren Iteration werden die Strategien 
\begin_inset Quotes eld
\end_inset

Erster Fund
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

Bester Fund
\begin_inset Quotes erd
\end_inset

 und 
\begin_inset Quotes eld
\end_inset

Passender Fund
\begin_inset Quotes erd
\end_inset

 realisiert, die erst in einer späteren Iteration näher spezifiziert werden.
\end_layout

\begin_layout Subsubsection
Storage Service
\end_layout

\begin_layout Standard
Der Storage Service verwaltet in einer embedded Datenbank alle Daten die
 innerhalb des Rahmenwerks gespeichert werden müssen.
 Damit werden beispielsweise vom Administration Service die Einstellungen
 des SIMPL Rahmenwerks aus der Admin-Konsole gespeichert und können später
 wieder abgerufen werden.
 Auch andere Services können diesen Dienst zur Verwaltung von Daten benutzen,
 wie z.B.
 der Security Service zur Verwaltung von Authentifizierungs- und Autorisierungsi
nformationen.
\end_layout

\begin_layout Subsection
Reference Resolution System (RRS)
\end_layout

\begin_layout Standard
Das RRS erfüllt die Anforderung, große Datenmengen in BPEL referenzieren
 zu können (siehe Anforderung 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Große-Datenmengen"

\end_inset

).
 Wie in Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Reference-Resolution-System"

\end_inset

 zu sehen ist, besteht es aus drei Web Services, die in den folgenden Abschnitte
n beschrieben werden.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename RRS.png
	width 60text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Reference-Resolution-System"

\end_inset

Reference Resolution System (RRS)
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
RRS Retrieval Service
\end_layout

\begin_layout Standard
Über den RRS Retrieval Service lassen sich Referenzen auflösen und die referenzi
erten Daten bei Bedarf in einen Prozess holen.
 Die Referenzen werden mit dem Datasource Service des SIMPL Core aufgelöst.
\end_layout

\begin_layout Subsubsection
RRS Administration Service
\end_layout

\begin_layout Standard
Mit dem RRS Administration Service können Referenzen über das Eclipse RRS
 Plug-In verwaltet werden.
 Die Verwaltung geschieht dabei über den Storage Service vom SIMPL Core.
\end_layout

\begin_layout Subsubsection
RRS Transformation Service
\end_layout

\begin_layout Standard
Damit modellierte Prozesse auch auf anderen Workflow Engines ausgeführt
 werden können (siehe Anforderung 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Verwendbarkeit"

\end_inset

), wird der Transformation Service bereitgestellt, mit dem der um Referenzen
 erweiterte BPEL Code in standard-konformen BPEL-Code transformiert werden
 kann.
 Die Transformation wird über das RRS-Plug-In vor dem Deployment mit dem
 Eclipse BPEL Designer Plug-In durchgeführt.
\end_layout

\begin_layout Subsection
Apache jUDDI
\end_layout

\begin_layout Standard
Das SIMPL Rahmenwerk stellt mit Apache jUDDI bereits eine UDDI-Registry
 zur Verfügung, in der Datenquellen von Datenquellen-Administratoren verwaltet
 werden können.
 Das BPEL-DM Plug-In kann über die Registry Datenquellen für den Modellierer
 zur Verfügung stellen.
 Durch den UDDI Standard können auch beliebige andere UDDI-Registries angebunden
 werden.
 (siehe Anforderung 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Erweiterbarkeit"

\end_inset

)
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Schnittstellen"

\end_inset

Schnittstellen
\end_layout

\begin_layout Standard
In diesem Kapitel wird die Kommunikation der Komponenten über die Schnittstellen
 beschrieben und interne und externe Abhängigkeiten, sowie eingesetzte Protokoll
e und übertragene Objekte, erläutert.
 Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Schnittstellen"

\end_inset

 zeigt dazu die Schnittstellen in einer Übersicht, die in den folgenden
 Abschnitten näher beschrieben werden.
 Bei allen Schnittstellen handelt es sich um WSDL-Schnittstellen mit denen
 über ein Übertragungsprotokoll wie z.B.
 HTTP SOAP-Nachrichten ausgetauscht werden können.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Schnittstellen.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Schnittstellen"

\end_inset

Schnittstellen des SIMPL Rahmenwerks
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
SIMPL Core
\end_layout

\begin_layout Standard
Hier werden die Schnittstellen des SIMPL Rahmenwerks und ihre Verwendung
 von den Komponenten beschrieben.
\end_layout

\begin_layout Subsubsection
DatasourceService
\end_layout

\begin_layout Standard
Die DatasourceService-Schnittstelle wird von Apache ODE beim Zugriff auf
 Datenquellen und das Speichern der Auditing-Daten verwendet.
 Sie bietet Funktionen zum Abrufen der Daten von Datenquellen und Senden
 von Befehlen in unterstützten Anfragesprachen.
 Die Daten werden dabei als Service Data Object (SDO) 
\begin_inset CommandInset citation
LatexCommand cite
key "key-4"

\end_inset

 übertragen.
\end_layout

\begin_layout Subsubsection
StrategyService
\end_layout

\begin_layout Standard
Die StrategyService-Schnittstelle wird vom Datasource Service für das Late
 Binding genutzt und bietet Funktionen für die verschiedenen Auswahlstrategien
 (siehe 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Strategy-Service"

\end_inset

).
 Die nichtfunktionalen Anforderungen an die Datenquellen werden dabei als
 WS-Policy-Objekte übertragen, andere funktionale Eigenschaften im XML-Format.
\end_layout

\begin_layout Subsubsection
ReferenceService
\begin_inset Note Note
status open

\begin_layout Plain Layout
RRS Implementierung beschreiben, siehe Paper.....Literaturverweis nicht vergessen...
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Die ReferenceService-Schnittstelle wird bei der Modellierung in Eclipse
 zur Verwaltung von Referenzen genutzt und von Apache ODE zur Auflösung
 der Referenzen zur Laufzeit verwendet.
 Sie bietet Funktionen zur Verwaltung und Auflösung von Referenzen, wobei
 die Daten der aufgelösten Referenzen als SDO zurückgeliefert werden.
\end_layout

\begin_layout Subsubsection
SecurityService
\end_layout

\begin_layout Standard
Die SecurityService-Schnittstelle bietet Funktionen für die Verwaltung und
 Transformation von Authentifizierungs- und Autorisierungsinformationen.
 Sie wird vom Datasource Service benötigt um entsprechende Informationen
 für einen Zugriff auf eine Datenquelle abzurufen.
 Die Informationen werden dabei unter anderem in der Security Assertion
 Markup Language (SAML) und der eXtensible Access Control Markup Language
 (XACML) übertragen.
\end_layout

\begin_layout Subsubsection
AdministrationService
\end_layout

\begin_layout Standard
Die AdministrationService-Schnittstelle bietet Funktionen, mit denen Einstellung
en zur Prozesslaufzeit gemacht werden können.
 Weiterhin werden Funktionen für die Verwaltung der Einstellungen der Admin-Kons
ole angeboten.
 Die Einstellungen der Admin-Konsole werden dabei als SDO übertragen.
\end_layout

\begin_layout Subsubsection
TransformationService
\end_layout

\begin_layout Standard
Die TransformationService-Schnittstelle bietet eine Funktion zur Umwandlung,
 des durch die DM-Aktivitäten erweiterten BPEL-Code, in standard-konformen
 BPEL-Code.
 Dazu werden die entsprechenden BPEL-Dateien übergeben und entsprechend
 transformierte Kopien der Prozessmodelle zurückgeliefert.
\end_layout

\begin_layout Subsubsection
StorageService
\end_layout

\begin_layout Standard
Die StorageService-Schnittstelle bietet Funktionen zur Verwaltung von Daten
 innerhalb des Rahmenwerks und wird vom Reference Service, Administration
 Service und SecurityService verwendet.
 Zusätzlich bietet sie dem Administration Service die Möglichkeit, eine
 Datenquelle für die Speicherung festzulegen.
 Alle Daten werden als SDO übertragen.
\end_layout

\begin_layout Subsubsection
RegistryService
\begin_inset Note Note
status open

\begin_layout Plain Layout
Datenquellen hinzufügen direkt aus Eclipse oder über AdminService?
\end_layout

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
Schnittstelle muss allgemein gehalten werden, nicht WSDL/WS-Policy
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Die RegistryService-Schnittstelle bietet Funktionen für die Verwaltung von
 Datenquellen und ihren Eigenschaften in der angebundenen Registry.
 Der StrategyService, sowie Eclipse, bekommen dadurch Zugriff auf die vorhanden
 Datenquelle, die über diese Schnittstelle abgerufen werden.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{section}{Literaturverzeichnis}
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-1"

\end_inset

Knauß, Markus: 
\shape italic
Entwurfsvorlage
\shape default
.
 Institut für Softwaretechnologie, März 2008.
 http://www.iste.uni-stuttgart.de/se/, Abruf: 06.12.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-2"

\end_inset

Ludewig, Jochen; Lichter, Horst: 
\shape italic
Software Engineering.
 
\shape default
Grundlagen, Menschen, Prozesse und Techniken.
 dpunkt.verlag GmbH, 2007.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-3"

\end_inset

Alves, Alexandre; Arkin, Assaf; Askary, Sid; Barreto, Charlton; Bloch, Ben;
 Curbera, Francisco; Ford, Mark; Goand, Yaron; Guízar, Alejandro; Kartha,
 Neelakantan; Liu, Canyang Kevin; Khalaf, Rania; König, Dieter; Marin, Mike;
 Mehta, Vinkesh; Thatte, Satish; van der Rijn, Danny; Yendluri, Prasad;
 Yiu, Alex: 
\emph on
Web Services Business Process Execution Language Version 2.0
\emph default
.
 Organization for the Advancement of Structured Information Standards OASIS,
 11.
 April 2007.
 http://docs.oasis-open.org/wsbpel/2.0/OS/wsbpel-v2.0-OS.pdf, Abruf: 11.11.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-4"

\end_inset

Adams, Matthew; Andrei, Cezar; Barack, Ron; Blohm, Henning; Boutard, Christophe;
 Brodsky, Stephen; Budinsky, Frank; Bünnig, Stefan; Carey, Michael; Doughan,
 Blaise; Grove, Andy; Halaseh, Omar; Harris, Larry; von Mersewsky, Ulf;
 Moe, Shawn; Nally, Martin; Preotiuc-Pietro, Radu; Rowley, Mike; Samson,
 Eric; Taylor, James; Thiefaine, Arnaud: 
\emph on
Service Data Objects For Java
\emph default
.
 Version: 2.1.0, November 2006.

\emph on
 
\emph default
http://www.osoa.org/download/attachments/36/Java-SDO-Spec-v2.1.0-FINAL.pdf, Abruf:
 11.11.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-5"

\end_inset


\shape italic
Spezifikation v1.1
\shape default
.

\shape italic
 
\shape default
Stupro-A SIMPL (2009).
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{section}{Abkürzungsverzeichnis}
\end_layout

\end_inset


\end_layout

\begin_layout Section*

\series bold
\size larger
Abkürzungsverzeichnis
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="21" columns="2">
<features>
<column alignment="left" valignment="top" width="2cm">
<column alignment="left" valignment="top" width="10cm">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
API
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Application Programming Interface
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
BPEL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Business Process Execution Language
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DAO
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data Access Object
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DAS
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data Access Service
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DM
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data-Management
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GEF
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Graphical Editing Framework
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GUI
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Graphical User Interface
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
JAX-WS
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Java API for XML - Web Services
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ODE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Orchestration Director Engine
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RRS
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Reference Resolution System
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SAML
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Security Assertion Markup Language
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SDO
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Service Data Object
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SIMPL 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SimTech: Information Management, Processes and Languages
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SOAP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Simple Object Access Protocol
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SQL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Structured Query Language
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SSO
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Single Sign On
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
UDDI
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Universal Description, Discovery and Integration
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
WS
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Web Service
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
WSDL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Web Service Description Language
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
XACML
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
eXtensible Access Control Markup Language
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
XQuery
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
XML Query Language
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{section}{Abbildungsverzeichnis}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList figure

\end_inset


\end_layout

\end_body
\end_document
