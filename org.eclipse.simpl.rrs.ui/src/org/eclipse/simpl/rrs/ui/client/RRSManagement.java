
package org.eclipse.simpl.rrs.ui.client;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.logging.Logger;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;

import org.eclipse.simpl.rrs.ui.RRSUIPlugIn;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.1.6 in JDK 6
 * Generated source version: 2.1
 * 
 */
@WebServiceClient(name = "RRSManagement", targetNamespace = "http://localhost:8080", wsdlLocation = "file:/C:/simplWorkspace/org.simpl.rrs/RRSManagement.wsdl")
public class RRSManagement
    extends Service
{
	private final static String RRS_MG_WSDL = RRSUIPlugIn.getDefault().getPreferenceStore().getString("RRS_MG_ADDRESS");

    private final static URL RRSMANAGEMENT_WSDL_LOCATION;
    private final static Logger logger = Logger.getLogger(org.eclipse.simpl.rrs.ui.client.RRSManagement.class.getName());

    static {
        URL url = null;
        try {
            URL baseUrl;
            baseUrl = RRSManagement.class.getResource(".");
            url = new URL(baseUrl, RRS_MG_WSDL);
        } catch (MalformedURLException e) {
            logger.warning("Failed to create URL for the wsdl Location: '"+ RRS_MG_WSDL + "', retrying as a local file");
            logger.warning(e.getMessage());
        }
        RRSMANAGEMENT_WSDL_LOCATION = url;
    }

    public RRSManagement(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public RRSManagement() {
        super(RRSMANAGEMENT_WSDL_LOCATION, new QName("http://webservices.rrs.simpl.org/", "RRSManagementService"));
    }

    /**
     * 
     * @return
     *     returns RRSManagementService
     */
    @WebEndpoint(name = "RRSManagementServicePort")
    public RRSManagementService getRRSManagementServicePort() {
        return super.getPort(new QName("http://webservices.rrs.simpl.org/", "RRSManagementServicePort"), RRSManagementService.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns RRSManagementService
     */
    @WebEndpoint(name = "RRSManagementServicePort")
    public RRSManagementService getRRSManagementServicePort(WebServiceFeature... features) {
        return super.getPort(new QName("http://webservices.rrs.simpl.org/", "RRSManagementServicePort"), RRSManagementService.class, features);
    }

}
