#LyX 1.6.3 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\begin_preamble





\usepackage{babel}

%Packages für eigen definierte Header und Footer
\usepackage{lastpage}
\usepackage{fancyhdr}

% doctitel = Titel des Dokuments
% docvers = Versionsnr.
% docautor = Author(en)
% docdate = Datum der letzten Änderung
\def\doctitel{Spezifikation}
\def\docvers{1.0}
\def\docautor{Firas Zoabi, Michael Schneidt,Daniel Brüderle, René Rehn}
\def\docdate{01. August 2009}

% docstate = Status des Dokuments aus {neu, bearbeitet} 
% qsstate = QS-Prüfungsstatus aus {positiv QS-geprüft, negativ QS-geprüft, verworfen}
% proofstate = Prüfungsstatus (durch Projektleiter) aus {positiv geprüft, negativ geprüft, verworfen}
% reviewstate = Annahmestatus des Reviews {kein Review durchgeführt, akzeptiert ohne Änderungen, akzeptiert mit Änderungen, nicht akzeptiert}
% endstate = Endstatus des Dokuments aus {freigegeben, verworfen}
\def\docstate{neu}
\def\qsstate{nicht QS-geprüft}
\def\proofstate{nicht geprüft}
\def\reviewstate{kein Review durchgeführt}
\def\endstate{-}

%Nicht einrücken
%\setlength{\parindent}{0pt}
\end_preamble
\use_default_options false
\language ngerman
\inputencoding latin9
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 0
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 3cm
\topmargin 3cm
\rightmargin 3cm
\bottommargin 3cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "Deckblatt.lyx"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "DokStatus.lyx"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%Header und Footer Definitionen für alle anderen Seiten
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
pagestyle
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

fancy
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset FormulaMacro
\renewcommand{\headrulewidth}{0mm}
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
lhead
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
chead
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
rhead
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
lfoot
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\size small
SIMPL © 2009 $IMPL
\size default

\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
cfoot
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
rfoot
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\size small

\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
thepage
\end_layout

\end_inset


\begin_inset space \space{}
\end_inset

/ 
\begin_inset CommandInset ref
LatexCommand pageref
reference "LastPage"

\end_inset


\size default

\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%Ab hier beginnt das Dokument
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Einleitung
\end_layout

\begin_layout Subsection
Zweck des Dokument
\end_layout

\begin_layout Standard
Die Spezifikation wird in allen Projektphasen als Referenzdokument verwendet.
 Sie dient als Orientierungsinstrument für den Entwicklern in allen Entwicklungs
phasen.
 
\end_layout

\begin_layout Standard
Die Spezifikation:
\end_layout

\begin_layout Itemize
wird auch für die Einhaltung der Anforderungen und Projektziele zwischen
 Auftraggeber und Auftragnehmer benutzt
\end_layout

\begin_layout Itemize
dient als ein Masstab, um zu überprüfen, ob die Software im laufe der Pojektentw
icklung korrekt entwickelt wird
\end_layout

\begin_layout Itemize
wird zur Erstellung des Testplan sowie zur Erstellung der Testfälle genutzt
\end_layout

\begin_layout Itemize
dient die Herstellung des Handbuches
\end_layout

\begin_layout Standard
Wegen alle oben genannte Anwendungsfälle und Wichtigkeit dieses Dokumentes
 muss dieser bei jeder Änderung der Anforderungen oder Funktionalitäten
 aktualiesiert werden.
\end_layout

\begin_layout Subsection
Übersicht über das Dokument
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
es soll ein überblick gegeben , welche Paragraphen beinhaltet dieses Spezifikati
on und welche hauptpunkte es behandelt.
 Ähnlich wie Gliederung aber stichpunkt-mässig.
\end_layout

\end_inset

Dieses Dokument behandelt drei Verschiedene Kapiteln:
\series bold

\begin_inset Newline newline
\end_inset

Allgemeine Beschreibung 
\series default
behandelt alle nicht funktionale aspekte, die den Projekt direkt 
\begin_inset Newline newline
\end_inset

betriffen wie Benutzergruppe und Beschränkungen.
\series bold

\begin_inset Newline newline
\end_inset

SIMPL
\series default
 beinhaltet alle direkt projektbezogene Beschreibung wie die grobe Architektur,
 sowie BPEL-Prozess und die Erweiterbarkeit des BPEL-Designer Plugin.
\series bold

\begin_inset Newline newline
\end_inset

Weitere Anforderungen
\series default
 fasst alle Elemente zusammen, die die Systemrahmen bzw.
 Systemumgebung konstruieren, wie technische, nicht-Funktionale und allgemeine
 Anfordetungen.
\end_layout

\begin_layout Subsection
Referenzierte Dokumente
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
hier dokumentieren wir die dokumente, die im zusammenhang mit der Spezifikation
 stehen .
 Begriffslexikon und Projektplan und natürlich über jedes Dokument kurzes
 Text was, und wofür.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Begriffslexikon: Durch das Begriffslexikon werden alle Begriffe, Definitionen
 und Abkürzungen definiert, die zu Missverständnissen innerhalb des Projektteams
 oder zwischen Projektteam und Kunde führen könnten.
 Das Begriffslexikon enthält sowohl technische als auch fachliche Begriffe.
\end_layout

\begin_layout Subsection
Begriffe, Definitionen und Abkürzungen
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
hier soll darauf hingewiessen werden ,dass die Begriffe und Definitionen
 in dieser Spezifikation sind im Begrifflexikon klare dargestellt bzw.
 definiert.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Die Begriffe, Definitionen und Abkürzungen, die in der Spezifikation verwendet
 werden, sind in der beigefügte Begriffslexikon, wie im vorhergehenden Abschnitt
 beschrieben ist, definiert und eindeudig erklärt.
\end_layout

\begin_layout Standard
Dies dient dazu, Missverständnisse zu vermeiden und die Fachbegriffe leichter
 zu verstehen.
\end_layout

\begin_layout Section
Allgemeine Beschreibung
\end_layout

\begin_layout Subsection
Projektteam-Organisation
\end_layout

\begin_layout Standard
In diesem Abschnitt wird die Organisation des Projektteams vorgestellt.
 Alle Teammitglieder haben dabei mindestens eine bestimmte Rolle, die mit
 entsprechenden Aufgaben und Pflichten verknüpft ist.
 Nachfolgend werden diese Rollen beschrieben und die Teammitglieder, die
 diese Rolle besitzen, angegeben.
 Danach folgen noch die Kontaktdaten aller Teammitglieder, damit der Kunde
 bei spezifischen Fragen direkt mit dem Verantwortlichen oder bei nicht
 erreichen des Projektleiters mit dessen Stellvertreter Kontakt aufnehmen
 kann.
 
\end_layout

\begin_layout Subsection
Rollen im Team
\end_layout

\begin_layout Standard

\series bold
\color black
Projektleiter: Wolfgang Hüttig (Stellvertreter: Michael Hahn)
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset

Der Projektleiter ist der zentrale Ansprechpartner für den Kunden.
 Er koordiniert sämtlichen Schriftverkehr und die Kommunikation zwischen
 den Kunden, den Betreuern und dem Team.
 Er ist auch an erster Stelle für das Projekt verantwortlich.
\end_layout

\begin_layout Standard
Seine zentralen Aufgaben liegen in der Verwaltung des Projekts, d.h.
 er plant den Ablauf des Projekts und der einzelnen Phasen, er bewertet
 und kontrolliert abschließend, als letzte Instanz, alle erstellten Dokumente
 vor ihrer Freigabe und er kümmert sich um die Verteilung der einzelnen
 Arbeitspakete während des Projekts.
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\series bold
Architekt: Michael Schneidt (Stellvertreter: Daniel Brüderle)
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset

Der Architekt ist zuständig für die Architektur des zu entwickelnden Softwaresys
tems und die Beschreibung der grundlegenden Komponenten und deren Zusammenspiel
 innerhalb des Softwaresystems.
 Er trifft die grundlegenden Entscheidungen über die Art und den Aufbau
 der Software-Architektur und überwacht deren Einhaltung während der Projektlauf
zeit.
 Die Architektur soll die Einhaltung der unter Abschnitt 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Grobspezifikation"

\end_inset

 genannten Softwarequalitäten sicherstellen.
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\series bold
\color black
Administrator: René Rehn (Stellvertreter: Michael Schneidt)
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset

Der Administrator ist in der Projektarbeit zuständig für die gesamte Infrastrukt
ur auf Software- sowie auch auf Hardware-Ebene.
 Er ist für den Betrieb und die Wartung der Server und den Betrieb der darauf
 ausgeführten Software verantwortlich.
 Weiterhin sorgt er für die Bereitstellung der nötigen Software-Infrastruktur,
 d.h.
 er sorgt dafür, dass die zur Verfügung stehende Software, wie z.B.
 Werkzeuge für Entwicklung, Test und Entwurf, die zur Realisierung des Projekts
 benötigt wird, für das Projekt eingerichtet und betriebsbereit ist..
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\series bold
\color black
Qualitätsmanagement: Michael Hahn, Firas Zoabi
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
Der Qualitätsmanager sorgt dafür, dass alle Dokumente und auch Software-Komponen
ten die bestmögliche Qualität besitzen.
 Diese Qualität soll durch die Definition und Einhaltung von Richtlinien,
 durch die ständige Durchführung von Qualitätskontrollen und durch die Erstellun
g von einheitlichen Dokumentvorlagen erreicht werden.
 So soll während des gesamten Projektverlaufs die Qualität der Dokumente
 und Software-Einheiten maximiert werden.
 Der genaue Ablauf der Qualitätssicherung wird in Abschnitt 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Qualitätssicherung-und-Konfigurationsmanagement"

\end_inset

 beschrieben.
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard

\series bold
\color black
Entwickler: Michael Schneidt, René Rehn, Daniel Brüderle, Michael Hahn,
 Firas Zoabi, Xi Tu
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset

Als Entwickler arbeiten alle Teammitglieder außer dem Projektleiter.
 Ein Entwickler arbeitet dabei im Rahmen der vom Projektleiter erteilten
 Aufgaben an Dokumenten und Software-Komponenten.
\end_layout

\begin_layout Standard
\noindent
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename E:/StuproA/Projekt_Workspace/Repository/documents/analyse/Projektangebot/rollen.png
	lyxscale 50
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Rollen-im-Team"

\end_inset

Rollen im Team
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Ausgangssituation
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
allgemeine Beschreibung für das Projekt
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
Zur Modellierung und Ausführung von Business Workflows wird die Sprache
 BPEL (Business Process Execution Language) bereits lange und effektiv eingesetz
t.
 Die Stärken von BPEL, die ,wie der Name schon sagt, im Bereich der Geschäftspro
zesse liegen, sollen nun auch für wissenschaftliche Workflows genutzt werden
 können.
 Im wissenschaftlichen Bereich gelten andere Anforderungen und dafür ist
 BPEL bis jetzt noch nicht geeignet.
 Da aber auch im wissenschaftlichen Bereich immer öfter Workflows eingesetzt
 werden, sei es bei der Durchführung von komplexen Berechnungen im Rahmen
 von Simulationen oder bei der Ausführung von Experimenten, sollen mithilfe
 einer Anpassung von BPEL die wissenschaftlichen Bedürfnisse an BPEL erfüllt
 werden.
 Gekennzeichnet sind wissenschaftliche Workflows in der Regel durch große
 Datenmengen, die Heterogenität der Daten und somit den Bedarf nach großer
 Rechenkapazität.
 Diesen Anforderungen soll durch die neu zu entwickelnde Software Rechnung
 getragen werden.
\end_layout

\begin_layout Subsection
Entwicklungsgrundlagen
\end_layout

\begin_layout Standard
Die Entwicklung von SIMPL erfolgt nach erprobten softwaretechnischen Prinzipien.
 Dadurch wird eine hohe Qualität des Produkts gewährleistet.
 Wichtige Qualitäten sind dabei die Wartbarkeit und die Erweiterbarkeit
 des Systems, da es über einen längeren Zeitraum bestehen soll und in Zukunft
 um die Anbindung weiterer Datenquellen, Konzepte für den Datenzugriff und
 den Umgang mit weiteren Datenformaten ergänzt werden soll.
 Eine weitere wichtige Qualität ist die Skalierbarkeit des Systems, die
 eine sehr flexible Infrastruktur erlauben muss, da die Computersysteme,
 auf denen SIMPL später ausgeführt wird, in ihrer Leistung sehr weit auseinander
 gehen, d.h.
 vom normalen Desktop-Computer bis zum Supercomputer kann und soll alles
 möglich sein.
\end_layout

\begin_layout Standard
Robustheit und Usability der Software sind für uns innerhalb des Entwicklungspro
zesses von großem Interesse.
 Die Usability sollte sich vor allem an unerfahrene und Nutzer mit wenig
 Kenntnissen im Umgang mit Workflows und BPEL richten und dafür die bestmögliche
 Transparenz liefern, d.h.
 das die interne Prozesslogik der Software bestmöglich vom Benutzer abgeschirmt
 wird und das er eine möglichst einfache und schnell verständliche Schnittstelle
 zur Software erhält, um die Verwendung von SIMPL für alle Benutzergruppen
 zu ermöglichen.
 
\end_layout

\begin_layout Subsection
Projektaufgabe
\end_layout

\begin_layout Standard
Das Entwicklungsteam soll ein erweiterbares, generisches Rahmenwerk für
 die Modellierung und Ausführung von Workflows erstellen, welches den Zugriff
 auf nahezu beliebige Datenquellen ermöglichen soll.
 Bei den Datenquellen kann es sich beispielsweise um Sensornetze, Datenbanken
 und Dateisysteme handeln.
 Der Schwerpunkt soll klar auf wissenschaftlichen Workflows beruhen.
 Über das Rahmenwerk sollen beliebige Datenmanagement-Funktionen in einen
 BPEL-Prozess eingebunden werden können.
 Dafür werden bereits vorhandene Konzepte evaluiert und falls nötig erweitert
 oder angepasst.
 Es wird untersucht, inwiefern die Sprache BPEL ebenfalls erweitert werden
 muss.
 Für eine möglichst hohe Flexibilität soll ein dynamischer Ansatz gewählt
 werden, so dass erst während der Laufzeit des Systems die Datenquellen
 festgelegt werden können.
 Nichtsdestotrotz sollte auch die Möglichkeit bestehen, die Datenquellen
 statisch anbinden zu können.
 Eine Anforderung des Kunden ist, dass eine vorhandene BPEL-Engine sowie
 ein vorhandenes Modellierungstool um diese gewünschten Funktionen erweitert
 bzw.
 angepasst werden.
 Die BPEL-Prozesse sollen mit dem entsprechenden Modellierungstool spezifiziert
 und mit der BPEL-Engine ausgeführt werden können.
\end_layout

\begin_layout Standard
In den nachfolgenden Abschnitten werden die aufgenommenen Anforderungen
 der Kundengespräche, das vorläufige grobe Gesamtkonzept und die vorläufige
 Software-Architektur, sowie die vorläufige vollständige Systemumbegung
 des Rahmenwerks beschrieben.
\end_layout

\begin_layout Subsection
Benutzergruppe
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
hier gehts darum für wem ist der Egebniss dieser Projkt.
 Zielgruppe ...
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Benutzer sind im Normalfall Wissenschaftler und Ingenieure.
\end_layout

\begin_layout Enumerate
Benutzer haben keine bis wenig Vorkentnisse im Bereich Workflow und Informatik.
\end_layout

\begin_layout Subsection
Einschränkungen
\end_layout

\begin_layout Section
SIMPL 
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Spezifiche Beschreibung für das Projektziel .
 Eine graphische Darstellung für ein Beispiel wissin.
 Workflow mithilfe von Bpel-Prozess ist sehr angebracht .es verschaft besseren
 überblick bei den Kunden sowie im Projektteam.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Grobspezifikation"

\end_inset

Grobspezifikation
\end_layout

\begin_layout Standard
Folgende grundlegende Anforderungen sollen im Rahmen des Projektes umgesetzt
 werden.
\end_layout

\begin_layout Subsubsection
Funktionale Anforderungen:
\end_layout

\begin_layout Enumerate
Das Rahmenwerk soll als Eclipse Plug-In verwendet werden.
\end_layout

\begin_layout Enumerate
Verarbeitung von großen heterogenen Datenmengen im Rahmen eines wissenschaftlich
en Workflows.
\end_layout

\begin_layout Standard

\series bold
\color black
BPEL:
\end_layout

\begin_layout Enumerate
Fehlerbehandlung und Kompensation im Workflow.
\end_layout

\begin_layout Enumerate
Unterstützung von Referenzen in BPEL-Prozessen
\end_layout

\begin_deeper
\begin_layout Enumerate
Referenzen (z.B.
 auf eine Tabelle) im SQL Statement via BPEL Variable
\end_layout

\begin_layout Enumerate
Implementierung eines Reference Resolution System in einer Testumgebung
 
\end_layout

\begin_deeper
\begin_layout Enumerate
Referenz/ Pointer im BPEL Prozess auflösen
\end_layout

\begin_layout Enumerate
Bei Daten, die nicht für die Prozesslogik, soll die Referenz / der Pointer
 vom Service aufgelöst werden (zur Entlastung der Engine)
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard

\series bold
BPEL Aktivitäten:
\end_layout

\begin_layout Enumerate
Alle generischen BPEL-Aktivitäten, die für den Umgang mit Datenquellen benötigt
 werden, müssen erstellt werden.
\end_layout

\begin_layout Enumerate
Das Anlegen, Löschen und Ändern von DB-Tabellen soll möglich sein.
\end_layout

\begin_layout Standard

\series bold
Anbindung von Datenquellen:
\end_layout

\begin_layout Enumerate
Late-binding bei Datenquellen: Kriterien zur Beschreibung von Datenquellen
 – Annotation von Datenquellen, Modellierung der Anforderungen an eine Datenquel
le (durch den Benutzer), Strategien zur Auswahl einer geeigneten Datenbank.
\end_layout

\begin_layout Enumerate
Anforderungen an eine Datenquelle sollen, falls die Datenquelle über einen
 Web-Service eingebunden ist, mit Anotation mit/über “QUALITY OF SERVICE”
 angegeben werden, sonst statische Auswahl einer Datenquelle zur Modellierungs-
 oder Laufzeit.
\end_layout

\begin_layout Enumerate
Ein Nutzer soll angeben können, was die Datenquelle können muss und das
 Rahmenwerk wählt eine passende Datenquelle aus (Strategie).
\end_layout

\begin_layout Enumerate
Spezifizierung der Anforderungen, die sinnvoll an eine Datenquelle gestellt
 werden können sollten, wird über die Definition eines Anforderungskataloges,
 der nach Fertigstellung mit dem Kunden abgesprochen werden muss, realisiert.
\end_layout

\begin_layout Enumerate
Ebenso sollen auch Strategien für die Auswahl von Datenquellen anhand definierte
r Anforderungen entwickelt und mit dem Kunden abgesprochen werden.
\end_layout

\begin_layout Enumerate
Die Strategien, die zur Auswahl einer Datenquelle anhand der vom Benutzer
 angegebenen Anforderungen verwendet werden, müssen selbst definiert und
 anschließend mit dem Kunden abgesprochen werden.
\end_layout

\begin_layout Enumerate
Die Auswertung der Anotationen und die Verarbeitung der darin enthaltenen
 Informationen soll, ebenfalls selbst definiert und anschließend mit dem
 Kunden abgesprochen werden.
\end_layout

\begin_layout Enumerate
Adressierung der Datenbanken: Statisch über konkrete Adresse oder dynamisch
 über logische Adresse.
\end_layout

\begin_layout Enumerate
Anbindung soll generisch sein, soviele Anbindungen wie möglich realisieren.
 Als Minimum gilt: IBM DB2 + OpenSourceDB’s (mind.
 1*RDB + mind.
 1*XMLDB) + mind.
 1*SensorDB (z.B.
 TinyDB).
\end_layout

\begin_layout Enumerate
Es sollen auch Zugriffe auf mehrere Datenquellen innerhalb eines Prozess
 möglich sein, dazu besitzt jede Aktivität seine eigene Datenquellen-Referenz.
\end_layout

\begin_layout Enumerate
Alle Anfragesprachen für den Datenbankzugriff müssen unterstützt werden,
 mindestens SQL und XQuery.
\end_layout

\begin_layout Enumerate
Transaktionen sollen innerhalb von DB und BPEL-Prozessen unterstützt werden.
 Konzepte frei wählbar.
\end_layout

\begin_layout Enumerate
Es soll möglich sein, dass Daten aus Datenbanken aus einem Prozess auch
 in lokale Dateien exportiert werden können.
 Dabei gilt: XML als Standardformat (siehe IBM Ansatz: RDB-Tabellen <->XML).
\end_layout

\begin_layout Enumerate
Datenbanken existieren bereits und müssen nicht durch das Rahmenwerk erstellt
 werden.
 Weiterhin sollen aber Schema-Definitionen möglich sein und das Erstellen,
 Ändern und Löschen von Tabellen innerhalb der Schemas.
\end_layout

\begin_layout Standard

\series bold
Autorisierung und Authentifizierung:
\end_layout

\begin_layout Enumerate
Autorisierung und Authentifizierung soll momentan nur für Datenquellen bereitges
tellt werden, allerdings soll eine spätere Erweiterung einfach realisiert
 werden können.
\end_layout

\begin_layout Enumerate
Für die Authentifizierung sind verschiedene Verfahren gewünscht, sodass
 in jeder Situation das Bestmögliche verwendet wird.
\end_layout

\begin_layout Enumerate
Die Autorisierung und die Authentifizierung sollen, über einen Single-Sign-On
 entweder im Prozess oder in der Instanz, beim Zugriff auf Datenquellen
 durchgeführt werden.
\end_layout

\begin_layout Enumerate
Autorisierung und Authentifizierung sollen auf die Ausführung von Prozessen
 beschränkt sein.
\end_layout

\begin_layout Enumerate
Autorisierungs- und Authentifizierungsparameter für einen Prozess sollen
 auf Datenquellenebene spezifiziert werden, d.h.
 bei Datenbanken über Schema und bei Dateisystemen z.B.
 über extra Dateien.
\end_layout

\begin_layout Enumerate
Autorisierung und Authentifizierung ist bei allen Datenquellen notwendig
 und soll auf verschiedene Arten möglich sein.
\end_layout

\begin_layout Enumerate

\color black
Angaben über Autorisierung und Authentifizierung sollen extra abgefragt
 und als Nachricht an die DB geschickt werden.
\end_layout

\begin_layout Standard

\series bold
Monitoring:
\end_layout

\begin_layout Enumerate
Monitoring der Prozessausführung: ExecutingHistory in einer angebundenen
 Datenbank speichern (nicht im lokalen Speicher der Engine).
\end_layout

\begin_layout Enumerate
Die Datenbank für das Monitoring muss über das Rahmenwerk frei wählbar sein
 und es soll nicht über mehrere Datenbanken verteilt sein.
\end_layout

\begin_layout Enumerate
Für unsere Zwecke muss ein komplettes Monitoring erstellt werden, d.h.
 ein Monitoring für BPEL, ODE und alle Datenquellenaktionen.
\end_layout

\begin_layout Enumerate
Das vorhandene Monitoring von BPEL und Apache ODE muss um das Monitoring
 unserer Funktionalitäten und die Möglichkeit eine variable DB als Monitoring-DB
 anzugeben erweitert werden.
\end_layout

\begin_layout Enumerate
Es soll ein Modell für das Monitoring (Informationen) erstellt und mit den
 Kunden abgesprochen werden.
\end_layout

\begin_layout Enumerate
Die Speicherungsdauer der Monitoring-Daten soll variabel als Parameter übergeben
 werden können.
\end_layout

\begin_layout Enumerate
Das Monitoring soll standardmäßig aktiv sein, aber auch auf Benutzerwunsch
 abschaltbar.
 Dies soll auch über den Eclipse BPEL-Designer mit Deployment-Deskriptoren
 definierbar sein.
\end_layout

\begin_layout Standard

\series bold
Demo-Programm:
\end_layout

\begin_layout Enumerate
Die Inhalte der Demo werden später geklärt.
 Es sollen darin die wichtigsten Use-Cases vorgeführt und ein kurzer Einblick
 in die Dokumentation gegeben werden.
\end_layout

\begin_layout Enumerate
In der Demo soll der Zugriff auf die IBM DB2 Datenbank, eine OpenSource
 RDB und eine OpenSource XMLDB, sowie evtl.
 auf Sensornetzdaten mittels TinyDB (falls öffentlich zugänglich) gezeigt
 werden.
 Ebenso soll eine kurze Vorstellung der Monitoring-DB-Anbindung, mit einer
 der oben genannten Datenbanken, gezeigt werden.
\end_layout

\begin_layout Subsection
Grobes Gesamtkonzept und Software-Architektur
\end_layout

\begin_layout Standard
In diesem Abschnitt wird das vorläufige Gesamtkonzept und die vorläufige
 Software-Architekur der zu entwickelnden Software beschrieben.
\end_layout

\begin_layout Standard
Wie in Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Architektur"

\end_inset

 dargestellt, soll das Rahmenwerk in drei Schichten unterteilt werden.
 
\end_layout

\begin_layout Standard
Die Präsentationsschicht wird durch den Eclipse BPEL-Designer realisiert.
 Dort ist es möglich BPEL-Prozesse mit Datenmanagement-Funktionen zu modellieren
 und auszuführen.
 Die Datenmanagement-Funktionen werden durch Extension Activity Plug-Ins
 in den Designer eingebunden.
 Einstellungen, die erst zur Laufzeit dem SIMPL Core übergeben werden sollen,
 können über Deployment-Deskriptoren festgelegt werden.
 Von dort wird der Prozess an die Anwendungsschicht übergeben.
\end_layout

\begin_layout Standard
In der Anwendungsschicht wird der Prozess ausgewertet und von der Workflow-Engin
e ausgeführt.
 Bei der Ausführung des Prozess kann auf Funktionalitäten des SIMPL Core
 zugegriffen werden.
 Der SIMPL Core realisiert folgende Funktionen und Konzepte über eine Service
 Component Architecture (SCA):
\end_layout

\begin_layout Itemize
Authentifizierte und autorisierte Datenquellenzugriffe
\end_layout

\begin_layout Itemize
Monitoring der Datenquellenzugriffe
\end_layout

\begin_layout Itemize
Datenquellenunabhängige Zugriffe auf heterogene Daten
\end_layout

\begin_layout Itemize
Verwendung von Transaktionen für Datenzugriffe
\end_layout

\begin_layout Itemize
Auswahl geeigneter Datenquellen anhand definierter Strategien und vom Benutzer
 angegebener Eigenschaften
\end_layout

\begin_layout Itemize
Binden und Auflösen von logischen Namen
\end_layout

\begin_layout Standard
Die Datenschicht beeinhaltet alle verwendbaren Datenquellen mit den dazugehörige
n Authentifizierungs- und Autorisierungsinformationen und den Eigenschaften
 der jeweiligen Datenquelle.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename E:/StuproA/Projekt_Workspace/Repository/documents/analyse/Projektangebot/GrundlegendeArchitektur.jpeg
	lyxscale 40
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Architektur"

\end_inset

Übersicht über das grobe Gesamtkonzept
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Systemumgebung
\end_layout

\begin_layout Standard
Die Systemumgebung (siehe Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Systemumgebung"

\end_inset

)besteht aus den unterschiedlichen Datenquellen, Eclipse mit dem BPEL-Designer
 Plug-In und dem Apache Tomcat Web-Server, in dem das Rahmenwerk und die
 Apache ODE Workflow-Engine ausgeführt wird.
 Dabei läuft die benötigte Software auf dem lokalen Rechner des Benutzers
 und die Datenquellen sind verteilt auf verschiedenen Servern.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename E:/StuproA/Projekt_Workspace/Repository/documents/analyse/Projektangebot/Systemumgebung.jpeg
	lyxscale 80
	width 70text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Systemumgebung"

\end_inset

Übersicht über die Systemumgebung von SIMPL
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Work Flow
\end_layout

\begin_layout Subsection
BPEL-Prozess
\end_layout

\begin_layout Subsection
Erweiterbarkeit des BPEL-Prozesses
\end_layout

\begin_layout Subsection
Use-Cases
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
wo und wie sind Erweiterungen für das BPEL-Prozess.
 Hier soll das eigentliche Vorgehen unsere Arbeit dargestellt.
\end_layout

\end_inset


\end_layout

\begin_layout Section
Weitere Anforderungen
\end_layout

\begin_layout Subsection
Technische Anforderungen
\end_layout

\begin_layout Subsubsection
Speicherplatz
\end_layout

\begin_layout Subsubsection
Geschwindigkeit und Performance
\end_layout

\begin_layout Subsection
Nicht-funktionale Anforderungen
\end_layout

\begin_layout Enumerate
Die Schnittstellen des Rahmenwerks sollen leicht erweiterbar sein und insgesamt
 soll ein modularer Aufbau zugrunde liegen.
\end_layout

\begin_layout Enumerate
Fehlertoleranz: Scopes mit Handler.
 CompensationHandler und FaultHandler implementieren Logik für die Kompensation
 von Fehlern (rollback).
\end_layout

\begin_layout Enumerate
Ausfallsicherheit soll so gut wie möglich sein.
\end_layout

\begin_layout Enumerate
Usability sollte sich an Benutzer orientieren und dazu die größtmögliche
 Transparenz liefern.
\end_layout

\begin_layout Enumerate
Es gibt keine bestimmte Infrastruktur in der das System später läuft.
 ODE läuft überall lokal und die Datenbanken sind verteilt.
\end_layout

\begin_layout Enumerate
Skalierbarkeit: keine bestimmte Infrastruktur => von schlechten PC’s bis
 zu Supercomputern ist alles möglich.
\end_layout

\begin_layout Enumerate
Performance soll so gut wie möglich sein.
\end_layout

\begin_layout Subsubsection
Mengengerüst
\end_layout

\begin_layout Subsubsection
Erweiterbarkeit
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
man könnte diesen unterpunkt als ein Hauptpunkt, wegen ihre wichtigkeit,
 nehmen und behandeln.
 ???
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Sicherheit
\end_layout

\begin_layout Subsubsection
Wartbarkeit
\end_layout

\begin_layout Subsubsection
Verfügbarkeit
\end_layout

\begin_layout Subsubsection
Robustheit
\end_layout

\begin_layout Subsubsection
Zuverlässigkeit
\end_layout

\begin_layout Subsection
Allgemeine Anforderungen
\end_layout

\begin_layout Subsubsection
Kompatibilität
\end_layout

\begin_layout Subsubsection
Hardware
\end_layout

\begin_layout Subsubsection
Software
\end_layout

\begin_layout Subsubsection
Sprache
\end_layout

\begin_layout Section
Usecases
\end_layout

\begin_layout Subsection
Eclipse BPEL Designer
\end_layout

\begin_layout Subsubsection
Authentifizierung/Autorisierung
\end_layout

\begin_layout Enumerate
Authentifizierungsparameter angeben
\end_layout

\begin_layout Subsubsection
Aktivitäten erstellen, Aktivitäten löschen, Aktivitäten ändern
\end_layout

\begin_layout Enumerate
Select
\end_layout

\begin_layout Enumerate
Insert
\end_layout

\begin_layout Enumerate
Update
\end_layout

\begin_layout Enumerate
Delete
\end_layout

\begin_layout Enumerate
Create
\end_layout

\begin_layout Enumerate
Call Procedure
\end_layout

\begin_layout Enumerate
Retrive Set
\end_layout

\begin_layout Enumerate
Write Back
\end_layout

\begin_layout Enumerate
Import
\end_layout

\begin_layout Enumerate
Export
\end_layout

\begin_layout Enumerate
Move
\end_layout

\begin_layout Subsubsection
Dattenquelle auswählen
\end_layout

\begin_layout Enumerate
Datenquelle manuell auswählen
\end_layout

\begin_layout Enumerate
Datenquelle per Strategie auswählen
\end_layout

\begin_layout Enumerate
Datenquelle per physikalische Adresse auswählen
\end_layout

\begin_layout Enumerate
Strategie auswählen
\end_layout

\begin_layout Enumerate
Datenquellen Eigenschaften festlegen
\end_layout

\begin_layout Enumerate
Datenquellen Art auswählen???????????
\end_layout

\begin_layout Subsubsection
Sonstiges Funktinalität
\end_layout

\begin_layout Enumerate
Adminkonsole öffnen.
\end_layout

\begin_layout Enumerate
Prozess deployn.
\end_layout

\begin_layout Subsection
Annotations
\end_layout

\begin_layout Enumerate
Erstellen
\end_layout

\begin_layout Enumerate
Laden
\end_layout

\begin_layout Enumerate
Speichern
\end_layout

\begin_layout Enumerate
Bearbeiten
\end_layout

\begin_layout Enumerate
Löschen
\end_layout

\begin_layout Subsection
Adminkonsole
\end_layout

\begin_layout Subsubsection
Monitoring/Auditing
\end_layout

\begin_layout Enumerate
Anschalten
\end_layout

\begin_layout Enumerate
Abschalten
\end_layout

\begin_layout Enumerate
Granularität ändern/festlegen
\end_layout

\begin_layout Enumerate
Auditing Db festlegen
\end_layout

\begin_layout Subsubsection
Referenzen
\end_layout

\begin_layout Enumerate
Einfügen (rrs)
\end_layout

\begin_layout Enumerate
Bearbeiten (rrs)
\end_layout

\begin_layout Enumerate
Löschen (rrs)
\end_layout

\begin_layout Subsection
Interne Usecases
\end_layout

\begin_layout Subsubsection
RRS
\end_layout

\begin_layout Enumerate
Referenz auflösen (dereferenzieren)
\end_layout

\begin_layout Enumerate
Plugin einfügen????????????????
\end_layout

\begin_layout Subsubsection
Aktivitäten
\end_layout

\begin_layout Enumerate
Ausführen
\end_layout

\begin_layout Enumerate
Kompensieren
\end_layout

\begin_layout Enumerate
Rollback (deutsch?) Wiederherstellung???
\end_layout

\begin_layout Subsubsection
Late Bindung
\end_layout

\begin_layout Enumerate
Datenquellan abrufen (woher auch immer)
\end_layout

\begin_layout Enumerate
Annotation auswerten.(Schneimi weiß es)
\end_layout

\begin_layout Enumerate
Liste filtern (anhand der Eigenschaften)
\end_layout

\begin_layout Enumerate
Datenquelle per Strategie auswählen.
\end_layout

\begin_layout Section
Änderungsgeschichte
\end_layout

\begin_layout Itemize

\series bold
Version 0.1
\series default
, 01.
 August 2009: Erstellung des Dokuments.
 
\end_layout

\end_body
\end_document
